'''OpenGL extension VERSION.GLES3_3_0

This module customises the behaviour of the 
OpenGL.raw.GLES3.VERSION.GLES3_3_0 to provide a more 
Python-friendly API

The official definition of this extension is available here:
http://www.opengl.org/registry/specs/VERSION/GLES3_3_0.txt
'''
from OpenGL import platform, constant, arrays
from OpenGL import extensions, wrapper
import ctypes
from OpenGL.raw.GLES3 import _types, _glgets
from OpenGL.raw.GLES3.VERSION.GLES3_3_0 import *
from OpenGL.raw.GLES3.VERSION.GLES3_3_0 import _EXTENSION_NAME

def glInitGles330VERSION():
    '''Return boolean indicating whether this extension is available'''
    from OpenGL import extensions
    return extensions.hasGLExtension( _EXTENSION_NAME )

glGenQueries=wrapper.wrapper(glGenQueries).setOutput(#
    'ids',size=lambda x:(x,),pnameArg='n',orPassIn=True
)
glGetQueryiv=wrapper.wrapper(glGetQueryiv).setOutput(#
    'params',size=_glgets._glget_size_mapping,pnameArg='pname',orPassIn=True
)
glGetQueryObjectuiv=wrapper.wrapper(glGetQueryObjectuiv).setOutput(#
    'params',size=_glgets._glget_size_mapping,pnameArg='pname',orPassIn=True
)
glGetBufferPointerv=wrapper.wrapper(glGetBufferPointerv).setOutput(#
    'params',size=(1,),orPassIn=True
)
glGenVertexArrays=wrapper.wrapper(glGenVertexArrays).setOutput(#
    'arrays',size=lambda x:(x,),pnameArg='n',orPassIn=True
)
glGetIntegeri_v=wrapper.wrapper(glGetIntegeri_v).setOutput(#
    'data',size=_glgets._glget_size_mapping,pnameArg='target',orPassIn=True
)
# OUTPUT MULTIPLE glGetTransformFeedbackVarying
# OUTPUT MULTIPLE glGetTransformFeedbackVarying
# OUTPUT MULTIPLE glGetTransformFeedbackVarying
# OUTPUT MULTIPLE glGetTransformFeedbackVarying
glGetVertexAttribIiv=wrapper.wrapper(glGetVertexAttribIiv).setOutput(#
    'params',size=(1,),orPassIn=True
)
glGetVertexAttribIuiv=wrapper.wrapper(glGetVertexAttribIuiv).setOutput(#
    'params',size=(1,),orPassIn=True
)
# COMPSIZE(program,location) glGetUniformuiv=wrapper.wrapper(glGetUniformuiv)
glGetUniformIndices=wrapper.wrapper(glGetUniformIndices).setOutput(#
    'uniformIndices',size=_glgets._glget_size_mapping,pnameArg='uniformCount',orPassIn=True
)
glGetActiveUniformsiv=wrapper.wrapper(glGetActiveUniformsiv).setOutput(#
    'params',size=_glgets._glget_size_mapping,pnameArg='pname',orPassIn=True
)
glGetActiveUniformBlockiv=wrapper.wrapper(glGetActiveUniformBlockiv).setOutput(#
    'params',size=_glgets._glget_size_mapping,pnameArg='pname',orPassIn=True
)
# OUTPUT MULTIPLE glGetActiveUniformBlockName
# OUTPUT MULTIPLE glGetActiveUniformBlockName
glGetInteger64v=wrapper.wrapper(glGetInteger64v).setOutput(#
    'data',size=_glgets._glget_size_mapping,pnameArg='pname',orPassIn=True
)
# OUTPUT MULTIPLE glGetSynciv
# OUTPUT MULTIPLE glGetSynciv
glGetInteger64i_v=wrapper.wrapper(glGetInteger64i_v).setOutput(#
    'data',size=_glgets._glget_size_mapping,pnameArg='target',orPassIn=True
)
glGetBufferParameteri64v=wrapper.wrapper(glGetBufferParameteri64v).setOutput(#
    'params',size=_glgets._glget_size_mapping,pnameArg='pname',orPassIn=True
)
glGenSamplers=wrapper.wrapper(glGenSamplers).setOutput(#
    'samplers',size=lambda x:(x,),pnameArg='count',orPassIn=True
)
glGetSamplerParameteriv=wrapper.wrapper(glGetSamplerParameteriv).setOutput(#
    'params',size=_glgets._glget_size_mapping,pnameArg='pname',orPassIn=True
)
glGetSamplerParameterfv=wrapper.wrapper(glGetSamplerParameterfv).setOutput(#
    'params',size=_glgets._glget_size_mapping,pnameArg='pname',orPassIn=True
)
glGenTransformFeedbacks=wrapper.wrapper(glGenTransformFeedbacks).setOutput(#
    'ids',size=lambda x:(x,),pnameArg='n',orPassIn=True
)
# OUTPUT MULTIPLE glGetProgramBinary
# OUTPUT MULTIPLE glGetProgramBinary
# OUTPUT MULTIPLE glGetProgramBinary
glGetInternalformativ=wrapper.wrapper(glGetInternalformativ).setOutput(#
    'params',size=lambda x:(x,),pnameArg='bufSize',orPassIn=True
)
### END AUTOGENERATED SECTION

