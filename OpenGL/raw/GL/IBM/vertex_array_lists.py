'''OpenGL extension IBM.vertex_array_lists

Automatically generated by the get_gl_extensions script, do not edit!
'''
from OpenGL import platform, constants, constant, arrays
from OpenGL import extensions
from OpenGL.GL import glget
import ctypes
EXTENSION_NAME = 'GL_IBM_vertex_array_lists'
_DEPRECATED = False

glColorPointerListIBM = platform.createExtensionFunction( 
'glColorPointerListIBM',dll=platform.GL,
extension=EXTENSION_NAME,
resultType=None, 
argTypes=(constants.GLint,constants.GLenum,constants.GLint,ctypes.POINTER(ctypes.c_void_p),constants.GLint,),
doc='glColorPointerListIBM(GLint(size), GLenum(type), GLint(stride), POINTER(ctypes.c_void_p)(pointer), GLint(ptrstride)) -> None',
argNames=('size','type','stride','pointer','ptrstride',),
deprecated=_DEPRECATED,
)

glSecondaryColorPointerListIBM = platform.createExtensionFunction( 
'glSecondaryColorPointerListIBM',dll=platform.GL,
extension=EXTENSION_NAME,
resultType=None, 
argTypes=(constants.GLint,constants.GLenum,constants.GLint,ctypes.POINTER(ctypes.c_void_p),constants.GLint,),
doc='glSecondaryColorPointerListIBM(GLint(size), GLenum(type), GLint(stride), POINTER(ctypes.c_void_p)(pointer), GLint(ptrstride)) -> None',
argNames=('size','type','stride','pointer','ptrstride',),
deprecated=_DEPRECATED,
)

glEdgeFlagPointerListIBM = platform.createExtensionFunction( 
'glEdgeFlagPointerListIBM',dll=platform.GL,
extension=EXTENSION_NAME,
resultType=None, 
argTypes=(constants.GLint,arrays.GLbooleanArray,constants.GLint,),
doc='glEdgeFlagPointerListIBM(GLint(stride), GLbooleanArray(pointer), GLint(ptrstride)) -> None',
argNames=('stride','pointer','ptrstride',),
deprecated=_DEPRECATED,
)

glFogCoordPointerListIBM = platform.createExtensionFunction( 
'glFogCoordPointerListIBM',dll=platform.GL,
extension=EXTENSION_NAME,
resultType=None, 
argTypes=(constants.GLenum,constants.GLint,ctypes.POINTER(ctypes.c_void_p),constants.GLint,),
doc='glFogCoordPointerListIBM(GLenum(type), GLint(stride), POINTER(ctypes.c_void_p)(pointer), GLint(ptrstride)) -> None',
argNames=('type','stride','pointer','ptrstride',),
deprecated=_DEPRECATED,
)

glIndexPointerListIBM = platform.createExtensionFunction( 
'glIndexPointerListIBM',dll=platform.GL,
extension=EXTENSION_NAME,
resultType=None, 
argTypes=(constants.GLenum,constants.GLint,ctypes.POINTER(ctypes.c_void_p),constants.GLint,),
doc='glIndexPointerListIBM(GLenum(type), GLint(stride), POINTER(ctypes.c_void_p)(pointer), GLint(ptrstride)) -> None',
argNames=('type','stride','pointer','ptrstride',),
deprecated=_DEPRECATED,
)

glNormalPointerListIBM = platform.createExtensionFunction( 
'glNormalPointerListIBM',dll=platform.GL,
extension=EXTENSION_NAME,
resultType=None, 
argTypes=(constants.GLenum,constants.GLint,ctypes.POINTER(ctypes.c_void_p),constants.GLint,),
doc='glNormalPointerListIBM(GLenum(type), GLint(stride), POINTER(ctypes.c_void_p)(pointer), GLint(ptrstride)) -> None',
argNames=('type','stride','pointer','ptrstride',),
deprecated=_DEPRECATED,
)

glTexCoordPointerListIBM = platform.createExtensionFunction( 
'glTexCoordPointerListIBM',dll=platform.GL,
extension=EXTENSION_NAME,
resultType=None, 
argTypes=(constants.GLint,constants.GLenum,constants.GLint,ctypes.POINTER(ctypes.c_void_p),constants.GLint,),
doc='glTexCoordPointerListIBM(GLint(size), GLenum(type), GLint(stride), POINTER(ctypes.c_void_p)(pointer), GLint(ptrstride)) -> None',
argNames=('size','type','stride','pointer','ptrstride',),
deprecated=_DEPRECATED,
)

glVertexPointerListIBM = platform.createExtensionFunction( 
'glVertexPointerListIBM',dll=platform.GL,
extension=EXTENSION_NAME,
resultType=None, 
argTypes=(constants.GLint,constants.GLenum,constants.GLint,ctypes.POINTER(ctypes.c_void_p),constants.GLint,),
doc='glVertexPointerListIBM(GLint(size), GLenum(type), GLint(stride), POINTER(ctypes.c_void_p)(pointer), GLint(ptrstride)) -> None',
argNames=('size','type','stride','pointer','ptrstride',),
deprecated=_DEPRECATED,
)


def glInitVertexArrayListsIBM():
    '''Return boolean indicating whether this extension is available'''
    return extensions.hasGLExtension( EXTENSION_NAME )
