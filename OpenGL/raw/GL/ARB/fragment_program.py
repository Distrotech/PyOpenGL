'''OpenGL extension ARB.fragment_program

Automatically generated by the get_gl_extensions script, do not edit!
'''
from OpenGL import platform as _p
EXTENSION_NAME = 'GL_ARB_fragment_program'
_p.unpack_constants( """GL_FRAGMENT_PROGRAM_ARB 0x8804
GL_PROGRAM_ALU_INSTRUCTIONS_ARB 0x8805
GL_PROGRAM_TEX_INSTRUCTIONS_ARB 0x8806
GL_PROGRAM_TEX_INDIRECTIONS_ARB 0x8807
GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0x8808
GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0x8809
GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0x880A
GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB 0x880B
GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB 0x880C
GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB 0x880D
GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0x880E
GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0x880F
GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0x8810
GL_MAX_TEXTURE_COORDS_ARB 0x8871
GL_MAX_TEXTURE_IMAGE_UNITS_ARB 0x8872""", globals())
glget.addGLGetConstant( GL_FRAGMENT_PROGRAM_ARB, (1,) )
glget.addGLGetConstant( GL_MAX_TEXTURE_COORDS_ARB, (1,) )
glget.addGLGetConstant( GL_MAX_TEXTURE_IMAGE_UNITS_ARB, (1,) )


def glInitFragmentProgramARB():
    '''Return boolean indicating whether this extension is available'''
    from OpenGL import extensions
    return extensions.hasGLExtension( EXTENSION_NAME )
