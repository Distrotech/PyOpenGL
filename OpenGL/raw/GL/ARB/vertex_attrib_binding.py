'''Autogenerated by get_gl_extensions script, do not edit!'''
from OpenGL import platform as _p, constants as _cs, arrays
from OpenGL.GL import glget
import ctypes
EXTENSION_NAME = 'GL_ARB_vertex_attrib_binding'
def _f( function ):
    return _p.createFunction( function,_p.GL,'GL_ARB_vertex_attrib_binding',False)
_p.unpack_constants( """GL_VERTEX_ATTRIB_BINDING 0x82D4
GL_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D5
GL_VERTEX_BINDING_DIVISOR 0x82D6
GL_VERTEX_BINDING_OFFSET 0x82D7
GL_VERTEX_BINDING_STRIDE 0x82D8
GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET 0x82D9
GL_MAX_VERTEX_ATTRIB_BINDINGS 0x82DA""", globals())
@_f
@_p.types(None,_cs.GLuint,_cs.GLuint,_cs.GLintptr,_cs.GLsizei)
def glBindVertexBuffer(bindingindex,buffer,offset,stride):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLint,_cs.GLenum,_cs.GLboolean,_cs.GLuint)
def glVertexAttribFormat(attribindex,size,type,normalized,relativeoffset):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLint,_cs.GLenum,_cs.GLuint)
def glVertexAttribIFormat(attribindex,size,type,relativeoffset):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLint,_cs.GLenum,_cs.GLuint)
def glVertexAttribLFormat(attribindex,size,type,relativeoffset):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLuint)
def glVertexAttribBinding(attribindex,bindingindex):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLuint)
def glVertexBindingDivisor(bindingindex,divisor):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLuint,_cs.GLuint,_cs.GLintptr,_cs.GLsizei)
def glVertexArrayBindVertexBufferEXT(vaobj,bindingindex,buffer,offset,stride):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLuint,_cs.GLint,_cs.GLenum,_cs.GLboolean,_cs.GLuint)
def glVertexArrayVertexAttribFormatEXT(vaobj,attribindex,size,type,normalized,relativeoffset):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLuint,_cs.GLint,_cs.GLenum,_cs.GLuint)
def glVertexArrayVertexAttribIFormatEXT(vaobj,attribindex,size,type,relativeoffset):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLuint,_cs.GLint,_cs.GLenum,_cs.GLuint)
def glVertexArrayVertexAttribLFormatEXT(vaobj,attribindex,size,type,relativeoffset):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLuint,_cs.GLuint)
def glVertexArrayVertexAttribBindingEXT(vaobj,attribindex,bindingindex):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLuint,_cs.GLuint)
def glVertexArrayVertexBindingDivisorEXT(vaobj,bindingindex,divisor):pass


def glInitVertexAttribBindingARB():
    '''Return boolean indicating whether this extension is available'''
    from OpenGL import extensions
    return extensions.hasGLExtension( EXTENSION_NAME )
