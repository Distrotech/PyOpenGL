'''OpenGL extension ARB.tessellation_shader

Automatically generated by the get_gl_extensions script, do not edit!
'''
from OpenGL import platform, constants, constant, arrays
from OpenGL import extensions
from OpenGL.GL import glget
import ctypes
EXTENSION_NAME = 'GL_ARB_tessellation_shader'
_DEPRECATED = False
GL_PATCHES = constant.Constant( 'GL_PATCHES', 0xE )
GL_PATCH_VERTICES = constant.Constant( 'GL_PATCH_VERTICES', 0x8E72 )
GL_PATCH_DEFAULT_INNER_LEVEL = constant.Constant( 'GL_PATCH_DEFAULT_INNER_LEVEL', 0x8E73 )
GL_PATCH_DEFAULT_OUTER_LEVEL = constant.Constant( 'GL_PATCH_DEFAULT_OUTER_LEVEL', 0x8E74 )
GL_TESS_CONTROL_OUTPUT_VERTICES = constant.Constant( 'GL_TESS_CONTROL_OUTPUT_VERTICES', 0x8E75 )
GL_TESS_GEN_MODE = constant.Constant( 'GL_TESS_GEN_MODE', 0x8E76 )
GL_TESS_GEN_SPACING = constant.Constant( 'GL_TESS_GEN_SPACING', 0x8E77 )
GL_TESS_GEN_VERTEX_ORDER = constant.Constant( 'GL_TESS_GEN_VERTEX_ORDER', 0x8E78 )
GL_TESS_GEN_POINT_MODE = constant.Constant( 'GL_TESS_GEN_POINT_MODE', 0x8E79 )
GL_ISOLINES = constant.Constant( 'GL_ISOLINES', 0x8E7A )
GL_FRACTIONAL_ODD = constant.Constant( 'GL_FRACTIONAL_ODD', 0x8E7B )
GL_FRACTIONAL_EVEN = constant.Constant( 'GL_FRACTIONAL_EVEN', 0x8E7C )
GL_MAX_PATCH_VERTICES = constant.Constant( 'GL_MAX_PATCH_VERTICES', 0x8E7D )
GL_MAX_TESS_GEN_LEVEL = constant.Constant( 'GL_MAX_TESS_GEN_LEVEL', 0x8E7E )
GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = constant.Constant( 'GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS', 0x8E7F )
GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = constant.Constant( 'GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS', 0x8E80 )
GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = constant.Constant( 'GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS', 0x8E81 )
GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = constant.Constant( 'GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS', 0x8E82 )
GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = constant.Constant( 'GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS', 0x8E83 )
GL_MAX_TESS_PATCH_COMPONENTS = constant.Constant( 'GL_MAX_TESS_PATCH_COMPONENTS', 0x8E84 )
GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = constant.Constant( 'GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS', 0x8E85 )
GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = constant.Constant( 'GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS', 0x8E86 )
GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = constant.Constant( 'GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS', 0x8E89 )
GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = constant.Constant( 'GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS', 0x8E8A )
GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = constant.Constant( 'GL_MAX_TESS_CONTROL_INPUT_COMPONENTS', 0x886C )
GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = constant.Constant( 'GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS', 0x886D )
GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = constant.Constant( 'GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS', 0x8E1E )
GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = constant.Constant( 'GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS', 0x8E1F )
GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = constant.Constant( 'GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER', 0x84F0 )
GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = constant.Constant( 'GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER', 0x84F1 )
GL_TESS_EVALUATION_SHADER = constant.Constant( 'GL_TESS_EVALUATION_SHADER', 0x8E87 )
GL_TESS_CONTROL_SHADER = constant.Constant( 'GL_TESS_CONTROL_SHADER', 0x8E88 )
glPatchParameteri = platform.createExtensionFunction( 
'glPatchParameteri',dll=platform.GL,
extension=EXTENSION_NAME,
resultType=None, 
argTypes=(constants.GLenum,constants.GLint,),
doc='glPatchParameteri(GLenum(pname), GLint(value)) -> None',
argNames=('pname','value',),
deprecated=_DEPRECATED,
)

glPatchParameterfv = platform.createExtensionFunction( 
'glPatchParameterfv',dll=platform.GL,
extension=EXTENSION_NAME,
resultType=None, 
argTypes=(constants.GLenum,arrays.GLfloatArray,),
doc='glPatchParameterfv(GLenum(pname), GLfloatArray(values)) -> None',
argNames=('pname','values',),
deprecated=_DEPRECATED,
)


def glInitTessellationShaderARB():
    '''Return boolean indicating whether this extension is available'''
    return extensions.hasGLExtension( EXTENSION_NAME )
