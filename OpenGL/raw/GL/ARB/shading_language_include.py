'''OpenGL extension ARB.shading_language_include

Automatically generated by the get_gl_extensions script, do not edit!
'''
from OpenGL import platform, constants, constant, arrays
from OpenGL import extensions
from OpenGL.GL import glget
import ctypes
EXTENSION_NAME = 'GL_ARB_shading_language_include'
_DEPRECATED = False
GL_SHADER_INCLUDE_ARB = constant.Constant( 'GL_SHADER_INCLUDE_ARB', 0x8DAE )
GL_NAMED_STRING_LENGTH_ARB = constant.Constant( 'GL_NAMED_STRING_LENGTH_ARB', 0x8DE9 )
GL_NAMED_STRING_TYPE_ARB = constant.Constant( 'GL_NAMED_STRING_TYPE_ARB', 0x8DEA )
glNamedStringARB = platform.createExtensionFunction( 
'glNamedStringARB',dll=platform.GL,
extension=EXTENSION_NAME,
resultType=None, 
argTypes=(constants.GLenum,constants.GLint,arrays.GLcharArray,constants.GLint,arrays.GLcharArray,),
doc='glNamedStringARB(GLenum(type), GLint(namelen), GLcharArray(name), GLint(stringlen), GLcharArray(string)) -> None',
argNames=('type','namelen','name','stringlen','string',),
deprecated=_DEPRECATED,
)

glDeleteNamedStringARB = platform.createExtensionFunction( 
'glDeleteNamedStringARB',dll=platform.GL,
extension=EXTENSION_NAME,
resultType=None, 
argTypes=(constants.GLint,arrays.GLcharArray,),
doc='glDeleteNamedStringARB(GLint(namelen), GLcharArray(name)) -> None',
argNames=('namelen','name',),
deprecated=_DEPRECATED,
)

glCompileShaderIncludeARB = platform.createExtensionFunction( 
'glCompileShaderIncludeARB',dll=platform.GL,
extension=EXTENSION_NAME,
resultType=None, 
argTypes=(constants.GLuint,constants.GLsizei,ctypes.POINTER( ctypes.POINTER( constants.GLchar )),arrays.GLintArray,),
doc='glCompileShaderIncludeARB(GLuint(shader), GLsizei(count), POINTER( ctypes.POINTER( constants.GLchar ))(path), GLintArray(length)) -> None',
argNames=('shader','count','path','length',),
deprecated=_DEPRECATED,
)

glIsNamedStringARB = platform.createExtensionFunction( 
'glIsNamedStringARB',dll=platform.GL,
extension=EXTENSION_NAME,
resultType=constants.GLboolean, 
argTypes=(constants.GLint,arrays.GLcharArray,),
doc='glIsNamedStringARB(GLint(namelen), GLcharArray(name)) -> constants.GLboolean',
argNames=('namelen','name',),
deprecated=_DEPRECATED,
)

glGetNamedStringARB = platform.createExtensionFunction( 
'glGetNamedStringARB',dll=platform.GL,
extension=EXTENSION_NAME,
resultType=None, 
argTypes=(constants.GLint,arrays.GLcharArray,constants.GLsizei,arrays.GLintArray,arrays.GLcharArray,),
doc='glGetNamedStringARB(GLint(namelen), GLcharArray(name), GLsizei(bufSize), GLintArray(stringlen), GLcharArray(string)) -> None',
argNames=('namelen','name','bufSize','stringlen','string',),
deprecated=_DEPRECATED,
)

glGetNamedStringivARB = platform.createExtensionFunction( 
'glGetNamedStringivARB',dll=platform.GL,
extension=EXTENSION_NAME,
resultType=None, 
argTypes=(constants.GLint,arrays.GLcharArray,constants.GLenum,arrays.GLintArray,),
doc='glGetNamedStringivARB(GLint(namelen), GLcharArray(name), GLenum(pname), GLintArray(params)) -> None',
argNames=('namelen','name','pname','params',),
deprecated=_DEPRECATED,
)


def glInitShadingLanguageIncludeARB():
    '''Return boolean indicating whether this extension is available'''
    return extensions.hasGLExtension( EXTENSION_NAME )
