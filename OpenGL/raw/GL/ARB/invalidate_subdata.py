'''Autogenerated by get_gl_extensions script, do not edit!'''
from OpenGL import platform as _p, constants as _cs, arrays
from OpenGL.GL import glget
import ctypes
EXTENSION_NAME = 'GL_ARB_invalidate_subdata'
def _f( function ):
    return _p.createFunction( function,_p.GL,'GL_ARB_invalidate_subdata',False)

@_f
@_p.types(None,_cs.GLuint,_cs.GLint,_cs.GLint,_cs.GLint,_cs.GLint,_cs.GLsizei,_cs.GLsizei,_cs.GLsizei)
def glInvalidateTexSubImage(texture,level,xoffset,yoffset,zoffset,width,height,depth):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLint)
def glInvalidateTexImage(texture,level):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLintptr,_cs.GLsizeiptr)
def glInvalidateBufferSubData(buffer,offset,length):pass
@_f
@_p.types(None,_cs.GLuint)
def glInvalidateBufferData(buffer):pass
@_f
@_p.types(None,_cs.GLenum,_cs.GLsizei,arrays.GLuintArray)
def glInvalidateFramebuffer(target,numAttachments,attachments):pass
@_f
@_p.types(None,_cs.GLenum,_cs.GLsizei,arrays.GLuintArray,_cs.GLint,_cs.GLint,_cs.GLsizei,_cs.GLsizei)
def glInvalidateSubFramebuffer(target,numAttachments,attachments,x,y,width,height):pass


def glInitInvalidateSubdataARB():
    '''Return boolean indicating whether this extension is available'''
    from OpenGL import extensions
    return extensions.hasGLExtension( EXTENSION_NAME )
