'''Autogenerated by get_gl_extensions script, do not edit!'''
from OpenGL import platform as _p, constants as _cs, arrays
from OpenGL.GL import glget
import ctypes
EXTENSION_NAME = 'GL_ARB_shader_storage_buffer_object'
def _f( function ):
    return _p.createFunction( function,_p.GL,'GL_ARB_shader_storage_buffer_object',False)
_p.unpack_constants( """GL_SHADER_STORAGE_BUFFER 0x90D2
GL_SHADER_STORAGE_BUFFER_BINDING 0x90D3
GL_SHADER_STORAGE_BUFFER_START 0x90D4
GL_SHADER_STORAGE_BUFFER_SIZE 0x90D5
GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS 0x90D6
GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS 0x90D7
GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS 0x90D8
GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS 0x90D9
GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS 0x90DA
GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS 0x90DB
GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS 0x90DC
GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS 0x90DD
GL_MAX_SHADER_STORAGE_BLOCK_SIZE 0x90DE
GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0x90DF
GL_SHADER_STORAGE_BARRIER_BIT 0x2000
GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES 0x8F39""", globals())
@_f
@_p.types(None,_cs.GLuint,_cs.GLuint,_cs.GLuint)
def glShaderStorageBlockBinding(program,storageBlockIndex,storageBlockBinding):pass


def glInitShaderStorageBufferObjectARB():
    '''Return boolean indicating whether this extension is available'''
    from OpenGL import extensions
    return extensions.hasGLExtension( EXTENSION_NAME )
