'''Autogenerated by get_gl_extensions script, do not edit!'''
from OpenGL import platform as _p, constants as _cs, arrays
from OpenGL.GL import glget
import ctypes
EXTENSION_NAME = 'GL_ARB_ES2_compatibility'
def _f( function ):
    return _p.createFunction( function,_p.GL,'GL_ARB_ES2_compatibility',False)
_p.unpack_constants( """GL_FIXED 0x140C
GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A
GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B
GL_LOW_FLOAT 0x8DF0
GL_MEDIUM_FLOAT 0x8DF1
GL_HIGH_FLOAT 0x8DF2
GL_LOW_INT 0x8DF3
GL_MEDIUM_INT 0x8DF4
GL_HIGH_INT 0x8DF5
GL_SHADER_COMPILER 0x8DFA
GL_NUM_SHADER_BINARY_FORMATS 0x8DF9
GL_MAX_VERTEX_UNIFORM_VECTORS 0x8DFB
GL_MAX_VARYING_VECTORS 0x8DFC
GL_MAX_FRAGMENT_UNIFORM_VECTORS 0x8DFD
GL_RGB565 0x8D62""", globals())
@_f
@_p.types(None,)
def glReleaseShaderCompiler(  ):pass
@_f
@_p.types(None,_cs.GLsizei,arrays.GLuintArray,_cs.GLenum,ctypes.c_void_p,_cs.GLsizei)
def glShaderBinary( count,shaders,binaryformat,binary,length ):pass
@_f
@_p.types(None,_cs.GLenum,_cs.GLenum,arrays.GLintArray,arrays.GLintArray)
def glGetShaderPrecisionFormat( shadertype,precisiontype,range,precision ):pass
@_f
@_p.types(None,_cs.GLfloat,_cs.GLfloat)
def glDepthRangef( n,f ):pass
@_f
@_p.types(None,_cs.GLfloat)
def glClearDepthf( d ):pass


def glInitEs2CompatibilityARB():
    '''Return boolean indicating whether this extension is available'''
    from OpenGL import extensions
    return extensions.hasGLExtension( EXTENSION_NAME )
