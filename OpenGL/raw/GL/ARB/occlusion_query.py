'''OpenGL extension ARB.occlusion_query

Automatically generated by the get_gl_extensions script, do not edit!
'''
from OpenGL import platform, constants, constant, arrays
from OpenGL import extensions
from OpenGL.GL import glget
import ctypes
EXTENSION_NAME = 'GL_ARB_occlusion_query'
_DEPRECATED = False
GL_QUERY_COUNTER_BITS_ARB = constant.Constant( 'GL_QUERY_COUNTER_BITS_ARB', 0x8864 )
GL_CURRENT_QUERY_ARB = constant.Constant( 'GL_CURRENT_QUERY_ARB', 0x8865 )
GL_QUERY_RESULT_ARB = constant.Constant( 'GL_QUERY_RESULT_ARB', 0x8866 )
GL_QUERY_RESULT_AVAILABLE_ARB = constant.Constant( 'GL_QUERY_RESULT_AVAILABLE_ARB', 0x8867 )
GL_SAMPLES_PASSED_ARB = constant.Constant( 'GL_SAMPLES_PASSED_ARB', 0x8914 )
glGenQueriesARB = platform.createExtensionFunction( 
'glGenQueriesARB',dll=platform.GL,
extension=EXTENSION_NAME,
resultType=None, 
argTypes=(constants.GLsizei,arrays.GLuintArray,),
doc='glGenQueriesARB(GLsizei(n), GLuintArray(ids)) -> None',
argNames=('n','ids',),
deprecated=_DEPRECATED,
)

glDeleteQueriesARB = platform.createExtensionFunction( 
'glDeleteQueriesARB',dll=platform.GL,
extension=EXTENSION_NAME,
resultType=None, 
argTypes=(constants.GLsizei,arrays.GLuintArray,),
doc='glDeleteQueriesARB(GLsizei(n), GLuintArray(ids)) -> None',
argNames=('n','ids',),
deprecated=_DEPRECATED,
)

glIsQueryARB = platform.createExtensionFunction( 
'glIsQueryARB',dll=platform.GL,
extension=EXTENSION_NAME,
resultType=constants.GLboolean, 
argTypes=(constants.GLuint,),
doc='glIsQueryARB(GLuint(id)) -> constants.GLboolean',
argNames=('id',),
deprecated=_DEPRECATED,
)

glBeginQueryARB = platform.createExtensionFunction( 
'glBeginQueryARB',dll=platform.GL,
extension=EXTENSION_NAME,
resultType=None, 
argTypes=(constants.GLenum,constants.GLuint,),
doc='glBeginQueryARB(GLenum(target), GLuint(id)) -> None',
argNames=('target','id',),
deprecated=_DEPRECATED,
)

glEndQueryARB = platform.createExtensionFunction( 
'glEndQueryARB',dll=platform.GL,
extension=EXTENSION_NAME,
resultType=None, 
argTypes=(constants.GLenum,),
doc='glEndQueryARB(GLenum(target)) -> None',
argNames=('target',),
deprecated=_DEPRECATED,
)

glGetQueryivARB = platform.createExtensionFunction( 
'glGetQueryivARB',dll=platform.GL,
extension=EXTENSION_NAME,
resultType=None, 
argTypes=(constants.GLenum,constants.GLenum,arrays.GLintArray,),
doc='glGetQueryivARB(GLenum(target), GLenum(pname), GLintArray(params)) -> None',
argNames=('target','pname','params',),
deprecated=_DEPRECATED,
)

glGetQueryObjectivARB = platform.createExtensionFunction( 
'glGetQueryObjectivARB',dll=platform.GL,
extension=EXTENSION_NAME,
resultType=None, 
argTypes=(constants.GLuint,constants.GLenum,arrays.GLintArray,),
doc='glGetQueryObjectivARB(GLuint(id), GLenum(pname), GLintArray(params)) -> None',
argNames=('id','pname','params',),
deprecated=_DEPRECATED,
)

glGetQueryObjectuivARB = platform.createExtensionFunction( 
'glGetQueryObjectuivARB',dll=platform.GL,
extension=EXTENSION_NAME,
resultType=None, 
argTypes=(constants.GLuint,constants.GLenum,arrays.GLuintArray,),
doc='glGetQueryObjectuivARB(GLuint(id), GLenum(pname), GLuintArray(params)) -> None',
argNames=('id','pname','params',),
deprecated=_DEPRECATED,
)


def glInitOcclusionQueryARB():
    '''Return boolean indicating whether this extension is available'''
    return extensions.hasGLExtension( EXTENSION_NAME )
