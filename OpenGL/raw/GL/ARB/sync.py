'''Autogenerated by get_gl_extensions script, do not edit!'''
from OpenGL import platform as _p, constants as _cs, arrays
from OpenGL.GL import glget
import ctypes
EXTENSION_NAME = 'GL_ARB_sync'
def _f( function ):
    return _p.createFunction( function,_p.GL,'GL_ARB_sync',False)
_p.unpack_constants( """GL_MAX_SERVER_WAIT_TIMEOUT 0x9111
GL_OBJECT_TYPE 0x9112
GL_SYNC_CONDITION 0x9113
GL_SYNC_STATUS 0x9114
GL_SYNC_FLAGS 0x9115
GL_SYNC_FENCE 0x9116
GL_SYNC_GPU_COMMANDS_COMPLETE 0x9117
GL_UNSIGNALED 0x9118
GL_SIGNALED 0x9119
GL_ALREADY_SIGNALED 0x911A
GL_TIMEOUT_EXPIRED 0x911B
GL_CONDITION_SATISFIED 0x911C
GL_WAIT_FAILED 0x911D
GL_SYNC_FLUSH_COMMANDS_BIT 0x1
GL_TIMEOUT_IGNORED 0xFFFFFFFFFFFFFFFF""", globals())
@_f
@_p.types(_cs.GLsync,_cs.GLenum,_cs.GLbitfield)
def glFenceSync( condition,flags ):pass
@_f
@_p.types(_cs.GLboolean,_cs.GLsync)
def glIsSync( sync ):pass
@_f
@_p.types(None,_cs.GLsync)
def glDeleteSync( sync ):pass
@_f
@_p.types(_cs.GLenum,_cs.GLsync,_cs.GLbitfield,_cs.GLuint64)
def glClientWaitSync( sync,flags,timeout ):pass
@_f
@_p.types(None,_cs.GLsync,_cs.GLbitfield,_cs.GLuint64)
def glWaitSync( sync,flags,timeout ):pass
@_f
@_p.types(None,_cs.GLenum,arrays.GLint64Array)
def glGetInteger64v( pname,params ):pass
@_f
@_p.types(None,_cs.GLsync,_cs.GLenum,_cs.GLsizei,arrays.GLsizeiArray,arrays.GLintArray)
def glGetSynciv( sync,pname,bufSize,length,values ):pass


def glInitSyncARB():
    '''Return boolean indicating whether this extension is available'''
    from OpenGL import extensions
    return extensions.hasGLExtension( EXTENSION_NAME )
