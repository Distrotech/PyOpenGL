'''Autogenerated by get_gl_extensions script, do not edit!'''
from OpenGL import platform as _p, constants as _cs, arrays
from OpenGL.GL import glget
import ctypes
EXTENSION_NAME = 'GL_ARB_multisample'
def _f( function ):
    return _p.createFunction( function,_p.GL,'GL_ARB_multisample',False)
_p.unpack_constants( """GL_MULTISAMPLE_ARB 0x809D
GL_SAMPLE_ALPHA_TO_COVERAGE_ARB 0x809E
GL_SAMPLE_ALPHA_TO_ONE_ARB 0x809F
GL_SAMPLE_COVERAGE_ARB 0x80A0
GL_SAMPLE_BUFFERS_ARB 0x80A8
GL_SAMPLES_ARB 0x80A9
GL_SAMPLE_COVERAGE_VALUE_ARB 0x80AA
GL_SAMPLE_COVERAGE_INVERT_ARB 0x80AB
GL_MULTISAMPLE_BIT_ARB 0x20000000""", globals())
glget.addGLGetConstant( GL_MULTISAMPLE_ARB, (1,) )
glget.addGLGetConstant( GL_SAMPLE_ALPHA_TO_COVERAGE_ARB, (1,) )
glget.addGLGetConstant( GL_SAMPLE_ALPHA_TO_ONE_ARB, (1,) )
glget.addGLGetConstant( GL_SAMPLE_COVERAGE_ARB, (1,) )
glget.addGLGetConstant( GL_SAMPLE_BUFFERS_ARB, (1,) )
glget.addGLGetConstant( GL_SAMPLES_ARB, (1,) )
glget.addGLGetConstant( GL_SAMPLE_COVERAGE_VALUE_ARB, (1,) )
glget.addGLGetConstant( GL_SAMPLE_COVERAGE_INVERT_ARB, (1,) )
@_f
@_p.types(None,_cs.GLfloat,_cs.GLboolean)
def glSampleCoverageARB(value,invert):pass


def glInitMultisampleARB():
    '''Return boolean indicating whether this extension is available'''
    from OpenGL import extensions
    return extensions.hasGLExtension( EXTENSION_NAME )
