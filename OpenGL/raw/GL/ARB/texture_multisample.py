'''OpenGL extension ARB.texture_multisample

The official definition of this extension is available here:
http://oss.sgi.com/projects/ogl-sample/registry/ARB/texture_multisample.txt

Automatically generated by the get_gl_extensions script, do not edit!
'''
from OpenGL import platform, constants, constant, arrays
from OpenGL import extensions
from OpenGL.GL import glget
import ctypes
EXTENSION_NAME = 'GL_ARB_texture_multisample'
_DEPRECATED = False
GL_SAMPLE_POSITION = constant.Constant( 'GL_SAMPLE_POSITION', 0x8E50 )
GL_SAMPLE_MASK = constant.Constant( 'GL_SAMPLE_MASK', 0x8E51 )
GL_SAMPLE_MASK_VALUE = constant.Constant( 'GL_SAMPLE_MASK_VALUE', 0x8E52 )
GL_MAX_SAMPLE_MASK_WORDS = constant.Constant( 'GL_MAX_SAMPLE_MASK_WORDS', 0x8E59 )
GL_TEXTURE_2D_MULTISAMPLE = constant.Constant( 'GL_TEXTURE_2D_MULTISAMPLE', 0x9100 )
GL_PROXY_TEXTURE_2D_MULTISAMPLE = constant.Constant( 'GL_PROXY_TEXTURE_2D_MULTISAMPLE', 0x9101 )
GL_TEXTURE_2D_MULTISAMPLE_ARRAY = constant.Constant( 'GL_TEXTURE_2D_MULTISAMPLE_ARRAY', 0x9102 )
GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = constant.Constant( 'GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY', 0x9103 )
GL_TEXTURE_BINDING_2D_MULTISAMPLE = constant.Constant( 'GL_TEXTURE_BINDING_2D_MULTISAMPLE', 0x9104 )
GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = constant.Constant( 'GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY', 0x9105 )
GL_TEXTURE_SAMPLES = constant.Constant( 'GL_TEXTURE_SAMPLES', 0x9106 )
GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = constant.Constant( 'GL_TEXTURE_FIXED_SAMPLE_LOCATIONS', 0x9107 )
GL_SAMPLER_2D_MULTISAMPLE = constant.Constant( 'GL_SAMPLER_2D_MULTISAMPLE', 0x9108 )
GL_INT_SAMPLER_2D_MULTISAMPLE = constant.Constant( 'GL_INT_SAMPLER_2D_MULTISAMPLE', 0x9109 )
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = constant.Constant( 'GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE', 0x910A )
GL_SAMPLER_2D_MULTISAMPLE_ARRAY = constant.Constant( 'GL_SAMPLER_2D_MULTISAMPLE_ARRAY', 0x910B )
GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = constant.Constant( 'GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY', 0x910C )
GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = constant.Constant( 'GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY', 0x910D )
GL_MAX_COLOR_TEXTURE_SAMPLES = constant.Constant( 'GL_MAX_COLOR_TEXTURE_SAMPLES', 0x910E )
GL_MAX_DEPTH_TEXTURE_SAMPLES = constant.Constant( 'GL_MAX_DEPTH_TEXTURE_SAMPLES', 0x910F )
GL_MAX_INTEGER_SAMPLES = constant.Constant( 'GL_MAX_INTEGER_SAMPLES', 0x9110 )
glTexImage2DMultisample = platform.createExtensionFunction( 
'glTexImage2DMultisample',dll=platform.GL,
extension=EXTENSION_NAME,
resultType=None, 
argTypes=(constants.GLenum,constants.GLsizei,constants.GLint,constants.GLsizei,constants.GLsizei,constants.GLboolean,),
doc='glTexImage2DMultisample(GLenum(target), GLsizei(samples), GLint(internalformat), GLsizei(width), GLsizei(height), GLboolean(fixedsamplelocations)) -> None',
argNames=('target','samples','internalformat','width','height','fixedsamplelocations',),
deprecated=_DEPRECATED,
)

glTexImage3DMultisample = platform.createExtensionFunction( 
'glTexImage3DMultisample',dll=platform.GL,
extension=EXTENSION_NAME,
resultType=None, 
argTypes=(constants.GLenum,constants.GLsizei,constants.GLint,constants.GLsizei,constants.GLsizei,constants.GLsizei,constants.GLboolean,),
doc='glTexImage3DMultisample(GLenum(target), GLsizei(samples), GLint(internalformat), GLsizei(width), GLsizei(height), GLsizei(depth), GLboolean(fixedsamplelocations)) -> None',
argNames=('target','samples','internalformat','width','height','depth','fixedsamplelocations',),
deprecated=_DEPRECATED,
)

glGetMultisamplefv = platform.createExtensionFunction( 
'glGetMultisamplefv',dll=platform.GL,
extension=EXTENSION_NAME,
resultType=None, 
argTypes=(constants.GLenum,constants.GLuint,arrays.GLfloatArray,),
doc='glGetMultisamplefv(GLenum(pname), GLuint(index), GLfloatArray(val)) -> None',
argNames=('pname','index','val',),
deprecated=_DEPRECATED,
)

glSampleMaski = platform.createExtensionFunction( 
'glSampleMaski',dll=platform.GL,
extension=EXTENSION_NAME,
resultType=None, 
argTypes=(constants.GLuint,constants.GLbitfield,),
doc='glSampleMaski(GLuint(index), GLbitfield(mask)) -> None',
argNames=('index','mask',),
deprecated=_DEPRECATED,
)


def glInitTextureMultisampleARB():
    '''Return boolean indicating whether this extension is available'''
    return extensions.hasGLExtension( EXTENSION_NAME )
