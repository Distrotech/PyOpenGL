'''Autogenerated by get_gl_extensions script, do not edit!'''
from OpenGL import platform as _p, constants as _cs, arrays
from OpenGL.GL import glget
import ctypes
EXTENSION_NAME = 'GL_ARB_clear_buffer_object'
def _f( function ):
    return _p.createFunction( function,_p.GL,'GL_ARB_clear_buffer_object',False)

@_f
@_p.types(None,_cs.GLenum,_cs.GLenum,_cs.GLenum,_cs.GLenum,ctypes.POINTER(_cs.void))
def glClearBufferData( target,internalformat,format,type,data ):pass
@_f
@_p.types(None,_cs.GLenum,_cs.GLenum,_cs.GLintptr,_cs.GLsizeiptr,_cs.GLenum,_cs.GLenum,ctypes.POINTER(_cs.void))
def glClearBufferSubData( target,internalformat,offset,size,format,type,data ):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLenum,_cs.GLenum,_cs.GLenum,ctypes.POINTER(_cs.void))
def glClearNamedBufferDataEXT( buffer,internalformat,format,type,data ):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLenum,_cs.GLenum,_cs.GLenum,_cs.GLsizeiptr,_cs.GLsizeiptr,ctypes.POINTER(_cs.void))
def glClearNamedBufferSubDataEXT( buffer,internalformat,format,type,offset,size,data ):pass


def glInitClearBufferObjectARB():
    '''Return boolean indicating whether this extension is available'''
    from OpenGL import extensions
    return extensions.hasGLExtension( EXTENSION_NAME )
