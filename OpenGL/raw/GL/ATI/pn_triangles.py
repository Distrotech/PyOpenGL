'''OpenGL extension ATI.pn_triangles

Automatically generated by the get_gl_extensions script, do not edit!
'''
from OpenGL import platform as _p, constants as _cs, arrays
from OpenGL.GL import glget
import ctypes
EXTENSION_NAME = 'GL_ATI_pn_triangles'
def _f( function ):
    return _p.createFunction( function,_p.GL,'GL_ATI_pn_triangles',False)
_p.unpack_constants( """GL_PN_TRIANGLES_ATI 0x87F0
GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI 0x87F1
GL_PN_TRIANGLES_POINT_MODE_ATI 0x87F2
GL_PN_TRIANGLES_NORMAL_MODE_ATI 0x87F3
GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI 0x87F4
GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI 0x87F5
GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI 0x87F6
GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI 0x87F7
GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI 0x87F8""", globals())
glget.addGLGetConstant( GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI, (1,) )
glget.addGLGetConstant( GL_PN_TRIANGLES_POINT_MODE_ATI, (1,) )
glget.addGLGetConstant( GL_PN_TRIANGLES_NORMAL_MODE_ATI, (1,) )
glget.addGLGetConstant( GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI, (1,) )
@_f
@_p.types(None,_cs.GLenum,_cs.GLint)
def glPNTrianglesiATI( pname,param ):pass
@_f
@_p.types(None,_cs.GLenum,_cs.GLfloat)
def glPNTrianglesfATI( pname,param ):pass


def glInitPnTrianglesATI():
    '''Return boolean indicating whether this extension is available'''
    from OpenGL import extensions
    return extensions.hasGLExtension( EXTENSION_NAME )
