'''OpenGL extension SGIS.multisample

Automatically generated by the get_gl_extensions script, do not edit!
'''
from OpenGL import platform, constants, constant, arrays
from OpenGL import extensions
from OpenGL.GL import glget
import ctypes
EXTENSION_NAME = 'GL_SGIS_multisample'
_DEPRECATED = False
GL_MULTISAMPLE_SGIS = constant.Constant( 'GL_MULTISAMPLE_SGIS', 0x809D )
glget.addGLGetConstant( GL_MULTISAMPLE_SGIS, (1,) )
GL_SAMPLE_ALPHA_TO_MASK_SGIS = constant.Constant( 'GL_SAMPLE_ALPHA_TO_MASK_SGIS', 0x809E )
glget.addGLGetConstant( GL_SAMPLE_ALPHA_TO_MASK_SGIS, (1,) )
GL_SAMPLE_ALPHA_TO_ONE_SGIS = constant.Constant( 'GL_SAMPLE_ALPHA_TO_ONE_SGIS', 0x809F )
glget.addGLGetConstant( GL_SAMPLE_ALPHA_TO_ONE_SGIS, (1,) )
GL_SAMPLE_MASK_SGIS = constant.Constant( 'GL_SAMPLE_MASK_SGIS', 0x80A0 )
glget.addGLGetConstant( GL_SAMPLE_MASK_SGIS, (1,) )
GL_1PASS_SGIS = constant.Constant( 'GL_1PASS_SGIS', 0x80A1 )
GL_2PASS_0_SGIS = constant.Constant( 'GL_2PASS_0_SGIS', 0x80A2 )
GL_2PASS_1_SGIS = constant.Constant( 'GL_2PASS_1_SGIS', 0x80A3 )
GL_4PASS_0_SGIS = constant.Constant( 'GL_4PASS_0_SGIS', 0x80A4 )
GL_4PASS_1_SGIS = constant.Constant( 'GL_4PASS_1_SGIS', 0x80A5 )
GL_4PASS_2_SGIS = constant.Constant( 'GL_4PASS_2_SGIS', 0x80A6 )
GL_4PASS_3_SGIS = constant.Constant( 'GL_4PASS_3_SGIS', 0x80A7 )
GL_SAMPLE_BUFFERS_SGIS = constant.Constant( 'GL_SAMPLE_BUFFERS_SGIS', 0x80A8 )
glget.addGLGetConstant( GL_SAMPLE_BUFFERS_SGIS, (1,) )
GL_SAMPLES_SGIS = constant.Constant( 'GL_SAMPLES_SGIS', 0x80A9 )
glget.addGLGetConstant( GL_SAMPLES_SGIS, (1,) )
GL_SAMPLE_MASK_VALUE_SGIS = constant.Constant( 'GL_SAMPLE_MASK_VALUE_SGIS', 0x80AA )
glget.addGLGetConstant( GL_SAMPLE_MASK_VALUE_SGIS, (1,) )
GL_SAMPLE_MASK_INVERT_SGIS = constant.Constant( 'GL_SAMPLE_MASK_INVERT_SGIS', 0x80AB )
glget.addGLGetConstant( GL_SAMPLE_MASK_INVERT_SGIS, (1,) )
GL_SAMPLE_PATTERN_SGIS = constant.Constant( 'GL_SAMPLE_PATTERN_SGIS', 0x80AC )
glget.addGLGetConstant( GL_SAMPLE_PATTERN_SGIS, (1,) )
glSampleMaskSGIS = platform.createExtensionFunction( 
'glSampleMaskSGIS',dll=platform.GL,
extension=EXTENSION_NAME,
resultType=None, 
argTypes=(constants.GLclampf,constants.GLboolean,),
doc='glSampleMaskSGIS(GLclampf(value), GLboolean(invert)) -> None',
argNames=('value','invert',),
deprecated=_DEPRECATED,
)

glSamplePatternSGIS = platform.createExtensionFunction( 
'glSamplePatternSGIS',dll=platform.GL,
extension=EXTENSION_NAME,
resultType=None, 
argTypes=(constants.GLenum,),
doc='glSamplePatternSGIS(GLenum(pattern)) -> None',
argNames=('pattern',),
deprecated=_DEPRECATED,
)


def glInitMultisampleSGIS():
    '''Return boolean indicating whether this extension is available'''
    return extensions.hasGLExtension( EXTENSION_NAME )
