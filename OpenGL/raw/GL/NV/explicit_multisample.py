'''Autogenerated by get_gl_extensions script, do not edit!'''
from OpenGL import platform as _p, constants as _cs, arrays
from OpenGL.GL import glget
import ctypes
EXTENSION_NAME = 'GL_NV_explicit_multisample'
def _f( function ):
    return _p.createFunction( function,_p.GL,'GL_NV_explicit_multisample',False)
_p.unpack_constants( """GL_SAMPLE_POSITION_NV 0x8E50
GL_SAMPLE_MASK_NV 0x8E51
GL_SAMPLE_MASK_VALUE_NV 0x8E52
GL_TEXTURE_BINDING_RENDERBUFFER_NV 0x8E53
GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV 0x8E54
GL_TEXTURE_RENDERBUFFER_NV 0x8E55
GL_SAMPLER_RENDERBUFFER_NV 0x8E56
GL_INT_SAMPLER_RENDERBUFFER_NV 0x8E57
GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV 0x8E58
GL_MAX_SAMPLE_MASK_WORDS_NV 0x8E59""", globals())
glget.addGLGetConstant( GL_TEXTURE_BINDING_RENDERBUFFER_NV, (1,) )
glget.addGLGetConstant( GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV, (1,) )
glget.addGLGetConstant( GL_MAX_SAMPLE_MASK_WORDS_NV, (1,) )
@_f
@_p.types(None,_cs.GLenum,_cs.GLuint,arrays.GLfloatArray)
def glGetMultisamplefvNV(pname,index,val):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLbitfield)
def glSampleMaskIndexedNV(index,mask):pass
@_f
@_p.types(None,_cs.GLenum,_cs.GLuint)
def glTexRenderbufferNV(target,renderbuffer):pass


def glInitExplicitMultisampleNV():
    '''Return boolean indicating whether this extension is available'''
    from OpenGL import extensions
    return extensions.hasGLExtension( EXTENSION_NAME )
