'''Autogenerated by get_gl_extensions script, do not edit!'''
from OpenGL import platform as _p, constants as _cs, arrays
from OpenGL.GL import glget
import ctypes
EXTENSION_NAME = 'GL_NV_draw_texture'
def _f( function ):
    return _p.createFunction( function,_p.GL,'GL_NV_draw_texture',False)

@_f
@_p.types(None,_cs.GLuint,_cs.GLuint,_cs.GLfloat,_cs.GLfloat,_cs.GLfloat,_cs.GLfloat,_cs.GLfloat,_cs.GLfloat,_cs.GLfloat,_cs.GLfloat,_cs.GLfloat)
def glDrawTextureNV(texture,sampler,x0,y0,x1,y1,z,s0,t0,s1,t1):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLuint,_cs.GLint,_cs.GLenum,_cs.GLsizei,_cs.GLintptr)
def glVertexArrayVertexOffsetEXT(vaobj,buffer,size,type,stride,offset):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLuint,_cs.GLint,_cs.GLenum,_cs.GLsizei,_cs.GLintptr)
def glVertexArrayColorOffsetEXT(vaobj,buffer,size,type,stride,offset):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLuint,_cs.GLsizei,_cs.GLintptr)
def glVertexArrayEdgeFlagOffsetEXT(vaobj,buffer,stride,offset):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLuint,_cs.GLenum,_cs.GLsizei,_cs.GLintptr)
def glVertexArrayIndexOffsetEXT(vaobj,buffer,type,stride,offset):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLuint,_cs.GLenum,_cs.GLsizei,_cs.GLintptr)
def glVertexArrayNormalOffsetEXT(vaobj,buffer,type,stride,offset):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLuint,_cs.GLint,_cs.GLenum,_cs.GLsizei,_cs.GLintptr)
def glVertexArrayTexCoordOffsetEXT(vaobj,buffer,size,type,stride,offset):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLuint,_cs.GLenum,_cs.GLint,_cs.GLenum,_cs.GLsizei,_cs.GLintptr)
def glVertexArrayMultiTexCoordOffsetEXT(vaobj,buffer,texunit,size,type,stride,offset):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLuint,_cs.GLenum,_cs.GLsizei,_cs.GLintptr)
def glVertexArrayFogCoordOffsetEXT(vaobj,buffer,type,stride,offset):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLuint,_cs.GLint,_cs.GLenum,_cs.GLsizei,_cs.GLintptr)
def glVertexArraySecondaryColorOffsetEXT(vaobj,buffer,size,type,stride,offset):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLuint,_cs.GLuint,_cs.GLint,_cs.GLenum,_cs.GLboolean,_cs.GLsizei,_cs.GLintptr)
def glVertexArrayVertexAttribOffsetEXT(vaobj,buffer,index,size,type,normalized,stride,offset):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLuint,_cs.GLuint,_cs.GLint,_cs.GLenum,_cs.GLsizei,_cs.GLintptr)
def glVertexArrayVertexAttribIOffsetEXT(vaobj,buffer,index,size,type,stride,offset):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLenum)
def glEnableVertexArrayEXT(vaobj,array):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLenum)
def glDisableVertexArrayEXT(vaobj,array):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLuint)
def glEnableVertexArrayAttribEXT(vaobj,index):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLuint)
def glDisableVertexArrayAttribEXT(vaobj,index):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLenum,arrays.GLintArray)
def glGetVertexArrayIntegervEXT(vaobj,pname,param):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLenum,ctypes.POINTER(ctypes.POINTER(_cs.void)))
def glGetVertexArrayPointervEXT(vaobj,pname,param):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLuint,_cs.GLenum,arrays.GLintArray)
def glGetVertexArrayIntegeri_vEXT(vaobj,index,pname,param):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLuint,_cs.GLenum,ctypes.POINTER(ctypes.POINTER(_cs.void)))
def glGetVertexArrayPointeri_vEXT(vaobj,index,pname,param):pass


def glInitDrawTextureNV():
    '''Return boolean indicating whether this extension is available'''
    from OpenGL import extensions
    return extensions.hasGLExtension( EXTENSION_NAME )
