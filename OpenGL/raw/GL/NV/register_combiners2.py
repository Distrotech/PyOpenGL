'''OpenGL extension NV.register_combiners2

Automatically generated by the get_gl_extensions script, do not edit!
'''
from OpenGL import platform, constants, constant, arrays
from OpenGL import extensions
from OpenGL.GL import glget
import ctypes
EXTENSION_NAME = 'GL_NV_register_combiners2'
_DEPRECATED = False
GL_PER_STAGE_CONSTANTS_NV = constant.Constant( 'GL_PER_STAGE_CONSTANTS_NV', 0x8535 )
glget.addGLGetConstant( GL_PER_STAGE_CONSTANTS_NV, (1,) )
glCombinerStageParameterfvNV = platform.createExtensionFunction( 
'glCombinerStageParameterfvNV',dll=platform.GL,
extension=EXTENSION_NAME,
resultType=None, 
argTypes=(constants.GLenum,constants.GLenum,arrays.GLfloatArray,),
doc='glCombinerStageParameterfvNV(GLenum(stage), GLenum(pname), GLfloatArray(params)) -> None',
argNames=('stage','pname','params',),
deprecated=_DEPRECATED,
)

glGetCombinerStageParameterfvNV = platform.createExtensionFunction( 
'glGetCombinerStageParameterfvNV',dll=platform.GL,
extension=EXTENSION_NAME,
resultType=None, 
argTypes=(constants.GLenum,constants.GLenum,arrays.GLfloatArray,),
doc='glGetCombinerStageParameterfvNV(GLenum(stage), GLenum(pname), GLfloatArray(params)) -> None',
argNames=('stage','pname','params',),
deprecated=_DEPRECATED,
)


def glInitRegisterCombiners2NV():
    '''Return boolean indicating whether this extension is available'''
    return extensions.hasGLExtension( EXTENSION_NAME )
