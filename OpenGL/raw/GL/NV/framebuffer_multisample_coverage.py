'''OpenGL extension NV.framebuffer_multisample_coverage

The official definition of this extension is available here:
	http://oss.sgi.com/projects/ogl-sample/registry/NV/framebuffer_multisample_coverage.txt

Automatically generated by the get_gl_extensions script, do not edit!
'''
from OpenGL import platform, constants, constant, arrays
from OpenGL import extensions
from OpenGL.GL import glget
import ctypes
EXTENSION_NAME = 'GL_NV_framebuffer_multisample_coverage'
_DEPRECATED = False
GL_RENDERBUFFER_COVERAGE_SAMPLES_NV = constant.Constant( 'GL_RENDERBUFFER_COVERAGE_SAMPLES_NV', 0x8CAB )
GL_RENDERBUFFER_COLOR_SAMPLES_NV = constant.Constant( 'GL_RENDERBUFFER_COLOR_SAMPLES_NV', 0x8E10 )
GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV = constant.Constant( 'GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV', 0x8E11 )
GL_MULTISAMPLE_COVERAGE_MODES_NV = constant.Constant( 'GL_MULTISAMPLE_COVERAGE_MODES_NV', 0x8E12 )
glRenderbufferStorageMultisampleCoverageNV = platform.createExtensionFunction( 
	'glRenderbufferStorageMultisampleCoverageNV', dll=platform.GL,
	extension=EXTENSION_NAME,
	resultType=None, 
	argTypes=(constants.GLenum, constants.GLsizei, constants.GLsizei, constants.GLenum, constants.GLsizei, constants.GLsizei,),
	doc = 'glRenderbufferStorageMultisampleCoverageNV( GLenum(target), GLsizei(coverageSamples), GLsizei(colorSamples), GLenum(internalformat), GLsizei(width), GLsizei(height) ) -> None',
	argNames = ('target', 'coverageSamples', 'colorSamples', 'internalformat', 'width', 'height',),
	deprecated = _DEPRECATED,
)


def glInitFramebufferMultisampleCoverageNV():
	'''Return boolean indicating whether this extension is available'''
	return extensions.hasGLExtension( EXTENSION_NAME )
