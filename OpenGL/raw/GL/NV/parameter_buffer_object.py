'''OpenGL extension NV.parameter_buffer_object

The official definition of this extension is available here:
	http://oss.sgi.com/projects/ogl-sample/registry/NV/parameter_buffer_object.txt

Automatically generated by the get_gl_extensions script, do not edit!
'''
from OpenGL import platform, constants, constant, arrays
from OpenGL import extensions
from OpenGL.GL import glget
import ctypes
EXTENSION_NAME = 'GL_NV_parameter_buffer_object'
GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = constant.Constant( 'GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV', 0x8DA0 )
GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = constant.Constant( 'GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV', 0x8DA1 )
GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV = constant.Constant( 'GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV', 0x8DA2 )
GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = constant.Constant( 'GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV', 0x8DA3 )
GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = constant.Constant( 'GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV', 0x8DA4 )
glProgramBufferParametersfvNV = platform.createExtensionFunction( 
	'glProgramBufferParametersfvNV', dll=platform.GL,
	extension=EXTENSION_NAME,
	resultType=None, 
	argTypes=(constants.GLenum, constants.GLuint, constants.GLuint, constants.GLsizei, arrays.GLfloatArray,),
	doc = 'glProgramBufferParametersfvNV( GLenum(target), GLuint(buffer), GLuint(index), GLsizei(count), GLfloatArray(params) ) -> None',
	argNames = ('target', 'buffer', 'index', 'count', 'params',),
)

glProgramBufferParametersIivNV = platform.createExtensionFunction( 
	'glProgramBufferParametersIivNV', dll=platform.GL,
	extension=EXTENSION_NAME,
	resultType=None, 
	argTypes=(constants.GLenum, constants.GLuint, constants.GLuint, constants.GLsizei, arrays.GLintArray,),
	doc = 'glProgramBufferParametersIivNV( GLenum(target), GLuint(buffer), GLuint(index), GLsizei(count), GLintArray(params) ) -> None',
	argNames = ('target', 'buffer', 'index', 'count', 'params',),
)

glProgramBufferParametersIuivNV = platform.createExtensionFunction( 
	'glProgramBufferParametersIuivNV', dll=platform.GL,
	extension=EXTENSION_NAME,
	resultType=None, 
	argTypes=(constants.GLenum, constants.GLuint, constants.GLuint, constants.GLsizei, arrays.GLuintArray,),
	doc = 'glProgramBufferParametersIuivNV( GLenum(target), GLuint(buffer), GLuint(index), GLsizei(count), GLuintArray(params) ) -> None',
	argNames = ('target', 'buffer', 'index', 'count', 'params',),
)


def glInitParameterBufferObjectNV():
	'''Return boolean indicating whether this extension is available'''
	return extensions.hasGLExtension( EXTENSION_NAME )
