'''OpenGL extension EXT.texture_buffer_object

Automatically generated by the get_gl_extensions script, do not edit!
'''
from OpenGL import platform, constants, constant, arrays
from OpenGL import extensions
from OpenGL.GL import glget
import ctypes
EXTENSION_NAME = 'GL_EXT_texture_buffer_object'
_DEPRECATED = False
GL_TEXTURE_BUFFER_EXT = constant.Constant( 'GL_TEXTURE_BUFFER_EXT', 0x8C2A )
glget.addGLGetConstant( GL_TEXTURE_BUFFER_EXT, (1,) )
GL_MAX_TEXTURE_BUFFER_SIZE_EXT = constant.Constant( 'GL_MAX_TEXTURE_BUFFER_SIZE_EXT', 0x8C2B )
glget.addGLGetConstant( GL_MAX_TEXTURE_BUFFER_SIZE_EXT, (1,) )
GL_TEXTURE_BINDING_BUFFER_EXT = constant.Constant( 'GL_TEXTURE_BINDING_BUFFER_EXT', 0x8C2C )
glget.addGLGetConstant( GL_TEXTURE_BINDING_BUFFER_EXT, (1,) )
GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = constant.Constant( 'GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT', 0x8C2D )
glget.addGLGetConstant( GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT, (1,) )
GL_TEXTURE_BUFFER_FORMAT_EXT = constant.Constant( 'GL_TEXTURE_BUFFER_FORMAT_EXT', 0x8C2E )
glget.addGLGetConstant( GL_TEXTURE_BUFFER_FORMAT_EXT, (1,) )
glTexBufferEXT = platform.createExtensionFunction( 
'glTexBufferEXT',dll=platform.GL,
extension=EXTENSION_NAME,
resultType=None, 
argTypes=(constants.GLenum,constants.GLenum,constants.GLuint,),
doc='glTexBufferEXT(GLenum(target), GLenum(internalformat), GLuint(buffer)) -> None',
argNames=('target','internalformat','buffer',),
deprecated=_DEPRECATED,
)


def glInitTextureBufferObjectEXT():
    '''Return boolean indicating whether this extension is available'''
    return extensions.hasGLExtension( EXTENSION_NAME )
