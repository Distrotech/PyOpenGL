'''Autogenerated by get_gl_extensions script, do not edit!'''
from OpenGL import platform as _p, constants as _cs, arrays
from OpenGL.GL import glget
import ctypes
EXTENSION_NAME = 'GL_EXT_bindable_uniform'
def _f( function ):
    return _p.createFunction( function,_p.GL,'GL_EXT_bindable_uniform',False)
_p.unpack_constants( """GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT 0x8DE2
GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT 0x8DE3
GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT 0x8DE4
GL_MAX_BINDABLE_UNIFORM_SIZE_EXT 0x8DED
GL_UNIFORM_BUFFER_EXT 0x8DEE
GL_UNIFORM_BUFFER_BINDING_EXT 0x8DEF""", globals())
glget.addGLGetConstant( GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT, (1,) )
glget.addGLGetConstant( GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT, (1,) )
glget.addGLGetConstant( GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT, (1,) )
glget.addGLGetConstant( GL_MAX_BINDABLE_UNIFORM_SIZE_EXT, (1,) )
glget.addGLGetConstant( GL_UNIFORM_BUFFER_BINDING_EXT, (1,) )
@_f
@_p.types(None,_cs.GLuint,_cs.GLint,_cs.GLuint)
def glUniformBufferEXT(program,location,buffer):pass
@_f
@_p.types(_cs.GLint,_cs.GLuint,_cs.GLint)
def glGetUniformBufferSizeEXT(program,location):pass
@_f
@_p.types(_cs.GLintptr,_cs.GLuint,_cs.GLint)
def glGetUniformOffsetEXT(program,location):pass


def glInitBindableUniformEXT():
    '''Return boolean indicating whether this extension is available'''
    from OpenGL import extensions
    return extensions.hasGLExtension( EXTENSION_NAME )
