'''Autogenerated by get_gl_extensions script, do not edit!'''
from OpenGL import platform as _p, constants as _cs, arrays
from OpenGL.GL import glget
import ctypes
EXTENSION_NAME = 'GL_EXT_multisample'
def _f( function ):
    return _p.createFunction( function,_p.GL,'GL_EXT_multisample',False)
_p.unpack_constants( """GL_MULTISAMPLE_EXT 0x809D
GL_SAMPLE_ALPHA_TO_MASK_EXT 0x809E
GL_SAMPLE_ALPHA_TO_ONE_EXT 0x809F
GL_SAMPLE_MASK_EXT 0x80A0
GL_1PASS_EXT 0x80A1
GL_2PASS_0_EXT 0x80A2
GL_2PASS_1_EXT 0x80A3
GL_4PASS_0_EXT 0x80A4
GL_4PASS_1_EXT 0x80A5
GL_4PASS_2_EXT 0x80A6
GL_4PASS_3_EXT 0x80A7
GL_SAMPLE_BUFFERS_EXT 0x80A8
GL_SAMPLES_EXT 0x80A9
GL_SAMPLE_MASK_VALUE_EXT 0x80AA
GL_SAMPLE_MASK_INVERT_EXT 0x80AB
GL_SAMPLE_PATTERN_EXT 0x80AC
GL_MULTISAMPLE_BIT_EXT 0x20000000""", globals())
glget.addGLGetConstant( GL_MULTISAMPLE_EXT, (1,) )
glget.addGLGetConstant( GL_SAMPLE_ALPHA_TO_MASK_EXT, (1,) )
glget.addGLGetConstant( GL_SAMPLE_ALPHA_TO_ONE_EXT, (1,) )
glget.addGLGetConstant( GL_SAMPLE_MASK_EXT, (1,) )
@_f
@_p.types(None,_cs.GLclampf,_cs.GLboolean)
def glSampleMaskEXT(value,invert):pass
@_f
@_p.types(None,_cs.GLenum)
def glSamplePatternEXT(pattern):pass


def glInitMultisampleEXT():
    '''Return boolean indicating whether this extension is available'''
    from OpenGL import extensions
    return extensions.hasGLExtension( EXTENSION_NAME )
