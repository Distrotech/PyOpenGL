'''OpenGL extension EXT.histogram

Automatically generated by the get_gl_extensions script, do not edit!
'''
from OpenGL import platform as _p, constants as _cs, arrays
from OpenGL.GL import glget
import ctypes
EXTENSION_NAME = 'GL_EXT_histogram'
def _f( function ):
    return _p.createFunction( function,_p.GL,'GL_EXT_histogram',False)
_p.unpack_constants( """GL_HISTOGRAM_EXT 0x8024
GL_PROXY_HISTOGRAM_EXT 0x8025
GL_HISTOGRAM_WIDTH_EXT 0x8026
GL_HISTOGRAM_FORMAT_EXT 0x8027
GL_HISTOGRAM_RED_SIZE_EXT 0x8028
GL_HISTOGRAM_GREEN_SIZE_EXT 0x8029
GL_HISTOGRAM_BLUE_SIZE_EXT 0x802A
GL_HISTOGRAM_ALPHA_SIZE_EXT 0x802B
GL_HISTOGRAM_LUMINANCE_SIZE_EXT 0x802C
GL_HISTOGRAM_SINK_EXT 0x802D
GL_MINMAX_EXT 0x802E
GL_MINMAX_FORMAT_EXT 0x802F
GL_MINMAX_SINK_EXT 0x8030
GL_TABLE_TOO_LARGE_EXT 0x8031""", globals())
glget.addGLGetConstant( GL_HISTOGRAM_EXT, (1,) )
glget.addGLGetConstant( GL_MINMAX_EXT, (1,) )
@_f
@_p.types(None,_cs.GLenum,_cs.GLboolean,_cs.GLenum,_cs.GLenum,ctypes.c_void_p)
def glGetHistogramEXT( target,reset,format,type,values ):pass
@_f
@_p.types(None,_cs.GLenum,_cs.GLenum,arrays.GLfloatArray)
def glGetHistogramParameterfvEXT( target,pname,params ):pass
@_f
@_p.types(None,_cs.GLenum,_cs.GLenum,arrays.GLintArray)
def glGetHistogramParameterivEXT( target,pname,params ):pass
@_f
@_p.types(None,_cs.GLenum,_cs.GLboolean,_cs.GLenum,_cs.GLenum,ctypes.c_void_p)
def glGetMinmaxEXT( target,reset,format,type,values ):pass
@_f
@_p.types(None,_cs.GLenum,_cs.GLenum,arrays.GLfloatArray)
def glGetMinmaxParameterfvEXT( target,pname,params ):pass
@_f
@_p.types(None,_cs.GLenum,_cs.GLenum,arrays.GLintArray)
def glGetMinmaxParameterivEXT( target,pname,params ):pass
@_f
@_p.types(None,_cs.GLenum,_cs.GLsizei,_cs.GLenum,_cs.GLboolean)
def glHistogramEXT( target,width,internalformat,sink ):pass
@_f
@_p.types(None,_cs.GLenum,_cs.GLenum,_cs.GLboolean)
def glMinmaxEXT( target,internalformat,sink ):pass
@_f
@_p.types(None,_cs.GLenum)
def glResetHistogramEXT( target ):pass
@_f
@_p.types(None,_cs.GLenum)
def glResetMinmaxEXT( target ):pass


def glInitHistogramEXT():
    '''Return boolean indicating whether this extension is available'''
    from OpenGL import extensions
    return extensions.hasGLExtension( EXTENSION_NAME )
