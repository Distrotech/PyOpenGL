'''Autogenerated by get_gl_extensions script, do not edit!'''
from OpenGL import platform as _p, constants as _cs, arrays
from OpenGL.GL import glget
import ctypes
EXTENSION_NAME = 'GL_EXT_texture_object'
def _f( function ):
    return _p.createFunction( function,_p.GL,'GL_EXT_texture_object',False)
_p.unpack_constants( """GL_TEXTURE_PRIORITY_EXT 0x8066
GL_TEXTURE_RESIDENT_EXT 0x8067
GL_TEXTURE_1D_BINDING_EXT 0x8068
GL_TEXTURE_2D_BINDING_EXT 0x8069
GL_TEXTURE_3D_BINDING_EXT 0x806A""", globals())
glget.addGLGetConstant( GL_TEXTURE_1D_BINDING_EXT, (1,) )
glget.addGLGetConstant( GL_TEXTURE_2D_BINDING_EXT, (1,) )
glget.addGLGetConstant( GL_TEXTURE_3D_BINDING_EXT, (1,) )
@_f
@_p.types(_cs.GLboolean,_cs.GLsizei,arrays.GLuintArray,arrays.GLbooleanArray)
def glAreTexturesResidentEXT(n,textures,residences):pass
@_f
@_p.types(None,_cs.GLenum,_cs.GLuint)
def glBindTextureEXT(target,texture):pass
@_f
@_p.types(None,_cs.GLsizei,arrays.GLuintArray)
def glDeleteTexturesEXT(n,textures):pass
@_f
@_p.types(None,_cs.GLsizei,arrays.GLuintArray)
def glGenTexturesEXT(n,textures):pass
@_f
@_p.types(_cs.GLboolean,_cs.GLuint)
def glIsTextureEXT(texture):pass
@_f
@_p.types(None,_cs.GLsizei,arrays.GLuintArray,arrays.GLclampfArray)
def glPrioritizeTexturesEXT(n,textures,priorities):pass


def glInitTextureObjectEXT():
    '''Return boolean indicating whether this extension is available'''
    from OpenGL import extensions
    return extensions.hasGLExtension( EXTENSION_NAME )
