'''OpenGL extension APPLE.vertex_program_evaluators

Automatically generated by the get_gl_extensions script, do not edit!
'''
from OpenGL import platform as _p, constants as _cs, arrays
from OpenGL.GL import glget
import ctypes
EXTENSION_NAME = 'GL_APPLE_vertex_program_evaluators'
def _f( function ):
    return _p.createFunction( function,_p.GL,'GL_APPLE_vertex_program_evaluators',False)
_p.unpack_constants( """GL_VERTEX_ATTRIB_MAP1_APPLE 0x8A00
GL_VERTEX_ATTRIB_MAP2_APPLE 0x8A01
GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE 0x8A02
GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE 0x8A03
GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE 0x8A04
GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE 0x8A05
GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE 0x8A06
GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE 0x8A07
GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE 0x8A08
GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE 0x8A09""", globals())
@_f
@_p.types(None,_cs.GLuint,_cs.GLenum)
def glEnableVertexAttribAPPLE( index,pname ):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLenum)
def glDisableVertexAttribAPPLE( index,pname ):pass
@_f
@_p.types(_cs.GLboolean,_cs.GLuint,_cs.GLenum)
def glIsVertexAttribEnabledAPPLE( index,pname ):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLuint,_cs.GLdouble,_cs.GLdouble,_cs.GLint,_cs.GLint,arrays.GLdoubleArray)
def glMapVertexAttrib1dAPPLE( index,size,u1,u2,stride,order,points ):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLuint,_cs.GLfloat,_cs.GLfloat,_cs.GLint,_cs.GLint,arrays.GLfloatArray)
def glMapVertexAttrib1fAPPLE( index,size,u1,u2,stride,order,points ):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLuint,_cs.GLdouble,_cs.GLdouble,_cs.GLint,_cs.GLint,_cs.GLdouble,_cs.GLdouble,_cs.GLint,_cs.GLint,arrays.GLdoubleArray)
def glMapVertexAttrib2dAPPLE( index,size,u1,u2,ustride,uorder,v1,v2,vstride,vorder,points ):pass
@_f
@_p.types(None,_cs.GLuint,_cs.GLuint,_cs.GLfloat,_cs.GLfloat,_cs.GLint,_cs.GLint,_cs.GLfloat,_cs.GLfloat,_cs.GLint,_cs.GLint,arrays.GLfloatArray)
def glMapVertexAttrib2fAPPLE( index,size,u1,u2,ustride,uorder,v1,v2,vstride,vorder,points ):pass


def glInitVertexProgramEvaluatorsAPPLE():
    '''Return boolean indicating whether this extension is available'''
    from OpenGL import extensions
    return extensions.hasGLExtension( EXTENSION_NAME )
