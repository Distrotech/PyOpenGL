'''Autogenerated by get_gl_extensions script, do not edit!'''
from OpenGL import platform as _p, constants as _cs, arrays
from OpenGL.GL import glget
import ctypes
EXTENSION_NAME = 'GL_APPLE_element_array'
def _f( function ):
    return _p.createFunction( function,_p.GL,'GL_APPLE_element_array',False)
_p.unpack_constants( """GL_ELEMENT_ARRAY_APPLE 0x8A0C
GL_ELEMENT_ARRAY_TYPE_APPLE 0x8A0D
GL_ELEMENT_ARRAY_POINTER_APPLE 0x8A0E""", globals())
glget.addGLGetConstant( GL_ELEMENT_ARRAY_TYPE_APPLE, (1,) )
@_f
@_p.types(None,_cs.GLenum,ctypes.c_void_p)
def glElementPointerAPPLE(type,pointer):pass
@_f
@_p.types(None,_cs.GLenum,_cs.GLint,_cs.GLsizei)
def glDrawElementArrayAPPLE(mode,first,count):pass
@_f
@_p.types(None,_cs.GLenum,_cs.GLuint,_cs.GLuint,_cs.GLint,_cs.GLsizei)
def glDrawRangeElementArrayAPPLE(mode,start,end,first,count):pass
@_f
@_p.types(None,_cs.GLenum,arrays.GLintArray,arrays.GLsizeiArray,_cs.GLsizei)
def glMultiDrawElementArrayAPPLE(mode,first,count,primcount):pass
@_f
@_p.types(None,_cs.GLenum,_cs.GLuint,_cs.GLuint,arrays.GLintArray,arrays.GLsizeiArray,_cs.GLsizei)
def glMultiDrawRangeElementArrayAPPLE(mode,start,end,first,count,primcount):pass


def glInitElementArrayAPPLE():
    '''Return boolean indicating whether this extension is available'''
    from OpenGL import extensions
    return extensions.hasGLExtension( EXTENSION_NAME )
