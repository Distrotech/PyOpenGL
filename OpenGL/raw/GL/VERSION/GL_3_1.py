'''OpenGL extension VERSION.GL_3_1

The official definition of this extension is available here:
	http://oss.sgi.com/projects/ogl-sample/registry/VERSION/GL_3_1.txt

Automatically generated by the get_gl_extensions script, do not edit!
'''
from OpenGL import platform, constants, constant, arrays
from OpenGL import extensions
from OpenGL.GL import glget
import ctypes
EXTENSION_NAME = 'GL_VERSION_GL_3_1'
GL_SAMPLER_2D_RECT = constant.Constant( 'GL_SAMPLER_2D_RECT', 0x8B63 )
GL_SAMPLER_2D_RECT_SHADOW = constant.Constant( 'GL_SAMPLER_2D_RECT_SHADOW', 0x8B64 )
GL_SAMPLER_BUFFER = constant.Constant( 'GL_SAMPLER_BUFFER', 0x8DC2 )
GL_INT_SAMPLER_2D_RECT = constant.Constant( 'GL_INT_SAMPLER_2D_RECT', 0x8DCD )
GL_INT_SAMPLER_BUFFER = constant.Constant( 'GL_INT_SAMPLER_BUFFER', 0x8DD0 )
GL_UNSIGNED_INT_SAMPLER_2D_RECT = constant.Constant( 'GL_UNSIGNED_INT_SAMPLER_2D_RECT', 0x8DD5 )
GL_UNSIGNED_INT_SAMPLER_BUFFER = constant.Constant( 'GL_UNSIGNED_INT_SAMPLER_BUFFER', 0x8DD8 )
GL_TEXTURE_BUFFER = constant.Constant( 'GL_TEXTURE_BUFFER', 0x8C2A )
GL_MAX_TEXTURE_BUFFER_SIZE = constant.Constant( 'GL_MAX_TEXTURE_BUFFER_SIZE', 0x8C2B )
GL_TEXTURE_BINDING_BUFFER = constant.Constant( 'GL_TEXTURE_BINDING_BUFFER', 0x8C2C )
GL_TEXTURE_BUFFER_DATA_STORE_BINDING = constant.Constant( 'GL_TEXTURE_BUFFER_DATA_STORE_BINDING', 0x8C2D )
GL_TEXTURE_BUFFER_FORMAT = constant.Constant( 'GL_TEXTURE_BUFFER_FORMAT', 0x8C2E )
GL_TEXTURE_RECTANGLE = constant.Constant( 'GL_TEXTURE_RECTANGLE', 0x84F5 )
GL_TEXTURE_BINDING_RECTANGLE = constant.Constant( 'GL_TEXTURE_BINDING_RECTANGLE', 0x84F6 )
GL_PROXY_TEXTURE_RECTANGLE = constant.Constant( 'GL_PROXY_TEXTURE_RECTANGLE', 0x84F7 )
GL_MAX_RECTANGLE_TEXTURE_SIZE = constant.Constant( 'GL_MAX_RECTANGLE_TEXTURE_SIZE', 0x84F8 )
GL_RED_SNORM = constant.Constant( 'GL_RED_SNORM', 0x8F90 )
GL_RG_SNORM = constant.Constant( 'GL_RG_SNORM', 0x8F91 )
GL_RGB_SNORM = constant.Constant( 'GL_RGB_SNORM', 0x8F92 )
GL_RGBA_SNORM = constant.Constant( 'GL_RGBA_SNORM', 0x8F93 )
GL_R8_SNORM = constant.Constant( 'GL_R8_SNORM', 0x8F94 )
GL_RG8_SNORM = constant.Constant( 'GL_RG8_SNORM', 0x8F95 )
GL_RGB8_SNORM = constant.Constant( 'GL_RGB8_SNORM', 0x8F96 )
GL_RGBA8_SNORM = constant.Constant( 'GL_RGBA8_SNORM', 0x8F97 )
GL_R16_SNORM = constant.Constant( 'GL_R16_SNORM', 0x8F98 )
GL_RG16_SNORM = constant.Constant( 'GL_RG16_SNORM', 0x8F99 )
GL_RGB16_SNORM = constant.Constant( 'GL_RGB16_SNORM', 0x8F9A )
GL_RGBA16_SNORM = constant.Constant( 'GL_RGBA16_SNORM', 0x8F9B )
GL_SIGNED_NORMALIZED = constant.Constant( 'GL_SIGNED_NORMALIZED', 0x8F9C )
GL_PRIMITIVE_RESTART = constant.Constant( 'GL_PRIMITIVE_RESTART', 0x8F9D )
GL_PRIMITIVE_RESTART_INDEX = constant.Constant( 'GL_PRIMITIVE_RESTART_INDEX', 0x8F9E )
glDrawArraysInstanced = platform.createExtensionFunction( 
	'glDrawArraysInstanced', dll=platform.GL,
	extension=EXTENSION_NAME,
	resultType=None, 
	argTypes=(constants.GLenum, constants.GLint, constants.GLsizei, constants.GLsizei,),
	doc = 'glDrawArraysInstanced( GLenum(mode), GLint(first), GLsizei(count), GLsizei(primcount) ) -> None',
	argNames = ('mode', 'first', 'count', 'primcount',),
)

glDrawElementsInstanced = platform.createExtensionFunction( 
	'glDrawElementsInstanced', dll=platform.GL,
	extension=EXTENSION_NAME,
	resultType=None, 
	argTypes=(constants.GLenum, constants.GLsizei, constants.GLenum, ctypes.c_void_p, constants.GLsizei,),
	doc = 'glDrawElementsInstanced( GLenum(mode), GLsizei(count), GLenum(type), c_void_p(indices), GLsizei(primcount) ) -> None',
	argNames = ('mode', 'count', 'type', 'indices', 'primcount',),
)

glTexBuffer = platform.createExtensionFunction( 
	'glTexBuffer', dll=platform.GL,
	extension=EXTENSION_NAME,
	resultType=None, 
	argTypes=(constants.GLenum, constants.GLenum, constants.GLuint,),
	doc = 'glTexBuffer( GLenum(target), GLenum(internalformat), GLuint(buffer) ) -> None',
	argNames = ('target', 'internalformat', 'buffer',),
)

glPrimitiveRestartIndex = platform.createExtensionFunction( 
	'glPrimitiveRestartIndex', dll=platform.GL,
	extension=EXTENSION_NAME,
	resultType=None, 
	argTypes=(constants.GLuint,),
	doc = 'glPrimitiveRestartIndex( GLuint(index) ) -> None',
	argNames = ('index',),
)

