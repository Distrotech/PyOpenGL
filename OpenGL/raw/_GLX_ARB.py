# BEGIN GENERATED CONTENT (do not edit below this line)

# This content is generated by ./gengl.py.
# Wrapper for http://oss.sgi.com/projects/ogl-sample/ABI/glxext.h
from OpenGL import platform, constant
from ctypes import *
c_void = None


# H (/usr/include/GL/glx.h:26)
# ARB_get_proc_address (/usr/include/GL/glx.h:327)
# GLXEXT_LEGACY (/usr/include/GL/glx.h:344)
GLX_GLXEXT_VERSION = constant.Constant( 'GLX_GLXEXT_VERSION', 11 )
# VERSION_1_3 (GL/glxext.h:59)
# VERSION_1_4 (GL/glxext.h:118)
# ARB_get_proc_address (GL/glxext.h:123)
# ARB_multisample (GL/glxext.h:126)
GLX_SAMPLE_BUFFERS_ARB = constant.Constant( 'GLX_SAMPLE_BUFFERS_ARB', 100000 )
GLX_SAMPLES_ARB = constant.Constant( 'GLX_SAMPLES_ARB', 100001 )
# ARB_fbconfig_float (GL/glxext.h:131)
GLX_RGBA_FLOAT_TYPE_ARB = constant.Constant( 'GLX_RGBA_FLOAT_TYPE_ARB', 8377 )
GLX_RGBA_FLOAT_BIT_ARB = constant.Constant( 'GLX_RGBA_FLOAT_BIT_ARB', 4 )
# SGIS_multisample (GL/glxext.h:136)
GLX_SAMPLE_BUFFERS_SGIS = constant.Constant( 'GLX_SAMPLE_BUFFERS_SGIS', 100000 )
GLX_SAMPLES_SGIS = constant.Constant( 'GLX_SAMPLES_SGIS', 100001 )
# EXT_visual_info (GL/glxext.h:141)
GLX_X_VISUAL_TYPE_EXT = constant.Constant( 'GLX_X_VISUAL_TYPE_EXT', 34 )
GLX_TRANSPARENT_TYPE_EXT = constant.Constant( 'GLX_TRANSPARENT_TYPE_EXT', 35 )
GLX_TRANSPARENT_INDEX_VALUE_EXT = constant.Constant( 'GLX_TRANSPARENT_INDEX_VALUE_EXT', 36 )
GLX_TRANSPARENT_RED_VALUE_EXT = constant.Constant( 'GLX_TRANSPARENT_RED_VALUE_EXT', 37 )
GLX_TRANSPARENT_GREEN_VALUE_EXT = constant.Constant( 'GLX_TRANSPARENT_GREEN_VALUE_EXT', 38 )
GLX_TRANSPARENT_BLUE_VALUE_EXT = constant.Constant( 'GLX_TRANSPARENT_BLUE_VALUE_EXT', 39 )
GLX_TRANSPARENT_ALPHA_VALUE_EXT = constant.Constant( 'GLX_TRANSPARENT_ALPHA_VALUE_EXT', 40 )
GLX_NONE_EXT = constant.Constant( 'GLX_NONE_EXT', 32768 )
GLX_TRUE_COLOR_EXT = constant.Constant( 'GLX_TRUE_COLOR_EXT', 32770 )
GLX_DIRECT_COLOR_EXT = constant.Constant( 'GLX_DIRECT_COLOR_EXT', 32771 )
GLX_PSEUDO_COLOR_EXT = constant.Constant( 'GLX_PSEUDO_COLOR_EXT', 32772 )
GLX_STATIC_COLOR_EXT = constant.Constant( 'GLX_STATIC_COLOR_EXT', 32773 )
GLX_GRAY_SCALE_EXT = constant.Constant( 'GLX_GRAY_SCALE_EXT', 32774 )
GLX_STATIC_GRAY_EXT = constant.Constant( 'GLX_STATIC_GRAY_EXT', 32775 )
GLX_TRANSPARENT_RGB_EXT = constant.Constant( 'GLX_TRANSPARENT_RGB_EXT', 32776 )
GLX_TRANSPARENT_INDEX_EXT = constant.Constant( 'GLX_TRANSPARENT_INDEX_EXT', 32777 )
# SGI_swap_control (GL/glxext.h:160)
# SGI_video_sync (GL/glxext.h:163)
# SGI_make_current_read (GL/glxext.h:166)
# SGIX_video_source (GL/glxext.h:169)
# EXT_visual_rating (GL/glxext.h:172)
GLX_VISUAL_CAVEAT_EXT = constant.Constant( 'GLX_VISUAL_CAVEAT_EXT', 32 )
GLX_SLOW_VISUAL_EXT = constant.Constant( 'GLX_SLOW_VISUAL_EXT', 32769 )
GLX_NON_CONFORMANT_VISUAL_EXT = constant.Constant( 'GLX_NON_CONFORMANT_VISUAL_EXT', 32781 )
# EXT_import_context (GL/glxext.h:179)
GLX_SHARE_CONTEXT_EXT = constant.Constant( 'GLX_SHARE_CONTEXT_EXT', 32778 )
GLX_VISUAL_ID_EXT = constant.Constant( 'GLX_VISUAL_ID_EXT', 32779 )
GLX_SCREEN_EXT = constant.Constant( 'GLX_SCREEN_EXT', 32780 )
# SGIX_fbconfig (GL/glxext.h:185)
GLX_WINDOW_BIT_SGIX = constant.Constant( 'GLX_WINDOW_BIT_SGIX', 1 )
GLX_PIXMAP_BIT_SGIX = constant.Constant( 'GLX_PIXMAP_BIT_SGIX', 2 )
GLX_RGBA_BIT_SGIX = constant.Constant( 'GLX_RGBA_BIT_SGIX', 1 )
GLX_COLOR_INDEX_BIT_SGIX = constant.Constant( 'GLX_COLOR_INDEX_BIT_SGIX', 2 )
GLX_DRAWABLE_TYPE_SGIX = constant.Constant( 'GLX_DRAWABLE_TYPE_SGIX', 32784 )
GLX_RENDER_TYPE_SGIX = constant.Constant( 'GLX_RENDER_TYPE_SGIX', 32785 )
GLX_X_RENDERABLE_SGIX = constant.Constant( 'GLX_X_RENDERABLE_SGIX', 32786 )
GLX_FBCONFIG_ID_SGIX = constant.Constant( 'GLX_FBCONFIG_ID_SGIX', 32787 )
GLX_RGBA_TYPE_SGIX = constant.Constant( 'GLX_RGBA_TYPE_SGIX', 32788 )
GLX_COLOR_INDEX_TYPE_SGIX = constant.Constant( 'GLX_COLOR_INDEX_TYPE_SGIX', 32789 )
# SGIX_pbuffer (GL/glxext.h:199)
GLX_PBUFFER_BIT_SGIX = constant.Constant( 'GLX_PBUFFER_BIT_SGIX', 4 )
GLX_BUFFER_CLOBBER_MASK_SGIX = constant.Constant( 'GLX_BUFFER_CLOBBER_MASK_SGIX', 134217728 )
GLX_FRONT_LEFT_BUFFER_BIT_SGIX = constant.Constant( 'GLX_FRONT_LEFT_BUFFER_BIT_SGIX', 1 )
GLX_FRONT_RIGHT_BUFFER_BIT_SGIX = constant.Constant( 'GLX_FRONT_RIGHT_BUFFER_BIT_SGIX', 2 )
GLX_BACK_LEFT_BUFFER_BIT_SGIX = constant.Constant( 'GLX_BACK_LEFT_BUFFER_BIT_SGIX', 4 )
GLX_BACK_RIGHT_BUFFER_BIT_SGIX = constant.Constant( 'GLX_BACK_RIGHT_BUFFER_BIT_SGIX', 8 )
GLX_AUX_BUFFERS_BIT_SGIX = constant.Constant( 'GLX_AUX_BUFFERS_BIT_SGIX', 16 )
GLX_DEPTH_BUFFER_BIT_SGIX = constant.Constant( 'GLX_DEPTH_BUFFER_BIT_SGIX', 32 )
GLX_STENCIL_BUFFER_BIT_SGIX = constant.Constant( 'GLX_STENCIL_BUFFER_BIT_SGIX', 64 )
GLX_ACCUM_BUFFER_BIT_SGIX = constant.Constant( 'GLX_ACCUM_BUFFER_BIT_SGIX', 128 )
GLX_SAMPLE_BUFFERS_BIT_SGIX = constant.Constant( 'GLX_SAMPLE_BUFFERS_BIT_SGIX', 256 )
GLX_MAX_PBUFFER_WIDTH_SGIX = constant.Constant( 'GLX_MAX_PBUFFER_WIDTH_SGIX', 32790 )
GLX_MAX_PBUFFER_HEIGHT_SGIX = constant.Constant( 'GLX_MAX_PBUFFER_HEIGHT_SGIX', 32791 )
GLX_MAX_PBUFFER_PIXELS_SGIX = constant.Constant( 'GLX_MAX_PBUFFER_PIXELS_SGIX', 32792 )
GLX_OPTIMAL_PBUFFER_WIDTH_SGIX = constant.Constant( 'GLX_OPTIMAL_PBUFFER_WIDTH_SGIX', 32793 )
GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX = constant.Constant( 'GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX', 32794 )
GLX_PRESERVED_CONTENTS_SGIX = constant.Constant( 'GLX_PRESERVED_CONTENTS_SGIX', 32795 )
GLX_LARGEST_PBUFFER_SGIX = constant.Constant( 'GLX_LARGEST_PBUFFER_SGIX', 32796 )
GLX_WIDTH_SGIX = constant.Constant( 'GLX_WIDTH_SGIX', 32797 )
GLX_HEIGHT_SGIX = constant.Constant( 'GLX_HEIGHT_SGIX', 32798 )
GLX_EVENT_MASK_SGIX = constant.Constant( 'GLX_EVENT_MASK_SGIX', 32799 )
GLX_DAMAGED_SGIX = constant.Constant( 'GLX_DAMAGED_SGIX', 32800 )
GLX_SAVED_SGIX = constant.Constant( 'GLX_SAVED_SGIX', 32801 )
GLX_WINDOW_SGIX = constant.Constant( 'GLX_WINDOW_SGIX', 32802 )
GLX_PBUFFER_SGIX = constant.Constant( 'GLX_PBUFFER_SGIX', 32803 )
# SGI_cushion (GL/glxext.h:227)
# SGIX_video_resize (GL/glxext.h:230)
GLX_SYNC_FRAME_SGIX = constant.Constant( 'GLX_SYNC_FRAME_SGIX', 0 )
GLX_SYNC_SWAP_SGIX = constant.Constant( 'GLX_SYNC_SWAP_SGIX', 1 )
# SGIX_dmbuffer (GL/glxext.h:235)
GLX_DIGITAL_MEDIA_PBUFFER_SGIX = constant.Constant( 'GLX_DIGITAL_MEDIA_PBUFFER_SGIX', 32804 )
# SGIX_swap_group (GL/glxext.h:239)
# SGIX_swap_barrier (GL/glxext.h:242)
# SGIS_blended_overlay (GL/glxext.h:245)
GLX_BLENDED_RGBA_SGIS = constant.Constant( 'GLX_BLENDED_RGBA_SGIS', 32805 )
# SGIS_shared_multisample (GL/glxext.h:249)
GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS = constant.Constant( 'GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS', 32806 )
GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS = constant.Constant( 'GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS', 32807 )
# SUN_get_transparent_index (GL/glxext.h:254)
# 3DFX_multisample (GL/glxext.h:257)
GLX_SAMPLE_BUFFERS_3DFX = constant.Constant( 'GLX_SAMPLE_BUFFERS_3DFX', 32848 )
GLX_SAMPLES_3DFX = constant.Constant( 'GLX_SAMPLES_3DFX', 32849 )
# MESA_copy_sub_buffer (GL/glxext.h:262)
# MESA_pixmap_colormap (GL/glxext.h:265)
# MESA_release_buffers (GL/glxext.h:268)
# MESA_set_3dfx_mode (GL/glxext.h:271)
GLX_3DFX_WINDOW_MODE_MESA = constant.Constant( 'GLX_3DFX_WINDOW_MODE_MESA', 1 )
GLX_3DFX_FULLSCREEN_MODE_MESA = constant.Constant( 'GLX_3DFX_FULLSCREEN_MODE_MESA', 2 )
# SGIX_visual_select_group (GL/glxext.h:276)
GLX_VISUAL_SELECT_GROUP_SGIX = constant.Constant( 'GLX_VISUAL_SELECT_GROUP_SGIX', 32808 )
# OML_swap_method (GL/glxext.h:280)
GLX_SWAP_METHOD_OML = constant.Constant( 'GLX_SWAP_METHOD_OML', 32864 )
GLX_SWAP_EXCHANGE_OML = constant.Constant( 'GLX_SWAP_EXCHANGE_OML', 32865 )
GLX_SWAP_COPY_OML = constant.Constant( 'GLX_SWAP_COPY_OML', 32866 )
GLX_SWAP_UNDEFINED_OML = constant.Constant( 'GLX_SWAP_UNDEFINED_OML', 32867 )
# OML_sync_control (GL/glxext.h:287)
# NV_float_buffer (GL/glxext.h:290)
GLX_FLOAT_COMPONENTS_NV = constant.Constant( 'GLX_FLOAT_COMPONENTS_NV', 8368 )
# SGIX_hyperpipe (GL/glxext.h:294)
GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX = constant.Constant( 'GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX', 80 )
GLX_BAD_HYPERPIPE_CONFIG_SGIX = constant.Constant( 'GLX_BAD_HYPERPIPE_CONFIG_SGIX', 91 )
GLX_BAD_HYPERPIPE_SGIX = constant.Constant( 'GLX_BAD_HYPERPIPE_SGIX', 92 )
GLX_HYPERPIPE_DISPLAY_PIPE_SGIX = constant.Constant( 'GLX_HYPERPIPE_DISPLAY_PIPE_SGIX', 1 )
GLX_HYPERPIPE_RENDER_PIPE_SGIX = constant.Constant( 'GLX_HYPERPIPE_RENDER_PIPE_SGIX', 2 )
GLX_PIPE_RECT_SGIX = constant.Constant( 'GLX_PIPE_RECT_SGIX', 1 )
GLX_PIPE_RECT_LIMITS_SGIX = constant.Constant( 'GLX_PIPE_RECT_LIMITS_SGIX', 2 )
GLX_HYPERPIPE_STEREO_SGIX = constant.Constant( 'GLX_HYPERPIPE_STEREO_SGIX', 3 )
GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX = constant.Constant( 'GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX', 4 )
GLX_HYPERPIPE_ID_SGIX = constant.Constant( 'GLX_HYPERPIPE_ID_SGIX', 32816 )
# MESA_agp_offset (GL/glxext.h:307)
# ARB_get_proc_address (GL/glxext.h:313)
# SGIX_video_source (GL/glxext.h:317)
# SGIX_fbconfig (GL/glxext.h:321)
# SGIX_pbuffer (GL/glxext.h:326)
# VERSION_1_3 (GL/glxext.h:358)
# VERSION_1_4 (GL/glxext.h:400)
# ARB_get_proc_address (GL/glxext.h:408)
# ARB_multisample (GL/glxext.h:416)
GLX_ARB_multisample = constant.Constant( 'GLX_ARB_multisample', 1 )
# ARB_fbconfig_float (GL/glxext.h:420)
GLX_ARB_fbconfig_float = constant.Constant( 'GLX_ARB_fbconfig_float', 1 )
# SGIS_multisample (GL/glxext.h:424)
GLX_SGIS_multisample = constant.Constant( 'GLX_SGIS_multisample', 1 )
# EXT_visual_info (GL/glxext.h:428)
GLX_EXT_visual_info = constant.Constant( 'GLX_EXT_visual_info', 1 )
# SGI_swap_control (GL/glxext.h:432)
GLX_SGI_swap_control = constant.Constant( 'GLX_SGI_swap_control', 1 )
glXSwapIntervalSGI = platform.createBaseFunction(
    'glXSwapIntervalSGI', dll=platform.GL, resultType=c_int,
    argTypes=[c_int],
    doc='glXSwapIntervalSGI( c_int(None) ) -> c_int',
    argNames=['None'],
)

# SGI_video_sync (GL/glxext.h:440)
GLX_SGI_video_sync = constant.Constant( 'GLX_SGI_video_sync', 1 )
glXGetVideoSyncSGI = platform.createBaseFunction(
    'glXGetVideoSyncSGI', dll=platform.GL, resultType=c_int,
    argTypes=[POINTER(c_uint)],
    doc='glXGetVideoSyncSGI( POINTER(c_uint)() ) -> c_int',
    argNames=[''],
)

glXWaitVideoSyncSGI = platform.createBaseFunction(
    'glXWaitVideoSyncSGI', dll=platform.GL, resultType=c_int,
    argTypes=[c_int, c_int, POINTER(c_uint)],
    doc='glXWaitVideoSyncSGI( c_int(None), c_int(None), POINTER(c_uint)() ) -> c_int',
    argNames=['None', 'None', ''],
)

# SGI_make_current_read (GL/glxext.h:450)
GLX_SGI_make_current_read = constant.Constant( 'GLX_SGI_make_current_read', 1 )
class struct__XDisplay(Structure):
    __slots__ = [
    ]
struct__XDisplay._fields_ = [
    ('_opaque_struct', c_int)
]

class struct__XDisplay(Structure):
    __slots__ = [
    ]
struct__XDisplay._fields_ = [
    ('_opaque_struct', c_int)
]

Display = struct__XDisplay 	# /usr/include/X11/Xlib.h:495
XID = c_ulong 	# /usr/include/X11/X.h:66
GLXDrawable = XID 	# /usr/include/GL/glx.h:180
class struct___GLXcontextRec(Structure):
    __slots__ = [
    ]
struct___GLXcontextRec._fields_ = [
    ('_opaque_struct', c_int)
]

class struct___GLXcontextRec(Structure):
    __slots__ = [
    ]
struct___GLXcontextRec._fields_ = [
    ('_opaque_struct', c_int)
]

GLXContext = POINTER(struct___GLXcontextRec) 	# /usr/include/GL/glx.h:178
glXMakeCurrentReadSGI = platform.createBaseFunction(
    'glXMakeCurrentReadSGI', dll=platform.GL, resultType=c_int,
    argTypes=[POINTER(Display), GLXDrawable, GLXDrawable, GLXContext],
    doc='glXMakeCurrentReadSGI( POINTER(Display)(), GLXDrawable(None), GLXDrawable(None), GLXContext(None) ) -> c_int',
    argNames=['', 'None', 'None', 'None'],
)

glXGetCurrentReadDrawableSGI = platform.createBaseFunction(
    'glXGetCurrentReadDrawableSGI', dll=platform.GL, resultType=GLXDrawable,
    argTypes=[],
    doc='glXGetCurrentReadDrawableSGI(  ) -> GLXDrawable',
    argNames=[],
)

# SGIX_video_source (GL/glxext.h:460)
GLX_SGIX_video_source = constant.Constant( 'GLX_SGIX_video_source', 1 )
# EXT_visual_rating (GL/glxext.h:472)
GLX_EXT_visual_rating = constant.Constant( 'GLX_EXT_visual_rating', 1 )
# EXT_import_context (GL/glxext.h:476)
GLX_EXT_import_context = constant.Constant( 'GLX_EXT_import_context', 1 )
glXGetCurrentDisplayEXT = platform.createBaseFunction(
    'glXGetCurrentDisplayEXT', dll=platform.GL, resultType=POINTER(Display),
    argTypes=[],
    doc='glXGetCurrentDisplayEXT(  ) -> POINTER(Display)',
    argNames=[],
)

glXQueryContextInfoEXT = platform.createBaseFunction(
    'glXQueryContextInfoEXT', dll=platform.GL, resultType=c_int,
    argTypes=[POINTER(Display), GLXContext, c_int, POINTER(c_int)],
    doc='glXQueryContextInfoEXT( POINTER(Display)(), GLXContext(None), c_int(None), POINTER(c_int)() ) -> c_int',
    argNames=['', 'None', 'None', ''],
)

GLXContextID = XID 	# /usr/include/GL/glx.h:184
glXGetContextIDEXT = platform.createBaseFunction(
    'glXGetContextIDEXT', dll=platform.GL, resultType=GLXContextID,
    argTypes=[GLXContext],
    doc='glXGetContextIDEXT( GLXContext(None) ) -> GLXContextID',
    argNames=['None'],
)

glXImportContextEXT = platform.createBaseFunction(
    'glXImportContextEXT', dll=platform.GL, resultType=GLXContext,
    argTypes=[POINTER(Display), GLXContextID],
    doc='glXImportContextEXT( POINTER(Display)(), GLXContextID(None) ) -> GLXContext',
    argNames=['', 'None'],
)

glXFreeContextEXT = platform.createBaseFunction(
    'glXFreeContextEXT', dll=platform.GL, resultType=None,
    argTypes=[POINTER(Display), GLXContext],
    doc='glXFreeContextEXT( POINTER(Display)(), GLXContext(None) ) -> None',
    argNames=['', 'None'],
)

# SGIX_fbconfig (GL/glxext.h:492)
GLX_SGIX_fbconfig = constant.Constant( 'GLX_SGIX_fbconfig', 1 )
class struct___GLXFBConfigRec(Structure):
    __slots__ = [
    ]
struct___GLXFBConfigRec._fields_ = [
    ('_opaque_struct', c_int)
]

class struct___GLXFBConfigRec(Structure):
    __slots__ = [
    ]
struct___GLXFBConfigRec._fields_ = [
    ('_opaque_struct', c_int)
]

GLXFBConfigSGIX = POINTER(struct___GLXFBConfigRec) 	# GL/glxext.h:323
glXGetFBConfigAttribSGIX = platform.createBaseFunction(
    'glXGetFBConfigAttribSGIX', dll=platform.GL, resultType=c_int,
    argTypes=[POINTER(Display), GLXFBConfigSGIX, c_int, POINTER(c_int)],
    doc='glXGetFBConfigAttribSGIX( POINTER(Display)(), GLXFBConfigSGIX(None), c_int(None), POINTER(c_int)() ) -> c_int',
    argNames=['', 'None', 'None', ''],
)

glXChooseFBConfigSGIX = platform.createBaseFunction(
    'glXChooseFBConfigSGIX', dll=platform.GL, resultType=POINTER(GLXFBConfigSGIX),
    argTypes=[POINTER(Display), c_int, POINTER(c_int), POINTER(c_int)],
    doc='glXChooseFBConfigSGIX( POINTER(Display)(), c_int(None), POINTER(c_int)(), POINTER(c_int)() ) -> POINTER(GLXFBConfigSGIX)',
    argNames=['', 'None', '', ''],
)

GLXPixmap = XID 	# /usr/include/GL/glx.h:179
Pixmap = XID 	# /usr/include/X11/X.h:102
glXCreateGLXPixmapWithConfigSGIX = platform.createBaseFunction(
    'glXCreateGLXPixmapWithConfigSGIX', dll=platform.GL, resultType=GLXPixmap,
    argTypes=[POINTER(Display), GLXFBConfigSGIX, Pixmap],
    doc='glXCreateGLXPixmapWithConfigSGIX( POINTER(Display)(), GLXFBConfigSGIX(None), Pixmap(None) ) -> GLXPixmap',
    argNames=['', 'None', 'None'],
)

glXCreateContextWithConfigSGIX = platform.createBaseFunction(
    'glXCreateContextWithConfigSGIX', dll=platform.GL, resultType=GLXContext,
    argTypes=[POINTER(Display), GLXFBConfigSGIX, c_int, GLXContext, c_int],
    doc='glXCreateContextWithConfigSGIX( POINTER(Display)(), GLXFBConfigSGIX(None), c_int(None), GLXContext(None), c_int(None) ) -> GLXContext',
    argNames=['', 'None', 'None', 'None', 'None'],
)

class struct_anon_103(Structure):
    __slots__ = [
        'visual',
        'visualid',
        'screen',
        'depth',
        'class',
        'red_mask',
        'green_mask',
        'blue_mask',
        'colormap_size',
        'bits_per_rgb',
    ]
class struct_anon_18(Structure):
    __slots__ = [
        'ext_data',
        'visualid',
        'class',
        'red_mask',
        'green_mask',
        'blue_mask',
        'bits_per_rgb',
        'map_entries',
    ]
class struct__XExtData(Structure):
    __slots__ = [
        'number',
        'next',
        'free_private',
        'private_data',
    ]
XPointer = c_char_p 	# /usr/include/X11/Xlib.h:84
struct__XExtData._fields_ = [
    ('number', c_int),
    ('next', POINTER(struct__XExtData)),
    ('free_private', POINTER(CFUNCTYPE(c_int, POINTER(struct__XExtData)))),
    ('private_data', XPointer),
]

XExtData = struct__XExtData 	# /usr/include/X11/Xlib.h:163
VisualID = c_ulong 	# /usr/include/X11/X.h:76
struct_anon_18._fields_ = [
    ('ext_data', POINTER(XExtData)),
    ('visualid', VisualID),
    ('class', c_int),
    ('red_mask', c_ulong),
    ('green_mask', c_ulong),
    ('blue_mask', c_ulong),
    ('bits_per_rgb', c_int),
    ('map_entries', c_int),
]

Visual = struct_anon_18 	# /usr/include/X11/Xlib.h:246
struct_anon_103._fields_ = [
    ('visual', POINTER(Visual)),
    ('visualid', VisualID),
    ('screen', c_int),
    ('depth', c_int),
    ('class', c_int),
    ('red_mask', c_ulong),
    ('green_mask', c_ulong),
    ('blue_mask', c_ulong),
    ('colormap_size', c_int),
    ('bits_per_rgb', c_int),
]

XVisualInfo = struct_anon_103 	# /usr/include/X11/Xutil.h:294
glXGetVisualFromFBConfigSGIX = platform.createBaseFunction(
    'glXGetVisualFromFBConfigSGIX', dll=platform.GL, resultType=POINTER(XVisualInfo),
    argTypes=[POINTER(Display), GLXFBConfigSGIX],
    doc='glXGetVisualFromFBConfigSGIX( POINTER(Display)(), GLXFBConfigSGIX(None) ) -> POINTER(XVisualInfo)',
    argNames=['', 'None'],
)

glXGetFBConfigFromVisualSGIX = platform.createBaseFunction(
    'glXGetFBConfigFromVisualSGIX', dll=platform.GL, resultType=GLXFBConfigSGIX,
    argTypes=[POINTER(Display), POINTER(XVisualInfo)],
    doc='glXGetFBConfigFromVisualSGIX( POINTER(Display)(), POINTER(XVisualInfo)() ) -> GLXFBConfigSGIX',
    argNames=['', ''],
)

# SGIX_pbuffer (GL/glxext.h:510)
GLX_SGIX_pbuffer = constant.Constant( 'GLX_SGIX_pbuffer', 1 )
GLXPbufferSGIX = XID 	# GL/glxext.h:327
glXCreateGLXPbufferSGIX = platform.createBaseFunction(
    'glXCreateGLXPbufferSGIX', dll=platform.GL, resultType=GLXPbufferSGIX,
    argTypes=[POINTER(Display), GLXFBConfigSGIX, c_uint, c_uint, POINTER(c_int)],
    doc='glXCreateGLXPbufferSGIX( POINTER(Display)(), GLXFBConfigSGIX(None), c_uint(None), c_uint(None), POINTER(c_int)() ) -> GLXPbufferSGIX',
    argNames=['', 'None', 'None', 'None', ''],
)

glXDestroyGLXPbufferSGIX = platform.createBaseFunction(
    'glXDestroyGLXPbufferSGIX', dll=platform.GL, resultType=None,
    argTypes=[POINTER(Display), GLXPbufferSGIX],
    doc='glXDestroyGLXPbufferSGIX( POINTER(Display)(), GLXPbufferSGIX(None) ) -> None',
    argNames=['', 'None'],
)

glXQueryGLXPbufferSGIX = platform.createBaseFunction(
    'glXQueryGLXPbufferSGIX', dll=platform.GL, resultType=c_int,
    argTypes=[POINTER(Display), GLXPbufferSGIX, c_int, POINTER(c_uint)],
    doc='glXQueryGLXPbufferSGIX( POINTER(Display)(), GLXPbufferSGIX(None), c_int(None), POINTER(c_uint)() ) -> c_int',
    argNames=['', 'None', 'None', ''],
)

glXSelectEventSGIX = platform.createBaseFunction(
    'glXSelectEventSGIX', dll=platform.GL, resultType=None,
    argTypes=[POINTER(Display), GLXDrawable, c_ulong],
    doc='glXSelectEventSGIX( POINTER(Display)(), GLXDrawable(None), c_ulong(None) ) -> None',
    argNames=['', 'None', 'None'],
)

glXGetSelectedEventSGIX = platform.createBaseFunction(
    'glXGetSelectedEventSGIX', dll=platform.GL, resultType=None,
    argTypes=[POINTER(Display), GLXDrawable, POINTER(c_ulong)],
    doc='glXGetSelectedEventSGIX( POINTER(Display)(), GLXDrawable(None), POINTER(c_ulong)() ) -> None',
    argNames=['', 'None', ''],
)

# SGI_cushion (GL/glxext.h:526)
GLX_SGI_cushion = constant.Constant( 'GLX_SGI_cushion', 1 )
Window = XID 	# /usr/include/X11/X.h:96
glXCushionSGI = platform.createBaseFunction(
    'glXCushionSGI', dll=platform.GL, resultType=None,
    argTypes=[POINTER(Display), Window, c_float],
    doc='glXCushionSGI( POINTER(Display)(), Window(None), c_float(None) ) -> None',
    argNames=['', 'None', 'None'],
)

# SGIX_video_resize (GL/glxext.h:534)
GLX_SGIX_video_resize = constant.Constant( 'GLX_SGIX_video_resize', 1 )
glXBindChannelToWindowSGIX = platform.createBaseFunction(
    'glXBindChannelToWindowSGIX', dll=platform.GL, resultType=c_int,
    argTypes=[POINTER(Display), c_int, c_int, Window],
    doc='glXBindChannelToWindowSGIX( POINTER(Display)(), c_int(None), c_int(None), Window(None) ) -> c_int',
    argNames=['', 'None', 'None', 'None'],
)

glXChannelRectSGIX = platform.createBaseFunction(
    'glXChannelRectSGIX', dll=platform.GL, resultType=c_int,
    argTypes=[POINTER(Display), c_int, c_int, c_int, c_int, c_int, c_int],
    doc='glXChannelRectSGIX( POINTER(Display)(), c_int(None), c_int(None), c_int(None), c_int(None), c_int(None), c_int(None) ) -> c_int',
    argNames=['', 'None', 'None', 'None', 'None', 'None', 'None'],
)

glXQueryChannelRectSGIX = platform.createBaseFunction(
    'glXQueryChannelRectSGIX', dll=platform.GL, resultType=c_int,
    argTypes=[POINTER(Display), c_int, c_int, POINTER(c_int), POINTER(c_int), POINTER(c_int), POINTER(c_int)],
    doc='glXQueryChannelRectSGIX( POINTER(Display)(), c_int(None), c_int(None), POINTER(c_int)(), POINTER(c_int)(), POINTER(c_int)(), POINTER(c_int)() ) -> c_int',
    argNames=['', 'None', 'None', '', '', '', ''],
)

glXQueryChannelDeltasSGIX = platform.createBaseFunction(
    'glXQueryChannelDeltasSGIX', dll=platform.GL, resultType=c_int,
    argTypes=[POINTER(Display), c_int, c_int, POINTER(c_int), POINTER(c_int), POINTER(c_int), POINTER(c_int)],
    doc='glXQueryChannelDeltasSGIX( POINTER(Display)(), c_int(None), c_int(None), POINTER(c_int)(), POINTER(c_int)(), POINTER(c_int)(), POINTER(c_int)() ) -> c_int',
    argNames=['', 'None', 'None', '', '', '', ''],
)

GLenum = c_uint 	# /usr/include/GL/gl.h:155
glXChannelRectSyncSGIX = platform.createBaseFunction(
    'glXChannelRectSyncSGIX', dll=platform.GL, resultType=c_int,
    argTypes=[POINTER(Display), c_int, c_int, GLenum],
    doc='glXChannelRectSyncSGIX( POINTER(Display)(), c_int(None), c_int(None), GLenum(None) ) -> c_int',
    argNames=['', 'None', 'None', 'None'],
)

# SGIX_dmbuffer (GL/glxext.h:550)
GLX_SGIX_dmbuffer = constant.Constant( 'GLX_SGIX_dmbuffer', 1 )
# SGIX_swap_group (GL/glxext.h:560)
GLX_SGIX_swap_group = constant.Constant( 'GLX_SGIX_swap_group', 1 )
glXJoinSwapGroupSGIX = platform.createBaseFunction(
    'glXJoinSwapGroupSGIX', dll=platform.GL, resultType=None,
    argTypes=[POINTER(Display), GLXDrawable, GLXDrawable],
    doc='glXJoinSwapGroupSGIX( POINTER(Display)(), GLXDrawable(None), GLXDrawable(None) ) -> None',
    argNames=['', 'None', 'None'],
)

# SGIX_swap_barrier (GL/glxext.h:568)
GLX_SGIX_swap_barrier = constant.Constant( 'GLX_SGIX_swap_barrier', 1 )
glXBindSwapBarrierSGIX = platform.createBaseFunction(
    'glXBindSwapBarrierSGIX', dll=platform.GL, resultType=None,
    argTypes=[POINTER(Display), GLXDrawable, c_int],
    doc='glXBindSwapBarrierSGIX( POINTER(Display)(), GLXDrawable(None), c_int(None) ) -> None',
    argNames=['', 'None', 'None'],
)

glXQueryMaxSwapBarriersSGIX = platform.createBaseFunction(
    'glXQueryMaxSwapBarriersSGIX', dll=platform.GL, resultType=c_int,
    argTypes=[POINTER(Display), c_int, POINTER(c_int)],
    doc='glXQueryMaxSwapBarriersSGIX( POINTER(Display)(), c_int(None), POINTER(c_int)() ) -> c_int',
    argNames=['', 'None', ''],
)

# SUN_get_transparent_index (GL/glxext.h:578)
GLX_SUN_get_transparent_index = constant.Constant( 'GLX_SUN_get_transparent_index', 1 )
glXGetTransparentIndexSUN = platform.createBaseFunction(
    'glXGetTransparentIndexSUN', dll=platform.GL, resultType=c_int,
    argTypes=[POINTER(Display), Window, Window, POINTER(c_long)],
    doc='glXGetTransparentIndexSUN( POINTER(Display)(), Window(None), Window(None), POINTER(c_long)() ) -> c_int',
    argNames=['', 'None', 'None', ''],
)

# MESA_copy_sub_buffer (GL/glxext.h:586)
GLX_MESA_copy_sub_buffer = constant.Constant( 'GLX_MESA_copy_sub_buffer', 1 )
glXCopySubBufferMESA = platform.createBaseFunction(
    'glXCopySubBufferMESA', dll=platform.GL, resultType=None,
    argTypes=[POINTER(Display), GLXDrawable, c_int, c_int, c_int, c_int],
    doc='glXCopySubBufferMESA( POINTER(Display)(), GLXDrawable(None), c_int(None), c_int(None), c_int(None), c_int(None) ) -> None',
    argNames=['', 'None', 'None', 'None', 'None', 'None'],
)

# MESA_pixmap_colormap (GL/glxext.h:594)
GLX_MESA_pixmap_colormap = constant.Constant( 'GLX_MESA_pixmap_colormap', 1 )
Colormap = XID 	# /usr/include/X11/X.h:104
glXCreateGLXPixmapMESA = platform.createBaseFunction(
    'glXCreateGLXPixmapMESA', dll=platform.GL, resultType=GLXPixmap,
    argTypes=[POINTER(Display), POINTER(XVisualInfo), Pixmap, Colormap],
    doc='glXCreateGLXPixmapMESA( POINTER(Display)(), POINTER(XVisualInfo)(), Pixmap(None), Colormap(None) ) -> GLXPixmap',
    argNames=['', '', 'None', 'None'],
)

# MESA_release_buffers (GL/glxext.h:602)
GLX_MESA_release_buffers = constant.Constant( 'GLX_MESA_release_buffers', 1 )
glXReleaseBuffersMESA = platform.createBaseFunction(
    'glXReleaseBuffersMESA', dll=platform.GL, resultType=c_int,
    argTypes=[POINTER(Display), GLXDrawable],
    doc='glXReleaseBuffersMESA( POINTER(Display)(), GLXDrawable(None) ) -> c_int',
    argNames=['', 'None'],
)

# MESA_set_3dfx_mode (GL/glxext.h:610)
GLX_MESA_set_3dfx_mode = constant.Constant( 'GLX_MESA_set_3dfx_mode', 1 )
glXSet3DfxModeMESA = platform.createBaseFunction(
    'glXSet3DfxModeMESA', dll=platform.GL, resultType=c_int,
    argTypes=[c_int],
    doc='glXSet3DfxModeMESA( c_int(None) ) -> c_int',
    argNames=['None'],
)

# SGIX_visual_select_group (GL/glxext.h:618)
GLX_SGIX_visual_select_group = constant.Constant( 'GLX_SGIX_visual_select_group', 1 )
# OML_swap_method (GL/glxext.h:622)
GLX_OML_swap_method = constant.Constant( 'GLX_OML_swap_method', 1 )
# OML_sync_control (GL/glxext.h:626)
GLX_OML_sync_control = constant.Constant( 'GLX_OML_sync_control', 1 )
glXGetSyncValuesOML = platform.createBaseFunction(
    'glXGetSyncValuesOML', dll=platform.GL, resultType=c_int,
    argTypes=[POINTER(Display), GLXDrawable, POINTER(c_int64), POINTER(c_int64), POINTER(c_int64)],
    doc='glXGetSyncValuesOML( POINTER(Display)(), GLXDrawable(None), POINTER(c_int64)(), POINTER(c_int64)(), POINTER(c_int64)() ) -> c_int',
    argNames=['', 'None', '', '', ''],
)

glXGetMscRateOML = platform.createBaseFunction(
    'glXGetMscRateOML', dll=platform.GL, resultType=c_int,
    argTypes=[POINTER(Display), GLXDrawable, POINTER(c_int32), POINTER(c_int32)],
    doc='glXGetMscRateOML( POINTER(Display)(), GLXDrawable(None), POINTER(c_int32)(), POINTER(c_int32)() ) -> c_int',
    argNames=['', 'None', '', ''],
)

glXSwapBuffersMscOML = platform.createBaseFunction(
    'glXSwapBuffersMscOML', dll=platform.GL, resultType=c_int64,
    argTypes=[POINTER(Display), GLXDrawable, c_int64, c_int64, c_int64],
    doc='glXSwapBuffersMscOML( POINTER(Display)(), GLXDrawable(None), c_int64(None), c_int64(None), c_int64(None) ) -> c_int64',
    argNames=['', 'None', 'None', 'None', 'None'],
)

glXWaitForMscOML = platform.createBaseFunction(
    'glXWaitForMscOML', dll=platform.GL, resultType=c_int,
    argTypes=[POINTER(Display), GLXDrawable, c_int64, c_int64, c_int64, POINTER(c_int64), POINTER(c_int64), POINTER(c_int64)],
    doc='glXWaitForMscOML( POINTER(Display)(), GLXDrawable(None), c_int64(None), c_int64(None), c_int64(None), POINTER(c_int64)(), POINTER(c_int64)(), POINTER(c_int64)() ) -> c_int',
    argNames=['', 'None', 'None', 'None', 'None', '', '', ''],
)

glXWaitForSbcOML = platform.createBaseFunction(
    'glXWaitForSbcOML', dll=platform.GL, resultType=c_int,
    argTypes=[POINTER(Display), GLXDrawable, c_int64, POINTER(c_int64), POINTER(c_int64), POINTER(c_int64)],
    doc='glXWaitForSbcOML( POINTER(Display)(), GLXDrawable(None), c_int64(None), POINTER(c_int64)(), POINTER(c_int64)(), POINTER(c_int64)() ) -> c_int',
    argNames=['', 'None', 'None', '', '', ''],
)

# NV_float_buffer (GL/glxext.h:642)
GLX_NV_float_buffer = constant.Constant( 'GLX_NV_float_buffer', 1 )
# SGIX_hyperpipe (GL/glxext.h:646)
GLX_SGIX_hyperpipe = constant.Constant( 'GLX_SGIX_hyperpipe', 1 )
class struct_anon_107(Structure):
    __slots__ = [
        'pipeName',
        'networkId',
    ]
struct_anon_107._fields_ = [
    ('pipeName', c_char * 80),
    ('networkId', c_int),
]

GLXHyperpipeNetworkSGIX = struct_anon_107 	# GL/glxext.h:652
glXQueryHyperpipeNetworkSGIX = platform.createBaseFunction(
    'glXQueryHyperpipeNetworkSGIX', dll=platform.GL, resultType=POINTER(GLXHyperpipeNetworkSGIX),
    argTypes=[POINTER(Display), POINTER(c_int)],
    doc='glXQueryHyperpipeNetworkSGIX( POINTER(Display)(), POINTER(c_int)() ) -> POINTER(GLXHyperpipeNetworkSGIX)',
    argNames=['', ''],
)

class struct_anon_108(Structure):
    __slots__ = [
        'pipeName',
        'channel',
        'participationType',
        'timeSlice',
    ]
struct_anon_108._fields_ = [
    ('pipeName', c_char * 80),
    ('channel', c_int),
    ('participationType', c_uint),
    ('timeSlice', c_int),
]

GLXHyperpipeConfigSGIX = struct_anon_108 	# GL/glxext.h:660
glXHyperpipeConfigSGIX = platform.createBaseFunction(
    'glXHyperpipeConfigSGIX', dll=platform.GL, resultType=c_int,
    argTypes=[POINTER(Display), c_int, c_int, POINTER(GLXHyperpipeConfigSGIX), POINTER(c_int)],
    doc='glXHyperpipeConfigSGIX( POINTER(Display)(), c_int(None), c_int(None), POINTER(GLXHyperpipeConfigSGIX)(), POINTER(c_int)() ) -> c_int',
    argNames=['', 'None', 'None', '', ''],
)

glXQueryHyperpipeConfigSGIX = platform.createBaseFunction(
    'glXQueryHyperpipeConfigSGIX', dll=platform.GL, resultType=POINTER(GLXHyperpipeConfigSGIX),
    argTypes=[POINTER(Display), c_int, POINTER(c_int)],
    doc='glXQueryHyperpipeConfigSGIX( POINTER(Display)(), c_int(None), POINTER(c_int)() ) -> POINTER(GLXHyperpipeConfigSGIX)',
    argNames=['', 'None', ''],
)

glXDestroyHyperpipeConfigSGIX = platform.createBaseFunction(
    'glXDestroyHyperpipeConfigSGIX', dll=platform.GL, resultType=c_int,
    argTypes=[POINTER(Display), c_int],
    doc='glXDestroyHyperpipeConfigSGIX( POINTER(Display)(), c_int(None) ) -> c_int',
    argNames=['', 'None'],
)

glXBindHyperpipeSGIX = platform.createBaseFunction(
    'glXBindHyperpipeSGIX', dll=platform.GL, resultType=c_int,
    argTypes=[POINTER(Display), c_int],
    doc='glXBindHyperpipeSGIX( POINTER(Display)(), c_int(None) ) -> c_int',
    argNames=['', 'None'],
)

glXQueryHyperpipeBestAttribSGIX = platform.createBaseFunction(
    'glXQueryHyperpipeBestAttribSGIX', dll=platform.GL, resultType=c_int,
    argTypes=[POINTER(Display), c_int, c_int, c_int, POINTER(None), POINTER(None)],
    doc='glXQueryHyperpipeBestAttribSGIX( POINTER(Display)(), c_int(None), c_int(None), c_int(None), POINTER(None)(), POINTER(None)() ) -> c_int',
    argNames=['', 'None', 'None', 'None', '', ''],
)

glXHyperpipeAttribSGIX = platform.createBaseFunction(
    'glXHyperpipeAttribSGIX', dll=platform.GL, resultType=c_int,
    argTypes=[POINTER(Display), c_int, c_int, c_int, POINTER(None)],
    doc='glXHyperpipeAttribSGIX( POINTER(Display)(), c_int(None), c_int(None), c_int(None), POINTER(None)() ) -> c_int',
    argNames=['', 'None', 'None', 'None', ''],
)

glXQueryHyperpipeAttribSGIX = platform.createBaseFunction(
    'glXQueryHyperpipeAttribSGIX', dll=platform.GL, resultType=c_int,
    argTypes=[POINTER(Display), c_int, c_int, c_int, POINTER(None)],
    doc='glXQueryHyperpipeAttribSGIX( POINTER(Display)(), c_int(None), c_int(None), c_int(None), POINTER(None)() ) -> c_int',
    argNames=['', 'None', 'None', 'None', ''],
)

# MESA_agp_offset (GL/glxext.h:693)
GLX_MESA_agp_offset = constant.Constant( 'GLX_MESA_agp_offset', 1 )
glXGetAGPOffsetMESA = platform.createBaseFunction(
    'glXGetAGPOffsetMESA', dll=platform.GL, resultType=c_uint,
    argTypes=[POINTER(None)],
    doc='glXGetAGPOffsetMESA( POINTER(None)() ) -> c_uint',
    argNames=[''],
)

# NV_vertex_array_range (/usr/include/GL/glx.h:359)
# ARB_render_texture (/usr/include/GL/glx.h:374)
# NV_float_buffer (/usr/include/GL/glx.h:387)
# MESA_swap_frame_usage (/usr/include/GL/glx.h:399)
# MESA_swap_control (/usr/include/GL/glx.h:419)
# EXT_texture_from_pixmap (/usr/include/GL/glx.h:436)

__all__ = ['GLX_GLXEXT_VERSION', 'GLX_SAMPLE_BUFFERS_ARB', 'GLX_SAMPLES_ARB',
'GLX_RGBA_FLOAT_TYPE_ARB', 'GLX_RGBA_FLOAT_BIT_ARB',
'GLX_SAMPLE_BUFFERS_SGIS', 'GLX_SAMPLES_SGIS', 'GLX_X_VISUAL_TYPE_EXT',
'GLX_TRANSPARENT_TYPE_EXT', 'GLX_TRANSPARENT_INDEX_VALUE_EXT',
'GLX_TRANSPARENT_RED_VALUE_EXT', 'GLX_TRANSPARENT_GREEN_VALUE_EXT',
'GLX_TRANSPARENT_BLUE_VALUE_EXT', 'GLX_TRANSPARENT_ALPHA_VALUE_EXT',
'GLX_NONE_EXT', 'GLX_TRUE_COLOR_EXT', 'GLX_DIRECT_COLOR_EXT',
'GLX_PSEUDO_COLOR_EXT', 'GLX_STATIC_COLOR_EXT', 'GLX_GRAY_SCALE_EXT',
'GLX_STATIC_GRAY_EXT', 'GLX_TRANSPARENT_RGB_EXT', 'GLX_TRANSPARENT_INDEX_EXT',
'GLX_VISUAL_CAVEAT_EXT', 'GLX_SLOW_VISUAL_EXT',
'GLX_NON_CONFORMANT_VISUAL_EXT', 'GLX_SHARE_CONTEXT_EXT', 'GLX_VISUAL_ID_EXT',
'GLX_SCREEN_EXT', 'GLX_WINDOW_BIT_SGIX', 'GLX_PIXMAP_BIT_SGIX',
'GLX_RGBA_BIT_SGIX', 'GLX_COLOR_INDEX_BIT_SGIX', 'GLX_DRAWABLE_TYPE_SGIX',
'GLX_RENDER_TYPE_SGIX', 'GLX_X_RENDERABLE_SGIX', 'GLX_FBCONFIG_ID_SGIX',
'GLX_RGBA_TYPE_SGIX', 'GLX_COLOR_INDEX_TYPE_SGIX', 'GLX_PBUFFER_BIT_SGIX',
'GLX_BUFFER_CLOBBER_MASK_SGIX', 'GLX_FRONT_LEFT_BUFFER_BIT_SGIX',
'GLX_FRONT_RIGHT_BUFFER_BIT_SGIX', 'GLX_BACK_LEFT_BUFFER_BIT_SGIX',
'GLX_BACK_RIGHT_BUFFER_BIT_SGIX', 'GLX_AUX_BUFFERS_BIT_SGIX',
'GLX_DEPTH_BUFFER_BIT_SGIX', 'GLX_STENCIL_BUFFER_BIT_SGIX',
'GLX_ACCUM_BUFFER_BIT_SGIX', 'GLX_SAMPLE_BUFFERS_BIT_SGIX',
'GLX_MAX_PBUFFER_WIDTH_SGIX', 'GLX_MAX_PBUFFER_HEIGHT_SGIX',
'GLX_MAX_PBUFFER_PIXELS_SGIX', 'GLX_OPTIMAL_PBUFFER_WIDTH_SGIX',
'GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX', 'GLX_PRESERVED_CONTENTS_SGIX',
'GLX_LARGEST_PBUFFER_SGIX', 'GLX_WIDTH_SGIX', 'GLX_HEIGHT_SGIX',
'GLX_EVENT_MASK_SGIX', 'GLX_DAMAGED_SGIX', 'GLX_SAVED_SGIX',
'GLX_WINDOW_SGIX', 'GLX_PBUFFER_SGIX', 'GLX_SYNC_FRAME_SGIX',
'GLX_SYNC_SWAP_SGIX', 'GLX_DIGITAL_MEDIA_PBUFFER_SGIX',
'GLX_BLENDED_RGBA_SGIS', 'GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS',
'GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS', 'GLX_SAMPLE_BUFFERS_3DFX',
'GLX_SAMPLES_3DFX', 'GLX_3DFX_WINDOW_MODE_MESA',
'GLX_3DFX_FULLSCREEN_MODE_MESA', 'GLX_VISUAL_SELECT_GROUP_SGIX',
'GLX_SWAP_METHOD_OML', 'GLX_SWAP_EXCHANGE_OML', 'GLX_SWAP_COPY_OML',
'GLX_SWAP_UNDEFINED_OML', 'GLX_FLOAT_COMPONENTS_NV',
'GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX', 'GLX_BAD_HYPERPIPE_CONFIG_SGIX',
'GLX_BAD_HYPERPIPE_SGIX', 'GLX_HYPERPIPE_DISPLAY_PIPE_SGIX',
'GLX_HYPERPIPE_RENDER_PIPE_SGIX', 'GLX_PIPE_RECT_SGIX',
'GLX_PIPE_RECT_LIMITS_SGIX', 'GLX_HYPERPIPE_STEREO_SGIX',
'GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX', 'GLX_HYPERPIPE_ID_SGIX',
'GLX_ARB_multisample', 'GLX_ARB_fbconfig_float', 'GLX_SGIS_multisample',
'GLX_EXT_visual_info', 'GLX_SGI_swap_control', 'glXSwapIntervalSGI',
'GLX_SGI_video_sync', 'glXGetVideoSyncSGI', 'glXWaitVideoSyncSGI',
'GLX_SGI_make_current_read', 'glXMakeCurrentReadSGI',
'glXGetCurrentReadDrawableSGI', 'GLX_SGIX_video_source',
'GLX_EXT_visual_rating', 'GLX_EXT_import_context', 'glXGetCurrentDisplayEXT',
'glXQueryContextInfoEXT', 'glXGetContextIDEXT', 'glXImportContextEXT',
'glXFreeContextEXT', 'GLX_SGIX_fbconfig', 'glXGetFBConfigAttribSGIX',
'glXChooseFBConfigSGIX', 'glXCreateGLXPixmapWithConfigSGIX',
'glXCreateContextWithConfigSGIX', 'glXGetVisualFromFBConfigSGIX',
'glXGetFBConfigFromVisualSGIX', 'GLX_SGIX_pbuffer', 'glXCreateGLXPbufferSGIX',
'glXDestroyGLXPbufferSGIX', 'glXQueryGLXPbufferSGIX', 'glXSelectEventSGIX',
'glXGetSelectedEventSGIX', 'GLX_SGI_cushion', 'glXCushionSGI',
'GLX_SGIX_video_resize', 'glXBindChannelToWindowSGIX', 'glXChannelRectSGIX',
'glXQueryChannelRectSGIX', 'glXQueryChannelDeltasSGIX',
'glXChannelRectSyncSGIX', 'GLX_SGIX_dmbuffer', 'GLX_SGIX_swap_group',
'glXJoinSwapGroupSGIX', 'GLX_SGIX_swap_barrier', 'glXBindSwapBarrierSGIX',
'glXQueryMaxSwapBarriersSGIX', 'GLX_SUN_get_transparent_index',
'glXGetTransparentIndexSUN', 'GLX_MESA_copy_sub_buffer',
'glXCopySubBufferMESA', 'GLX_MESA_pixmap_colormap', 'glXCreateGLXPixmapMESA',
'GLX_MESA_release_buffers', 'glXReleaseBuffersMESA', 'GLX_MESA_set_3dfx_mode',
'glXSet3DfxModeMESA', 'GLX_SGIX_visual_select_group', 'GLX_OML_swap_method',
'GLX_OML_sync_control', 'glXGetSyncValuesOML', 'glXGetMscRateOML',
'glXSwapBuffersMscOML', 'glXWaitForMscOML', 'glXWaitForSbcOML',
'GLX_NV_float_buffer', 'GLX_SGIX_hyperpipe', 'glXQueryHyperpipeNetworkSGIX',
'glXHyperpipeConfigSGIX', 'glXQueryHyperpipeConfigSGIX',
'glXDestroyHyperpipeConfigSGIX', 'glXBindHyperpipeSGIX',
'glXQueryHyperpipeBestAttribSGIX', 'glXHyperpipeAttribSGIX',
'glXQueryHyperpipeAttribSGIX', 'GLX_MESA_agp_offset', 'glXGetAGPOffsetMESA']
# END GENERATED CONTENT (do not edit above this line)


