# -*- coding: iso-8859-1 -*-
"""Raw (C-style) API for OpenGL.GLX

Automatically generated by the generateraw script, do not edit!
"""
from OpenGL.raw.GLX.constants import *

from ctypes import *
from OpenGL import platform, arrays
from OpenGL.constant import Constant
from OpenGL import constants as GLconstants
GLvoid = GLconstants.GLvoid

from OpenGL.constants import GL_BYTE
from OpenGL.constants import GL_DOUBLE
from OpenGL.constants import GL_FALSE
from OpenGL.constants import GL_FLOAT
from OpenGL.constants import GL_INT
from OpenGL.constants import GL_SHORT
from OpenGL.constants import GL_TRUE
from OpenGL.constants import GL_UNSIGNED_BYTE
from OpenGL.constants import GL_UNSIGNED_INT
from OpenGL.constants import GL_UNSIGNED_SHORT
from OpenGL.constants import GLbitfield
from OpenGL.constants import GLboolean
from OpenGL.constants import GLbyte
from OpenGL.constants import GLchar
from OpenGL.constants import GLcharARB
from OpenGL.constants import GLclampd
from OpenGL.constants import GLclampf
from OpenGL.constants import GLdouble
from OpenGL.constants import GLenum
from OpenGL.constants import GLfloat
from OpenGL.constants import GLhalfARB
from OpenGL.constants import GLhalfNV
from OpenGL.constants import GLhandleARB
from OpenGL.constants import GLint
from OpenGL.constants import GLintptr
from OpenGL.constants import GLintptrARB
from OpenGL.constants import GLshort
from OpenGL.constants import GLsizei
from OpenGL.constants import GLsizeiptr
from OpenGL.constants import GLsizeiptrARB
from OpenGL.constants import GLubyte
from OpenGL.constants import GLuint
from OpenGL.constants import GLushort
STRING = c_char_p
WSTRING = c_wchar_p
from OpenGL.constants import size_t


#APIENTRY = GLAPIENTRY # alias

Atom = c_ulong
BIG_ENDIAN = __BIG_ENDIAN # alias
__BYTE_ORDER = __LITTLE_ENDIAN # alias
BYTE_ORDER = __BYTE_ORDER # alias
#def BitmapBitOrder(dpy): return (((_XPrivDisplay)dpy)->bitmap_bit_order) # macro
#def BitmapPad(dpy): return (((_XPrivDisplay)dpy)->bitmap_pad) # macro
#def BitmapUnit(dpy): return (((_XPrivDisplay)dpy)->bitmap_unit) # macro
#def BlackPixel(dpy,scr): return (ScreenOfDisplay(dpy,scr)->black_pixel) # macro
#def BlackPixelOfScreen(s): return ((s)->black_pixel) # macro
#Bool = int # alias
#def CellsOfScreen(s): return (DefaultVisualOfScreen((s))->map_entries) # macro
XID = c_ulong
Colormap = XID
#def ConnectionNumber(dpy): return (((_XPrivDisplay)dpy)->fd) # macro
Cursor = XID
#def DefaultColormap(dpy,scr): return (ScreenOfDisplay(dpy,scr)->cmap) # macro
#def DefaultColormapOfScreen(s): return ((s)->cmap) # macro
#def DefaultDepth(dpy,scr): return (ScreenOfDisplay(dpy,scr)->root_depth) # macro
#def DefaultDepthOfScreen(s): return ((s)->root_depth) # macro
#def DefaultGC(dpy,scr): return (ScreenOfDisplay(dpy,scr)->default_gc) # macro
#def DefaultGCOfScreen(s): return ((s)->default_gc) # macro
#def DefaultRootWindow(dpy): return (ScreenOfDisplay(dpy,DefaultScreen(dpy))->root) # macro
#def DefaultScreen(dpy): return (((_XPrivDisplay)dpy)->default_screen) # macro
def DefaultScreenOfDisplay(dpy): return ScreenOfDisplay(dpy,DefaultScreen(dpy)) # macro
#def DefaultVisual(dpy,scr): return (ScreenOfDisplay(dpy,scr)->root_visual) # macro
#def DefaultVisualOfScreen(s): return ((s)->root_visual) # macro
class Depth(Structure):
    pass

class Visual(Structure):
    pass
Depth._fields_ = [
    # /usr/include/X11/Xlib.h 279
    ('depth', c_int),
    ('nvisuals', c_int),
    ('visuals', POINTER(Visual)),
]
class _XDisplay(Structure):
    pass
Display = _XDisplay
#def DisplayCells(dpy,scr): return (DefaultVisual(dpy,scr)->map_entries) # macro
#def DisplayHeight(dpy,scr): return (ScreenOfDisplay(dpy,scr)->height) # macro
#def DisplayHeightMM(dpy,scr): return (ScreenOfDisplay(dpy,scr)->mheight) # macro
#def DisplayOfScreen(s): return ((s)->display) # macro
#def DisplayPlanes(dpy,scr): return (ScreenOfDisplay(dpy,scr)->root_depth) # macro
#def DisplayString(dpy): return (((_XPrivDisplay)dpy)->display_name) # macro
#def DisplayWidth(dpy,scr): return (ScreenOfDisplay(dpy,scr)->width) # macro
#def DisplayWidthMM(dpy,scr): return (ScreenOfDisplay(dpy,scr)->mwidth) # macro
#def DoesBackingStore(s): return ((s)->backing_store) # macro
#def DoesSaveUnders(s): return ((s)->save_unders) # macro
Drawable = XID
#def EventMaskOfScreen(s): return ((s)->root_input_mask) # macro
def FD_CLR(fd,fdsetp): return __FD_CLR (fd, fdsetp) # macro
def FD_ISSET(fd,fdsetp): return __FD_ISSET (fd, fdsetp) # macro
def FD_SET(fd,fdsetp): return __FD_SET (fd, fdsetp) # macro
FD_SETSIZE = __FD_SETSIZE # alias
def FD_ZERO(fdsetp): return __FD_ZERO (fdsetp) # macro
Font = XID
class _XGC(Structure):
    pass
GC = POINTER(_XGC)
GContext = XID
class GLXBufferClobberEventSGIX(Structure):
    pass

GLXDrawable = XID

GLXBufferClobberEventSGIX._fields_ = [
    # /usr/include/GL/glxext.h 340
    ('type', c_int),
    ('serial', c_ulong),
    ('send_event', c_int),
    ('display', POINTER(Display)),
    ('drawable', GLXDrawable),
    ('event_type', c_int),
    ('draw_type', c_int),
    ('mask', c_uint),
    ('x', c_int),
    ('y', c_int),
    ('width', c_int),
    ('height', c_int),
    ('count', c_int),
]
class __GLXcontextRec(Structure):
    pass
GLXContext = POINTER(__GLXcontextRec)
GLXContextID = XID
class __GLXEvent(Union):
    pass
GLXEvent = __GLXEvent
class __GLXFBConfigRec(Structure):
    pass
GLXFBConfig = POINTER(__GLXFBConfigRec)
GLXFBConfigID = XID
GLXFBConfigIDSGIX = XID
GLXFBConfigSGIX = POINTER(__GLXFBConfigRec)
class GLXHyperpipeConfigSGIX(Structure):
    pass

GLXHyperpipeConfigSGIX._fields_ = [
    # /usr/include/GL/glxext.h 660
    ('pipeName', c_char * 80),
    ('channel', c_int),
    ('participationType', c_uint),
    ('timeSlice', c_int),
]
class GLXHyperpipeNetworkSGIX(Structure):
    pass
GLXHyperpipeNetworkSGIX._fields_ = [
    # /usr/include/GL/glxext.h 652
    ('pipeName', c_char * 80),
    ('networkId', c_int),
]
GLXPbuffer = XID
class GLXPbufferClobberEvent(Structure):
    pass
GLXPbufferClobberEvent._fields_ = [
    # /usr/include/GL/glx.h 489
    ('event_type', c_int),
    ('draw_type', c_int),
    ('serial', c_ulong),
    ('send_event', c_int),
    ('display', POINTER(Display)),
    ('drawable', GLXDrawable),
    ('buffer_mask', c_uint),
    ('aux_buffer', c_uint),
    ('x', c_int),
    ('y', c_int),
    ('width', c_int),
    ('height', c_int),
    ('count', c_int),
]
GLXPbufferSGIX = XID
class GLXPipeRect(Structure):
    pass
GLXPipeRect._fields_ = [
    # /usr/include/GL/glxext.h 666
    ('pipeName', c_char * 80),
    ('srcXOrigin', c_int),
    ('srcYOrigin', c_int),
    ('srcWidth', c_int),
    ('srcHeight', c_int),
    ('destXOrigin', c_int),
    ('destYOrigin', c_int),
    ('destWidth', c_int),
    ('destHeight', c_int),
]
class GLXPipeRectLimits(Structure):
    pass
GLXPipeRectLimits._fields_ = [
    # /usr/include/GL/glxext.h 671
    ('pipeName', c_char * 80),
    ('XOrigin', c_int),
    ('YOrigin', c_int),
    ('maxHeight', c_int),
    ('maxWidth', c_int),
]
GLXPixmap = XID
GLXVideoSourceSGIX = XID
GLXWindow = XID
GLX_BACK_EXT = GLX_BACK_LEFT_EXT # alias
GLX_FRONT_EXT = GLX_FRONT_LEFT_EXT # alias

GLvoid = None
GLprogramcallbackMESA = CFUNCTYPE(None, c_uint, POINTER(GLvoid))
#def HeightMMOfScreen(s): return ((s)->mheight) # macro
#def HeightOfScreen(s): return ((s)->height) # macro
#def ImageByteOrder(dpy): return (((_XPrivDisplay)dpy)->byte_order) # macro
#def IsCursorKey(keysym): return (((KeySym)(keysym) >= XK_Home) && ((KeySym)(keysym) < XK_Select)) # macro
#def IsFunctionKey(keysym): return (((KeySym)(keysym) >= XK_F1) && ((KeySym)(keysym) <= XK_F35)) # macro
#def IsKeypadKey(keysym): return (((KeySym)(keysym) >= XK_KP_Space) && ((KeySym)(keysym) <= XK_KP_Equal)) # macro
#def IsMiscFunctionKey(keysym): return (((KeySym)(keysym) >= XK_Select) && ((KeySym)(keysym) <= XK_Break)) # macro
#def IsModifierKey(keysym): return ((((KeySym)(keysym) >= XK_Shift_L) && ((KeySym)(keysym) <= XK_Hyper_R)) || (((KeySym)(keysym) >= XK_ISO_Lock) && ((KeySym)(keysym) <= XK_ISO_Last_Group_Lock)) || ((KeySym)(keysym) == XK_Mode_switch) || ((KeySym)(keysym) == XK_Num_Lock)) # macro
#def IsPFKey(keysym): return (((KeySym)(keysym) >= XK_KP_F1) && ((KeySym)(keysym) <= XK_KP_F4)) # macro
#def IsPrivateKeypadKey(keysym): return (((KeySym)(keysym) >= 0x11000000) && ((KeySym)(keysym) <= 0x1100FFFF)) # macro

KeyCode = c_ubyte
KeySym = XID
LITTLE_ENDIAN = __LITTLE_ENDIAN # alias
#def LastKnownRequestProcessed(dpy): return (((_XPrivDisplay)dpy)->last_request_read) # macro
Mask = c_ulong
#def MaxCmapsOfScreen(s): return ((s)->max_maps) # macro
#def MinCmapsOfScreen(s): return ((s)->min_maps) # macro
class N10XSizeHints4DOT_93E(Structure):
    pass
N10XSizeHints4DOT_93E._fields_ = [
    # /usr/include/X11/Xutil.h 82
    ('x', c_int),
    ('y', c_int),
]
class N14pthread_cond_t3DOT_7E(Structure):
    pass


N14pthread_cond_t3DOT_7E._fields_ = [
    # /usr/include/gentoo-multilib/amd64/bits/pthreadtypes.h 118
    ('__lock', c_int),
    ('__futex', c_uint),
    ('__total_seq', c_ulonglong),
    ('__wakeup_seq', c_ulonglong),
    ('__woken_seq', c_ulonglong),
    ('__mutex', c_void_p),
    ('__nwaiters', c_uint),
    ('__broadcast_seq', c_uint),
]
class N16pthread_rwlock_t4DOT_10E(Structure):
    pass
N16pthread_rwlock_t4DOT_10E._fields_ = [
    # /usr/include/gentoo-multilib/amd64/bits/pthreadtypes.h 154
    ('__lock', c_int),
    ('__nr_readers', c_uint),
    ('__readers_wakeup', c_uint),
    ('__writer_wakeup', c_uint),
    ('__nr_readers_queued', c_uint),
    ('__nr_writers_queued', c_uint),
    ('__writer', c_int),
    ('__pad1', c_int),
    ('__pad2', c_ulong),
    ('__pad3', c_ulong),
    ('__flags', c_uint),
]
class N19XClientMessageEvent4DOT_64E(Union):
    pass



N19XClientMessageEvent4DOT_64E._fields_ = [
    # /usr/include/X11/Xlib.h 937
    ('b', c_char * 20),
    ('s', c_short * 10),
    ('l', c_long * 5),
]
class N24_XIMStringConversionText4DOT_86E(Union):
    pass


N24_XIMStringConversionText4DOT_86E._fields_ = [
    # /usr/include/X11/Xlib.h 1298
    ('mbs', STRING),
    ('wcs', WSTRING),
]
class N28_XIMStatusDrawCallbackStruct4DOT_90E(Union):
    pass
class _XIMText(Structure):
    pass
XIMText = _XIMText
Pixmap = XID
N28_XIMStatusDrawCallbackStruct4DOT_90E._fields_ = [
    # /usr/include/X11/Xlib.h 1362
    ('text', POINTER(XIMText)),
    ('bitmap', Pixmap),
]
class N8_XIMText4DOT_85E(Union):
    pass
N8_XIMText4DOT_85E._fields_ = [
    # /usr/include/X11/Xlib.h 1264
    ('multi_byte', STRING),
    ('wide_char', WSTRING),
]
NFDBITS = __NFDBITS # alias
#NULL = __null # alias
#def NextRequest(dpy): return (((_XPrivDisplay)dpy)->request + 1) # macro
PDP_ENDIAN = __PDP_ENDIAN # alias
#def PlanesOfScreen(s): return ((s)->root_depth) # macro
#def ProtocolRevision(dpy): return (((_XPrivDisplay)dpy)->proto_minor_version) # macro
#def ProtocolVersion(dpy): return (((_XPrivDisplay)dpy)->proto_major_version) # macro
#def QLength(dpy): return (((_XPrivDisplay)dpy)->qlen) # macro
class _XRegion(Structure):
    pass
Region = POINTER(_XRegion)
#def RootWindow(dpy,scr): return (ScreenOfDisplay(dpy,scr)->root) # macro
#def RootWindowOfScreen(s): return ((s)->root) # macro
class Screen(Structure):
    pass
class _XExtData(Structure):
    pass
XExtData = _XExtData

Window = XID

Screen._fields_ = [
    # /usr/include/X11/Xlib.h 307
    ('ext_data', POINTER(XExtData)),
    ('display', POINTER(_XDisplay)),
    ('root', Window),
    ('width', c_int),
    ('height', c_int),
    ('mwidth', c_int),
    ('mheight', c_int),
    ('ndepths', c_int),
    ('depths', POINTER(Depth)),
    ('root_depth', c_int),
    ('root_visual', POINTER(Visual)),
    ('default_gc', GC),
    ('cmap', Colormap),
    ('white_pixel', c_ulong),
    ('black_pixel', c_ulong),
    ('max_maps', c_int),
    ('min_maps', c_int),
    ('backing_store', c_int),
    ('save_unders', c_int),
    ('root_input_mask', c_long),
]
#def ScreenCount(dpy): return (((_XPrivDisplay)dpy)->nscreens) # macro
class ScreenFormat(Structure):
    pass
ScreenFormat._fields_ = [
    # /usr/include/X11/Xlib.h 317
    ('ext_data', POINTER(XExtData)),
    ('depth', c_int),
    ('bits_per_pixel', c_int),
    ('scanline_pad', c_int),
]
#def ScreenOfDisplay(dpy,scr): return (&((_XPrivDisplay)dpy)->screens[scr]) # macro
#def ServerVendor(dpy): return (((_XPrivDisplay)dpy)->vendor) # macro
#Status = int # alias
Time = c_ulong
#def VendorRelease(dpy): return (((_XPrivDisplay)dpy)->release) # macro
VisualID = c_ulong
Visual._fields_ = [
    # /usr/include/X11/Xlib.h 270
    ('ext_data', POINTER(XExtData)),
    ('visualid', VisualID),
    ('c_class', c_int),
    ('red_mask', c_ulong),
    ('green_mask', c_ulong),
    ('blue_mask', c_ulong),
    ('bits_per_rgb', c_int),
    ('map_entries', c_int),
]
#def WhitePixel(dpy,scr): return (ScreenOfDisplay(dpy,scr)->white_pixel) # macro
#def WhitePixelOfScreen(s): return ((s)->white_pixel) # macro
#def WidthMMOfScreen(s): return ((s)->mwidth) # macro
#def WidthOfScreen(s): return ((s)->width) # macro

# /usr/include/X11/Xlib.h 1937
XActivateScreenSaver = platform.createBaseFunction( 
	'XActivateScreenSaver', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display)],
	doc='XActivateScreenSaver( POINTER(Display)(None) ) -> c_int', 
	argNames=('None',),
)

XPointer = STRING
XConnectionWatchProc = CFUNCTYPE(None, POINTER(Display), STRING, c_int, c_int, POINTER(XPointer))
# /usr/include/X11/Xlib.h 3975
XAddConnectionWatch = platform.createBaseFunction( 
	'XAddConnectionWatch', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),XConnectionWatchProc,XPointer],
	doc='XAddConnectionWatch( POINTER(Display)(None), XConnectionWatchProc(None), XPointer(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)

class XExtCodes(Structure):
    pass

# /usr/include/X11/Xlib.h 1757
XAddExtension = platform.createBaseFunction( 
	'XAddExtension', dll=platform.GL, resultType=POINTER(XExtCodes), 
	argTypes=[POINTER(Display)],
	doc='XAddExtension( POINTER(Display)(None) ) -> POINTER(XExtCodes)', 
	argNames=('None',),
)

class XHostAddress(Structure):
    pass
# /usr/include/X11/Xlib.h 1942
XAddHost = platform.createBaseFunction( 
	'XAddHost', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),POINTER(XHostAddress)],
	doc='XAddHost( POINTER(Display)(None), POINTER(XHostAddress)(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 1948
XAddHosts = platform.createBaseFunction( 
	'XAddHosts', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),POINTER(XHostAddress),c_int],
	doc='XAddHosts( POINTER(Display)(None), POINTER(XHostAddress)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)

#def XAddPixel(ximage,value): return ((*((ximage)->f.add_pixel))((ximage), (value))) # macro

# /usr/include/X11/Xlib.h 1953
XAddToExtensionList = platform.createBaseFunction( 
	'XAddToExtensionList', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(POINTER(_XExtData)),POINTER(XExtData)],
	doc='XAddToExtensionList( POINTER(POINTER(_XExtData))(None), POINTER(XExtData)(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 1958
XAddToSaveSet = platform.createBaseFunction( 
	'XAddToSaveSet', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window],
	doc='XAddToSaveSet( POINTER(Display)(None), Window(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 1801
XAllPlanes = platform.createBaseFunction( 
	'XAllPlanes', dll=platform.GL, resultType=c_ulong, 
	argTypes=[],
	doc='XAllPlanes(  ) -> c_ulong', 
	argNames=(),
)

class XClassHint(Structure):
    pass

# /usr/include/X11/Xutil.h 362
XAllocClassHint = platform.createBaseFunction( 
	'XAllocClassHint', dll=platform.GL, resultType=POINTER(XClassHint), 
	argTypes=[],
	doc='XAllocClassHint(  ) -> POINTER(XClassHint)', 
	argNames=(),
)

class XColor(Structure):
    pass
# /usr/include/X11/Xlib.h 1964
XAllocColor = platform.createBaseFunction( 
	'XAllocColor', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Colormap,POINTER(XColor)],
	doc='XAllocColor( POINTER(Display)(None), Colormap(None), POINTER(XColor)(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1974
XAllocColorCells = platform.createBaseFunction( 
	'XAllocColorCells', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Colormap,c_int,POINTER(c_ulong),c_uint,POINTER(c_ulong),c_uint],
	doc='XAllocColorCells( POINTER(Display)(None), Colormap(None), c_int(None), POINTER(c_ulong)(None), c_uint(None), POINTER(c_ulong)(None), c_uint(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1988
XAllocColorPlanes = platform.createBaseFunction( 
	'XAllocColorPlanes', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Colormap,c_int,POINTER(c_ulong),c_int,c_int,c_int,c_int,POINTER(c_ulong),POINTER(c_ulong),POINTER(c_ulong)],
	doc='XAllocColorPlanes( POINTER(Display)(None), Colormap(None), c_int(None), POINTER(c_ulong)(None), c_int(None), c_int(None), c_int(None), c_int(None), POINTER(c_ulong)(None), POINTER(c_ulong)(None), POINTER(c_ulong)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None'),
)

#def XAllocID(dpy): return ((*((_XPrivDisplay)dpy)->resource_alloc)((dpy))) # macro
class XIconSize(Structure):
    pass

# /usr/include/X11/Xutil.h 366
XAllocIconSize = platform.createBaseFunction( 
	'XAllocIconSize', dll=platform.GL, resultType=POINTER(XIconSize), 
	argTypes=[],
	doc='XAllocIconSize(  ) -> POINTER(XIconSize)', 
	argNames=(),
)


# /usr/include/X11/Xlib.h 1996
XAllocNamedColor = platform.createBaseFunction( 
	'XAllocNamedColor', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Colormap,STRING,POINTER(XColor),POINTER(XColor)],
	doc='XAllocNamedColor( POINTER(Display)(None), Colormap(None), STRING(None), POINTER(XColor)(None), POINTER(XColor)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None'),
)

class XSizeHints(Structure):
    pass

# /usr/include/X11/Xutil.h 370
XAllocSizeHints = platform.createBaseFunction( 
	'XAllocSizeHints', dll=platform.GL, resultType=POINTER(XSizeHints), 
	argTypes=[],
	doc='XAllocSizeHints(  ) -> POINTER(XSizeHints)', 
	argNames=(),
)

class XStandardColormap(Structure):
    pass

# /usr/include/X11/Xutil.h 374
XAllocStandardColormap = platform.createBaseFunction( 
	'XAllocStandardColormap', dll=platform.GL, resultType=POINTER(XStandardColormap), 
	argTypes=[],
	doc='XAllocStandardColormap(  ) -> POINTER(XStandardColormap)', 
	argNames=(),
)

class XWMHints(Structure):
    pass

# /usr/include/X11/Xutil.h 378
XAllocWMHints = platform.createBaseFunction( 
	'XAllocWMHints', dll=platform.GL, resultType=POINTER(XWMHints), 
	argTypes=[],
	doc='XAllocWMHints(  ) -> POINTER(XWMHints)', 
	argNames=(),
)


# /usr/include/X11/Xlib.h 2002
XAllowEvents = platform.createBaseFunction( 
	'XAllowEvents', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),c_int,Time],
	doc='XAllowEvents( POINTER(Display)(None), c_int(None), Time(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)

class XAnyEvent(Structure):
    pass
XAnyEvent._fields_ = [
    # /usr/include/X11/Xlib.h 972
    ('type', c_int),
    ('serial', c_ulong),
    ('send_event', c_int),
    ('display', POINTER(Display)),
    ('window', Window),
]
class XArc(Structure):
    pass

XArc._fields_ = [
    # /usr/include/X11/Xlib.h 471
    ('x', c_short),
    ('y', c_short),
    ('width', c_ushort),
    ('height', c_ushort),
    ('angle1', c_short),
    ('angle2', c_short),
]

# /usr/include/X11/Xlib.h 2006
XAutoRepeatOff = platform.createBaseFunction( 
	'XAutoRepeatOff', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display)],
	doc='XAutoRepeatOff( POINTER(Display)(None) ) -> c_int', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 2010
XAutoRepeatOn = platform.createBaseFunction( 
	'XAutoRepeatOn', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display)],
	doc='XAutoRepeatOn( POINTER(Display)(None) ) -> c_int', 
	argNames=('None',),
)

class _XOC(Structure):
    pass
XFontSet = POINTER(_XOC)
# /usr/include/X11/Xlib.h 3632
XBaseFontNameListOfFontSet = platform.createBaseFunction( 
	'XBaseFontNameListOfFontSet', dll=platform.GL, resultType=STRING, 
	argTypes=[XFontSet],
	doc='XBaseFontNameListOfFontSet( XFontSet(None) ) -> STRING', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 2015
XBell = platform.createBaseFunction( 
	'XBell', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),c_int],
	doc='XBell( POINTER(Display)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 2019
XBitmapBitOrder = platform.createBaseFunction( 
	'XBitmapBitOrder', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display)],
	doc='XBitmapBitOrder( POINTER(Display)(None) ) -> c_int', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 2023
XBitmapPad = platform.createBaseFunction( 
	'XBitmapPad', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display)],
	doc='XBitmapPad( POINTER(Display)(None) ) -> c_int', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 2027
XBitmapUnit = platform.createBaseFunction( 
	'XBitmapUnit', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display)],
	doc='XBitmapUnit( POINTER(Display)(None) ) -> c_int', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 1794
XBlackPixel = platform.createBaseFunction( 
	'XBlackPixel', dll=platform.GL, resultType=c_ulong, 
	argTypes=[POINTER(Display),c_int],
	doc='XBlackPixel( POINTER(Display)(None), c_int(None) ) -> c_ulong', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 1804
XBlackPixelOfScreen = platform.createBaseFunction( 
	'XBlackPixelOfScreen', dll=platform.GL, resultType=c_ulong, 
	argTypes=[POINTER(Screen)],
	doc='XBlackPixelOfScreen( POINTER(Screen)(None) ) -> c_ulong', 
	argNames=('None',),
)

class XButtonEvent(Structure):
    pass
XButtonEvent._fields_ = [
    # /usr/include/X11/Xlib.h 621
    ('type', c_int),
    ('serial', c_ulong),
    ('send_event', c_int),
    ('display', POINTER(Display)),
    ('window', Window),
    ('root', Window),
    ('subwindow', Window),
    ('time', Time),
    ('x', c_int),
    ('y', c_int),
    ('x_root', c_int),
    ('y_root', c_int),
    ('state', c_uint),
    ('button', c_uint),
    ('same_screen', c_int),
]
XButtonPressedEvent = XButtonEvent
XButtonReleasedEvent = XButtonEvent

# /usr/include/X11/Xlib.h 2031
XCellsOfScreen = platform.createBaseFunction( 
	'XCellsOfScreen', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Screen)],
	doc='XCellsOfScreen( POINTER(Screen)(None) ) -> c_int', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 2038
XChangeActivePointerGrab = platform.createBaseFunction( 
	'XChangeActivePointerGrab', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),c_uint,Cursor,Time],
	doc='XChangeActivePointerGrab( POINTER(Display)(None), c_uint(None), Cursor(None), Time(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)

class XGCValues(Structure):
    pass
# /usr/include/X11/Xlib.h 2045
XChangeGC = platform.createBaseFunction( 
	'XChangeGC', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),GC,c_ulong,POINTER(XGCValues)],
	doc='XChangeGC( POINTER(Display)(None), GC(None), c_ulong(None), POINTER(XGCValues)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)

class XKeyboardControl(Structure):
    pass
# /usr/include/X11/Xlib.h 2051
XChangeKeyboardControl = platform.createBaseFunction( 
	'XChangeKeyboardControl', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),c_ulong,POINTER(XKeyboardControl)],
	doc='XChangeKeyboardControl( POINTER(Display)(None), c_ulong(None), POINTER(XKeyboardControl)(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2059
XChangeKeyboardMapping = platform.createBaseFunction( 
	'XChangeKeyboardMapping', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),c_int,c_int,POINTER(KeySym),c_int],
	doc='XChangeKeyboardMapping( POINTER(Display)(None), c_int(None), c_int(None), POINTER(KeySym)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2068
XChangePointerControl = platform.createBaseFunction( 
	'XChangePointerControl', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),c_int,c_int,c_int,c_int,c_int],
	doc='XChangePointerControl( POINTER(Display)(None), c_int(None), c_int(None), c_int(None), c_int(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2079
XChangeProperty = platform.createBaseFunction( 
	'XChangeProperty', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,Atom,Atom,c_int,c_int,POINTER(c_ubyte),c_int],
	doc='XChangeProperty( POINTER(Display)(None), Window(None), Atom(None), Atom(None), c_int(None), c_int(None), POINTER(c_ubyte)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2085
XChangeSaveSet = platform.createBaseFunction( 
	'XChangeSaveSet', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,c_int],
	doc='XChangeSaveSet( POINTER(Display)(None), Window(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)

class XSetWindowAttributes(Structure):
    pass
# /usr/include/X11/Xlib.h 2092
XChangeWindowAttributes = platform.createBaseFunction( 
	'XChangeWindowAttributes', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,c_ulong,POINTER(XSetWindowAttributes)],
	doc='XChangeWindowAttributes( POINTER(Display)(None), Window(None), c_ulong(None), POINTER(XSetWindowAttributes)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)

class XChar2b(Structure):
    pass
XChar2b._fields_ = [
    # /usr/include/X11/Xlib.h 1070
    ('byte1', c_ubyte),
    ('byte2', c_ubyte),
]
class XCharStruct(Structure):
    pass
XCharStruct._fields_ = [
    # /usr/include/X11/Xlib.h 1027
    ('lbearing', c_short),
    ('rbearing', c_short),
    ('width', c_short),
    ('ascent', c_short),
    ('descent', c_short),
    ('attributes', c_ushort),
]
class _XEvent(Union):
    pass
XEvent = _XEvent
# /usr/include/X11/Xlib.h 2103
XCheckIfEvent = platform.createBaseFunction( 
	'XCheckIfEvent', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),POINTER(XEvent),CFUNCTYPE(c_int, POINTER(Display), POINTER(XEvent), STRING),XPointer],
	doc='XCheckIfEvent( POINTER(Display)(None), POINTER(XEvent)(None), CFUNCTYPE(c_int, POINTER(Display), POINTER(XEvent), STRING)(None), XPointer(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2109
XCheckMaskEvent = platform.createBaseFunction( 
	'XCheckMaskEvent', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),c_long,POINTER(XEvent)],
	doc='XCheckMaskEvent( POINTER(Display)(None), c_long(None), POINTER(XEvent)(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2115
XCheckTypedEvent = platform.createBaseFunction( 
	'XCheckTypedEvent', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),c_int,POINTER(XEvent)],
	doc='XCheckTypedEvent( POINTER(Display)(None), c_int(None), POINTER(XEvent)(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2122
XCheckTypedWindowEvent = platform.createBaseFunction( 
	'XCheckTypedWindowEvent', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,c_int,POINTER(XEvent)],
	doc='XCheckTypedWindowEvent( POINTER(Display)(None), Window(None), c_int(None), POINTER(XEvent)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2129
XCheckWindowEvent = platform.createBaseFunction( 
	'XCheckWindowEvent', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,c_long,POINTER(XEvent)],
	doc='XCheckWindowEvent( POINTER(Display)(None), Window(None), c_long(None), POINTER(XEvent)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)

class XCirculateEvent(Structure):
    pass
XCirculateEvent._fields_ = [
    # /usr/include/X11/Xlib.h 856
    ('type', c_int),
    ('serial', c_ulong),
    ('send_event', c_int),
    ('display', POINTER(Display)),
    ('event', Window),
    ('window', Window),
    ('place', c_int),
]
class XCirculateRequestEvent(Structure):
    pass
XCirculateRequestEvent._fields_ = [
    # /usr/include/X11/Xlib.h 866
    ('type', c_int),
    ('serial', c_ulong),
    ('send_event', c_int),
    ('display', POINTER(Display)),
    ('parent', Window),
    ('window', Window),
    ('place', c_int),
]

# /usr/include/X11/Xlib.h 2135
XCirculateSubwindows = platform.createBaseFunction( 
	'XCirculateSubwindows', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,c_int],
	doc='XCirculateSubwindows( POINTER(Display)(None), Window(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2140
XCirculateSubwindowsDown = platform.createBaseFunction( 
	'XCirculateSubwindowsDown', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window],
	doc='XCirculateSubwindowsDown( POINTER(Display)(None), Window(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 2145
XCirculateSubwindowsUp = platform.createBaseFunction( 
	'XCirculateSubwindowsUp', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window],
	doc='XCirculateSubwindowsUp( POINTER(Display)(None), Window(None) ) -> c_int', 
	argNames=('None', 'None'),
)

XClassHint._fields_ = [
    # /usr/include/X11/Xutil.h 186
    ('res_name', STRING),
    ('res_class', STRING),
]

# /usr/include/X11/Xlib.h 2155
XClearArea = platform.createBaseFunction( 
	'XClearArea', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,c_int,c_int,c_uint,c_uint,c_int],
	doc='XClearArea( POINTER(Display)(None), Window(None), c_int(None), c_int(None), c_uint(None), c_uint(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2160
XClearWindow = platform.createBaseFunction( 
	'XClearWindow', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window],
	doc='XClearWindow( POINTER(Display)(None), Window(None) ) -> c_int', 
	argNames=('None', 'None'),
)

class XClientMessageEvent(Structure):
    pass
XClientMessageEvent._fields_ = [
    # /usr/include/X11/Xlib.h 942
    ('type', c_int),
    ('serial', c_ulong),
    ('send_event', c_int),
    ('display', POINTER(Display)),
    ('window', Window),
    ('message_type', Atom),
    ('format', c_int),
    ('data', N19XClientMessageEvent4DOT_64E),
]
class XRectangle(Structure):
    pass
# /usr/include/X11/Xutil.h 383
XClipBox = platform.createBaseFunction( 
	'XClipBox', dll=platform.GL, resultType=c_int, 
	argTypes=[Region,POINTER(XRectangle)],
	doc='XClipBox( Region(None), POINTER(XRectangle)(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 2164
XCloseDisplay = platform.createBaseFunction( 
	'XCloseDisplay', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display)],
	doc='XCloseDisplay( POINTER(Display)(None) ) -> c_int', 
	argNames=('None',),
)

class _XIM(Structure):
    pass
XIM = POINTER(_XIM)
# /usr/include/X11/Xlib.h 3837
XCloseIM = platform.createBaseFunction( 
	'XCloseIM', dll=platform.GL, resultType=c_int, 
	argTypes=[XIM],
	doc='XCloseIM( XIM(None) ) -> c_int', 
	argNames=('None',),
)

class _XOM(Structure):
    pass
XOM = POINTER(_XOM)
# /usr/include/X11/Xlib.h 3568
XCloseOM = platform.createBaseFunction( 
	'XCloseOM', dll=platform.GL, resultType=c_int, 
	argTypes=[XOM],
	doc='XCloseOM( XOM(None) ) -> c_int', 
	argNames=('None',),
)

XColor._fields_ = [
    # /usr/include/X11/Xlib.h 447
    ('pixel', c_ulong),
    ('red', c_ushort),
    ('green', c_ushort),
    ('blue', c_ushort),
    ('flags', c_char),
    ('pad', c_char),
]
class XColormapEvent(Structure):
    pass
XColormapEvent._fields_ = [
    # /usr/include/X11/Xlib.h 927
    ('type', c_int),
    ('serial', c_ulong),
    ('send_event', c_int),
    ('display', POINTER(Display)),
    ('window', Window),
    ('colormap', Colormap),
    ('c_new', c_int),
    ('state', c_int),
]
class _XComposeStatus(Structure):
    pass
XComposeStatus = _XComposeStatus
XCompoundTextStyle = 1
class XConfigureEvent(Structure):
    pass
XConfigureEvent._fields_ = [
    # /usr/include/X11/Xlib.h 812
    ('type', c_int),
    ('serial', c_ulong),
    ('send_event', c_int),
    ('display', POINTER(Display)),
    ('event', Window),
    ('window', Window),
    ('x', c_int),
    ('y', c_int),
    ('width', c_int),
    ('height', c_int),
    ('border_width', c_int),
    ('above', Window),
    ('override_redirect', c_int),
]
class XConfigureRequestEvent(Structure):
    pass
XConfigureRequestEvent._fields_ = [
    # /usr/include/X11/Xlib.h 846
    ('type', c_int),
    ('serial', c_ulong),
    ('send_event', c_int),
    ('display', POINTER(Display)),
    ('parent', Window),
    ('window', Window),
    ('x', c_int),
    ('y', c_int),
    ('width', c_int),
    ('height', c_int),
    ('border_width', c_int),
    ('above', Window),
    ('detail', c_int),
    ('value_mask', c_ulong),
]
class XWindowChanges(Structure):
    pass
# /usr/include/X11/Xlib.h 2171
XConfigureWindow = platform.createBaseFunction( 
	'XConfigureWindow', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,c_uint,POINTER(XWindowChanges)],
	doc='XConfigureWindow( POINTER(Display)(None), Window(None), c_uint(None), POINTER(XWindowChanges)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2175
XConnectionNumber = platform.createBaseFunction( 
	'XConnectionNumber', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display)],
	doc='XConnectionNumber( POINTER(Display)(None) ) -> c_int', 
	argNames=('None',),
)

XContext = c_int

# /usr/include/X11/Xlib.h 3640
XContextDependentDrawing = platform.createBaseFunction( 
	'XContextDependentDrawing', dll=platform.GL, resultType=c_int, 
	argTypes=[XFontSet],
	doc='XContextDependentDrawing( XFontSet(None) ) -> c_int', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 3648
XContextualDrawing = platform.createBaseFunction( 
	'XContextualDrawing', dll=platform.GL, resultType=c_int, 
	argTypes=[XFontSet],
	doc='XContextualDrawing( XFontSet(None) ) -> c_int', 
	argNames=('None',),
)


# /usr/include/X11/Xutil.h 526
XConvertCase = platform.createBaseFunction( 
	'XConvertCase', dll=platform.GL, resultType=None, 
	argTypes=[KeySym,POINTER(KeySym),POINTER(KeySym)],
	doc='XConvertCase( KeySym(None), POINTER(KeySym)(None), POINTER(KeySym)(None) ) -> None', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2184
XConvertSelection = platform.createBaseFunction( 
	'XConvertSelection', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Atom,Atom,Atom,Window,Time],
	doc='XConvertSelection( POINTER(Display)(None), Atom(None), Atom(None), Atom(None), Window(None), Time(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2197
XCopyArea = platform.createBaseFunction( 
	'XCopyArea', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Drawable,Drawable,GC,c_int,c_int,c_uint,c_uint,c_int,c_int],
	doc='XCopyArea( POINTER(Display)(None), Drawable(None), Drawable(None), GC(None), c_int(None), c_int(None), c_uint(None), c_uint(None), c_int(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1554
XCopyColormapAndFree = platform.createBaseFunction( 
	'XCopyColormapAndFree', dll=platform.GL, resultType=Colormap, 
	argTypes=[POINTER(Display),Colormap],
	doc='XCopyColormapAndFree( POINTER(Display)(None), Colormap(None) ) -> Colormap', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 2204
XCopyGC = platform.createBaseFunction( 
	'XCopyGC', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),GC,c_ulong,GC],
	doc='XCopyGC( POINTER(Display)(None), GC(None), c_ulong(None), GC(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2218
XCopyPlane = platform.createBaseFunction( 
	'XCopyPlane', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Drawable,Drawable,GC,c_int,c_int,c_uint,c_uint,c_int,c_int,c_ulong],
	doc='XCopyPlane( POINTER(Display)(None), Drawable(None), Drawable(None), GC(None), c_int(None), c_int(None), c_uint(None), c_uint(None), c_int(None), c_int(None), c_ulong(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1613
XCreateBitmapFromData = platform.createBaseFunction( 
	'XCreateBitmapFromData', dll=platform.GL, resultType=Pixmap, 
	argTypes=[POINTER(Display),Drawable,STRING,c_uint,c_uint],
	doc='XCreateBitmapFromData( POINTER(Display)(None), Drawable(None), STRING(None), c_uint(None), c_uint(None) ) -> Pixmap', 
	argNames=('None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1560
XCreateColormap = platform.createBaseFunction( 
	'XCreateColormap', dll=platform.GL, resultType=Colormap, 
	argTypes=[POINTER(Display),Window,POINTER(Visual),c_int],
	doc='XCreateColormap( POINTER(Display)(None), Window(None), POINTER(Visual)(None), c_int(None) ) -> Colormap', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1582
XCreateFontCursor = platform.createBaseFunction( 
	'XCreateFontCursor', dll=platform.GL, resultType=Cursor, 
	argTypes=[POINTER(Display),c_uint],
	doc='XCreateFontCursor( POINTER(Display)(None), c_uint(None) ) -> Cursor', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 3617
XCreateFontSet = platform.createBaseFunction( 
	'XCreateFontSet', dll=platform.GL, resultType=XFontSet, 
	argTypes=[POINTER(Display),STRING,POINTER(POINTER(STRING)),POINTER(c_int),POINTER(STRING)],
	doc='XCreateFontSet( POINTER(Display)(None), STRING(None), POINTER(POINTER(STRING))(None), POINTER(c_int)(None), POINTER(STRING)(None) ) -> XFontSet', 
	argNames=('None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1592
XCreateGC = platform.createBaseFunction( 
	'XCreateGC', dll=platform.GL, resultType=GC, 
	argTypes=[POINTER(Display),Drawable,c_ulong,POINTER(XGCValues)],
	doc='XCreateGC( POINTER(Display)(None), Drawable(None), c_ulong(None), POINTER(XGCValues)(None) ) -> GC', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1578
XCreateGlyphCursor = platform.createBaseFunction( 
	'XCreateGlyphCursor', dll=platform.GL, resultType=Cursor, 
	argTypes=[POINTER(Display),Font,Font,c_uint,c_uint,POINTER(XColor),POINTER(XColor)],
	doc='XCreateGlyphCursor( POINTER(Display)(None), Font(None), Font(None), c_uint(None), c_uint(None), POINTER(XColor)(None), POINTER(XColor)(None) ) -> Cursor', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None'),
)

class _XIC(Structure):
    pass
XIC = POINTER(_XIC)

# /usr/include/X11/Xlib.h 3857
XCreateIC = platform.createBaseFunction( 
	'XCreateIC', dll=platform.GL, resultType=XIC, 
	argTypes=[XIM],
	doc='XCreateIC( XIM(None) ) -> XIC', 
	argNames=('None',),
)

class _XImage(Structure):
    pass
XImage = _XImage

# /usr/include/X11/Xlib.h 1455
XCreateImage = platform.createBaseFunction( 
	'XCreateImage', dll=platform.GL, resultType=POINTER(XImage), 
	argTypes=[POINTER(Display),POINTER(Visual),c_uint,c_int,c_int,STRING,c_uint,c_uint,c_int,c_int],
	doc='XCreateImage( POINTER(Display)(None), POINTER(Visual)(None), c_uint(None), c_int(None), c_int(None), STRING(None), c_uint(None), c_uint(None), c_int(None), c_int(None) ) -> POINTER(XImage)', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None'),
)

XOC = POINTER(_XOC)

# /usr/include/X11/Xlib.h 3591
XCreateOC = platform.createBaseFunction( 
	'XCreateOC', dll=platform.GL, resultType=XOC, 
	argTypes=[XOM],
	doc='XCreateOC( XOM(None) ) -> XOC', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 1606
XCreatePixmap = platform.createBaseFunction( 
	'XCreatePixmap', dll=platform.GL, resultType=Pixmap, 
	argTypes=[POINTER(Display),Drawable,c_uint,c_uint,c_uint],
	doc='XCreatePixmap( POINTER(Display)(None), Drawable(None), c_uint(None), c_uint(None), c_uint(None) ) -> Pixmap', 
	argNames=('None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1569
XCreatePixmapCursor = platform.createBaseFunction( 
	'XCreatePixmapCursor', dll=platform.GL, resultType=Cursor, 
	argTypes=[POINTER(Display),Pixmap,Pixmap,POINTER(XColor),POINTER(XColor),c_uint,c_uint],
	doc='XCreatePixmapCursor( POINTER(Display)(None), Pixmap(None), Pixmap(None), POINTER(XColor)(None), POINTER(XColor)(None), c_uint(None), c_uint(None) ) -> Cursor', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1623
XCreatePixmapFromBitmapData = platform.createBaseFunction( 
	'XCreatePixmapFromBitmapData', dll=platform.GL, resultType=Pixmap, 
	argTypes=[POINTER(Display),Drawable,STRING,c_uint,c_uint,c_ulong,c_ulong,c_uint],
	doc='XCreatePixmapFromBitmapData( POINTER(Display)(None), Drawable(None), STRING(None), c_uint(None), c_uint(None), c_ulong(None), c_ulong(None), c_uint(None) ) -> Pixmap', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 387
XCreateRegion = platform.createBaseFunction( 
	'XCreateRegion', dll=platform.GL, resultType=Region, 
	argTypes=[],
	doc='XCreateRegion(  ) -> Region', 
	argNames=(),
)


# /usr/include/X11/Xlib.h 1634
XCreateSimpleWindow = platform.createBaseFunction( 
	'XCreateSimpleWindow', dll=platform.GL, resultType=Window, 
	argTypes=[POINTER(Display),Window,c_int,c_int,c_uint,c_uint,c_uint,c_ulong,c_ulong],
	doc='XCreateSimpleWindow( POINTER(Display)(None), Window(None), c_int(None), c_int(None), c_uint(None), c_uint(None), c_uint(None), c_ulong(None), c_ulong(None) ) -> Window', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1652
XCreateWindow = platform.createBaseFunction( 
	'XCreateWindow', dll=platform.GL, resultType=Window, 
	argTypes=[POINTER(Display),Window,c_int,c_int,c_uint,c_uint,c_uint,c_int,c_uint,POINTER(Visual),c_ulong,POINTER(XSetWindowAttributes)],
	doc='XCreateWindow( POINTER(Display)(None), Window(None), c_int(None), c_int(None), c_uint(None), c_uint(None), c_uint(None), c_int(None), c_uint(None), POINTER(Visual)(None), c_ulong(None), POINTER(XSetWindowAttributes)(None) ) -> Window', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None'),
)

class XCreateWindowEvent(Structure):
    pass
XCreateWindowEvent._fields_ = [
    # /usr/include/X11/Xlib.h 748
    ('type', c_int),
    ('serial', c_ulong),
    ('send_event', c_int),
    ('display', POINTER(Display)),
    ('parent', Window),
    ('window', Window),
    ('x', c_int),
    ('y', c_int),
    ('width', c_int),
    ('height', c_int),
    ('border_width', c_int),
    ('override_redirect', c_int),
]
class XCrossingEvent(Structure):
    pass
XCrossingEvent._fields_ = [
    # /usr/include/X11/Xlib.h 662
    ('type', c_int),
    ('serial', c_ulong),
    ('send_event', c_int),
    ('display', POINTER(Display)),
    ('window', Window),
    ('root', Window),
    ('subwindow', Window),
    ('time', Time),
    ('x', c_int),
    ('y', c_int),
    ('x_root', c_int),
    ('y_root', c_int),
    ('mode', c_int),
    ('detail', c_int),
    ('same_screen', c_int),
    ('focus', c_int),
    ('state', c_uint),
]

# /usr/include/X11/Xlib.h 1823
XDefaultColormap = platform.createBaseFunction( 
	'XDefaultColormap', dll=platform.GL, resultType=Colormap, 
	argTypes=[POINTER(Display),c_int],
	doc='XDefaultColormap( POINTER(Display)(None), c_int(None) ) -> Colormap', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 1826
XDefaultColormapOfScreen = platform.createBaseFunction( 
	'XDefaultColormapOfScreen', dll=platform.GL, resultType=Colormap, 
	argTypes=[POINTER(Screen)],
	doc='XDefaultColormapOfScreen( POINTER(Screen)(None) ) -> Colormap', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 2223
XDefaultDepth = platform.createBaseFunction( 
	'XDefaultDepth', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),c_int],
	doc='XDefaultDepth( POINTER(Display)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 2227
XDefaultDepthOfScreen = platform.createBaseFunction( 
	'XDefaultDepthOfScreen', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Screen)],
	doc='XDefaultDepthOfScreen( POINTER(Screen)(None) ) -> c_int', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 1787
XDefaultGC = platform.createBaseFunction( 
	'XDefaultGC', dll=platform.GL, resultType=GC, 
	argTypes=[POINTER(Display),c_int],
	doc='XDefaultGC( POINTER(Display)(None), c_int(None) ) -> GC', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 1790
XDefaultGCOfScreen = platform.createBaseFunction( 
	'XDefaultGCOfScreen', dll=platform.GL, resultType=GC, 
	argTypes=[POINTER(Screen)],
	doc='XDefaultGCOfScreen( POINTER(Screen)(None) ) -> GC', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 1773
XDefaultRootWindow = platform.createBaseFunction( 
	'XDefaultRootWindow', dll=platform.GL, resultType=Window, 
	argTypes=[POINTER(Display)],
	doc='XDefaultRootWindow( POINTER(Display)(None) ) -> Window', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 2231
XDefaultScreen = platform.createBaseFunction( 
	'XDefaultScreen', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display)],
	doc='XDefaultScreen( POINTER(Display)(None) ) -> c_int', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 1836
XDefaultScreenOfDisplay = platform.createBaseFunction( 
	'XDefaultScreenOfDisplay', dll=platform.GL, resultType=POINTER(Screen), 
	argTypes=[POINTER(Display)],
	doc='XDefaultScreenOfDisplay( POINTER(Display)(None) ) -> POINTER(Screen)', 
	argNames=('None',),
)


# /usr/include/X11/Xutil.h 389
XDefaultString = platform.createBaseFunction( 
	'XDefaultString', dll=platform.GL, resultType=STRING, 
	argTypes=[],
	doc='XDefaultString(  ) -> STRING', 
	argNames=(),
)


# /usr/include/X11/Xlib.h 1780
XDefaultVisual = platform.createBaseFunction( 
	'XDefaultVisual', dll=platform.GL, resultType=POINTER(Visual), 
	argTypes=[POINTER(Display),c_int],
	doc='XDefaultVisual( POINTER(Display)(None), c_int(None) ) -> POINTER(Visual)', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 1783
XDefaultVisualOfScreen = platform.createBaseFunction( 
	'XDefaultVisualOfScreen', dll=platform.GL, resultType=POINTER(Visual), 
	argTypes=[POINTER(Screen)],
	doc='XDefaultVisualOfScreen( POINTER(Screen)(None) ) -> POINTER(Visual)', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 2237
XDefineCursor = platform.createBaseFunction( 
	'XDefineCursor', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,Cursor],
	doc='XDefineCursor( POINTER(Display)(None), Window(None), Cursor(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 395
XDeleteContext = platform.createBaseFunction( 
	'XDeleteContext', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),XID,XContext],
	doc='XDeleteContext( POINTER(Display)(None), XID(None), XContext(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)

class XModifierKeymap(Structure):
    pass

# /usr/include/X11/Xlib.h 1424
XDeleteModifiermapEntry = platform.createBaseFunction( 
	'XDeleteModifiermapEntry', dll=platform.GL, resultType=POINTER(XModifierKeymap), 
	argTypes=[POINTER(XModifierKeymap),KeyCode,c_int],
	doc='XDeleteModifiermapEntry( POINTER(XModifierKeymap)(None), KeyCode(None), c_int(None) ) -> POINTER(XModifierKeymap)', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2243
XDeleteProperty = platform.createBaseFunction( 
	'XDeleteProperty', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,Atom],
	doc='XDeleteProperty( POINTER(Display)(None), Window(None), Atom(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3861
XDestroyIC = platform.createBaseFunction( 
	'XDestroyIC', dll=platform.GL, resultType=None, 
	argTypes=[XIC],
	doc='XDestroyIC( XIC(None) ) -> None', 
	argNames=('None',),
)

#def XDestroyImage(ximage): return ((*((ximage)->f.destroy_image))((ximage))) # macro

# /usr/include/X11/Xlib.h 3595
XDestroyOC = platform.createBaseFunction( 
	'XDestroyOC', dll=platform.GL, resultType=None, 
	argTypes=[XOC],
	doc='XDestroyOC( XOC(None) ) -> None', 
	argNames=('None',),
)


# /usr/include/X11/Xutil.h 399
XDestroyRegion = platform.createBaseFunction( 
	'XDestroyRegion', dll=platform.GL, resultType=c_int, 
	argTypes=[Region],
	doc='XDestroyRegion( Region(None) ) -> c_int', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 2253
XDestroySubwindows = platform.createBaseFunction( 
	'XDestroySubwindows', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window],
	doc='XDestroySubwindows( POINTER(Display)(None), Window(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 2248
XDestroyWindow = platform.createBaseFunction( 
	'XDestroyWindow', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window],
	doc='XDestroyWindow( POINTER(Display)(None), Window(None) ) -> c_int', 
	argNames=('None', 'None'),
)

class XDestroyWindowEvent(Structure):
    pass
XDestroyWindowEvent._fields_ = [
    # /usr/include/X11/Xlib.h 757
    ('type', c_int),
    ('serial', c_ulong),
    ('send_event', c_int),
    ('display', POINTER(Display)),
    ('event', Window),
    ('window', Window),
]

# /usr/include/X11/Xlib.h 3644
XDirectionalDependentDrawing = platform.createBaseFunction( 
	'XDirectionalDependentDrawing', dll=platform.GL, resultType=c_int, 
	argTypes=[XFontSet],
	doc='XDirectionalDependentDrawing( XFontSet(None) ) -> c_int', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 2265
XDisableAccessControl = platform.createBaseFunction( 
	'XDisableAccessControl', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display)],
	doc='XDisableAccessControl( POINTER(Display)(None) ) -> c_int', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 2271
XDisplayCells = platform.createBaseFunction( 
	'XDisplayCells', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),c_int],
	doc='XDisplayCells( POINTER(Display)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 2276
XDisplayHeight = platform.createBaseFunction( 
	'XDisplayHeight', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),c_int],
	doc='XDisplayHeight( POINTER(Display)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 2281
XDisplayHeightMM = platform.createBaseFunction( 
	'XDisplayHeightMM', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),c_int],
	doc='XDisplayHeightMM( POINTER(Display)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 2287
XDisplayKeycodes = platform.createBaseFunction( 
	'XDisplayKeycodes', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),POINTER(c_int),POINTER(c_int)],
	doc='XDisplayKeycodes( POINTER(Display)(None), POINTER(c_int)(None), POINTER(c_int)(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1729
XDisplayMotionBufferSize = platform.createBaseFunction( 
	'XDisplayMotionBufferSize', dll=platform.GL, resultType=c_ulong, 
	argTypes=[POINTER(Display)],
	doc='XDisplayMotionBufferSize( POINTER(Display)(None) ) -> c_ulong', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 1520
XDisplayName = platform.createBaseFunction( 
	'XDisplayName', dll=platform.GL, resultType=STRING, 
	argTypes=[STRING],
	doc='XDisplayName( STRING(None) ) -> STRING', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 3849
XDisplayOfIM = platform.createBaseFunction( 
	'XDisplayOfIM', dll=platform.GL, resultType=POINTER(Display), 
	argTypes=[XIM],
	doc='XDisplayOfIM( XIM(None) ) -> POINTER(Display)', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 3582
XDisplayOfOM = platform.createBaseFunction( 
	'XDisplayOfOM', dll=platform.GL, resultType=POINTER(Display), 
	argTypes=[XOM],
	doc='XDisplayOfOM( XOM(None) ) -> POINTER(Display)', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 1829
XDisplayOfScreen = platform.createBaseFunction( 
	'XDisplayOfScreen', dll=platform.GL, resultType=POINTER(Display), 
	argTypes=[POINTER(Screen)],
	doc='XDisplayOfScreen( POINTER(Screen)(None) ) -> POINTER(Display)', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 2292
XDisplayPlanes = platform.createBaseFunction( 
	'XDisplayPlanes', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),c_int],
	doc='XDisplayPlanes( POINTER(Display)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 1819
XDisplayString = platform.createBaseFunction( 
	'XDisplayString', dll=platform.GL, resultType=STRING, 
	argTypes=[POINTER(Display)],
	doc='XDisplayString( POINTER(Display)(None) ) -> STRING', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 2297
XDisplayWidth = platform.createBaseFunction( 
	'XDisplayWidth', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),c_int],
	doc='XDisplayWidth( POINTER(Display)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 2302
XDisplayWidthMM = platform.createBaseFunction( 
	'XDisplayWidthMM', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),c_int],
	doc='XDisplayWidthMM( POINTER(Display)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 2257
XDoesBackingStore = platform.createBaseFunction( 
	'XDoesBackingStore', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Screen)],
	doc='XDoesBackingStore( POINTER(Screen)(None) ) -> c_int', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 2261
XDoesSaveUnders = platform.createBaseFunction( 
	'XDoesSaveUnders', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Screen)],
	doc='XDoesSaveUnders( POINTER(Screen)(None) ) -> c_int', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 2314
XDrawArc = platform.createBaseFunction( 
	'XDrawArc', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Drawable,GC,c_int,c_int,c_uint,c_uint,c_int,c_int],
	doc='XDrawArc( POINTER(Display)(None), Drawable(None), GC(None), c_int(None), c_int(None), c_uint(None), c_uint(None), c_int(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2322
XDrawArcs = platform.createBaseFunction( 
	'XDrawArcs', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Drawable,GC,POINTER(XArc),c_int],
	doc='XDrawArcs( POINTER(Display)(None), Drawable(None), GC(None), POINTER(XArc)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2332
XDrawImageString = platform.createBaseFunction( 
	'XDrawImageString', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Drawable,GC,c_int,c_int,STRING,c_int],
	doc='XDrawImageString( POINTER(Display)(None), Drawable(None), GC(None), c_int(None), c_int(None), STRING(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2342
XDrawImageString16 = platform.createBaseFunction( 
	'XDrawImageString16', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Drawable,GC,c_int,c_int,POINTER(XChar2b),c_int],
	doc='XDrawImageString16( POINTER(Display)(None), Drawable(None), GC(None), c_int(None), c_int(None), POINTER(XChar2b)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2352
XDrawLine = platform.createBaseFunction( 
	'XDrawLine', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Drawable,GC,c_int,c_int,c_int,c_int],
	doc='XDrawLine( POINTER(Display)(None), Drawable(None), GC(None), c_int(None), c_int(None), c_int(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None'),
)

class XPoint(Structure):
    pass
# /usr/include/X11/Xlib.h 2361
XDrawLines = platform.createBaseFunction( 
	'XDrawLines', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Drawable,GC,POINTER(XPoint),c_int,c_int],
	doc='XDrawLines( POINTER(Display)(None), Drawable(None), GC(None), POINTER(XPoint)(None), c_int(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2369
XDrawPoint = platform.createBaseFunction( 
	'XDrawPoint', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Drawable,GC,c_int,c_int],
	doc='XDrawPoint( POINTER(Display)(None), Drawable(None), GC(None), c_int(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2378
XDrawPoints = platform.createBaseFunction( 
	'XDrawPoints', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Drawable,GC,POINTER(XPoint),c_int,c_int],
	doc='XDrawPoints( POINTER(Display)(None), Drawable(None), GC(None), POINTER(XPoint)(None), c_int(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2388
XDrawRectangle = platform.createBaseFunction( 
	'XDrawRectangle', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Drawable,GC,c_int,c_int,c_uint,c_uint],
	doc='XDrawRectangle( POINTER(Display)(None), Drawable(None), GC(None), c_int(None), c_int(None), c_uint(None), c_uint(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2396
XDrawRectangles = platform.createBaseFunction( 
	'XDrawRectangles', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Drawable,GC,POINTER(XRectangle),c_int],
	doc='XDrawRectangles( POINTER(Display)(None), Drawable(None), GC(None), POINTER(XRectangle)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None'),
)

class XSegment(Structure):
    pass
# /usr/include/X11/Xlib.h 2404
XDrawSegments = platform.createBaseFunction( 
	'XDrawSegments', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Drawable,GC,POINTER(XSegment),c_int],
	doc='XDrawSegments( POINTER(Display)(None), Drawable(None), GC(None), POINTER(XSegment)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2414
XDrawString = platform.createBaseFunction( 
	'XDrawString', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Drawable,GC,c_int,c_int,STRING,c_int],
	doc='XDrawString( POINTER(Display)(None), Drawable(None), GC(None), c_int(None), c_int(None), STRING(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2424
XDrawString16 = platform.createBaseFunction( 
	'XDrawString16', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Drawable,GC,c_int,c_int,POINTER(XChar2b),c_int],
	doc='XDrawString16( POINTER(Display)(None), Drawable(None), GC(None), c_int(None), c_int(None), POINTER(XChar2b)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None'),
)

class XTextItem(Structure):
    pass
# /usr/include/X11/Xlib.h 2434
XDrawText = platform.createBaseFunction( 
	'XDrawText', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Drawable,GC,c_int,c_int,POINTER(XTextItem),c_int],
	doc='XDrawText( POINTER(Display)(None), Drawable(None), GC(None), c_int(None), c_int(None), POINTER(XTextItem)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None'),
)

class XTextItem16(Structure):
    pass
# /usr/include/X11/Xlib.h 2444
XDrawText16 = platform.createBaseFunction( 
	'XDrawText16', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Drawable,GC,c_int,c_int,POINTER(XTextItem16),c_int],
	doc='XDrawText16( POINTER(Display)(None), Drawable(None), GC(None), c_int(None), c_int(None), POINTER(XTextItem16)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None'),
)

class XEDataObject(Union):
    pass

class XFontStruct(Structure):
    pass
XEDataObject._fields_ = [
    # /usr/include/X11/Xlib.h 1085
    ('display', POINTER(Display)),
    ('gc', GC),
    ('visual', POINTER(Visual)),
    ('screen', POINTER(Screen)),
    ('pixmap_format', POINTER(ScreenFormat)),
    ('font', POINTER(XFontStruct)),
]


# /usr/include/X11/Xlib.h 1764
XEHeadOfExtensionList = platform.createBaseFunction( 
	'XEHeadOfExtensionList', dll=platform.GL, resultType=POINTER(POINTER(XExtData)), 
	argTypes=[XEDataObject],
	doc='XEHeadOfExtensionList( XEDataObject(None) ) -> POINTER(POINTER(XExtData))', 
	argNames=('None',),
)


# /usr/include/X11/Xutil.h 403
XEmptyRegion = platform.createBaseFunction( 
	'XEmptyRegion', dll=platform.GL, resultType=c_int, 
	argTypes=[Region],
	doc='XEmptyRegion( Region(None) ) -> c_int', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 2448
XEnableAccessControl = platform.createBaseFunction( 
	'XEnableAccessControl', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display)],
	doc='XEnableAccessControl( POINTER(Display)(None) ) -> c_int', 
	argNames=('None',),
)

XEnterWindowEvent = XCrossingEvent

# /usr/include/X11/Xutil.h 408
XEqualRegion = platform.createBaseFunction( 
	'XEqualRegion', dll=platform.GL, resultType=c_int, 
	argTypes=[Region,Region],
	doc='XEqualRegion( Region(None), Region(None) ) -> c_int', 
	argNames=('None', 'None'),
)

class XErrorEvent(Structure):
    pass
XErrorEvent._fields_ = [
    # /usr/include/X11/Xlib.h 964
    ('type', c_int),
    ('display', POINTER(Display)),
    ('resourceid', XID),
    ('serial', c_ulong),
    ('error_code', c_ubyte),
    ('request_code', c_ubyte),
    ('minor_code', c_ubyte),
]

XErrorHandler = CFUNCTYPE(c_int, POINTER(Display), POINTER(XErrorEvent))

# /usr/include/X11/Xlib.h 1839
XEventMaskOfScreen = platform.createBaseFunction( 
	'XEventMaskOfScreen', dll=platform.GL, resultType=c_long, 
	argTypes=[POINTER(Screen)],
	doc='XEventMaskOfScreen( POINTER(Screen)(None) ) -> c_long', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 2453
XEventsQueued = platform.createBaseFunction( 
	'XEventsQueued', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),c_int],
	doc='XEventsQueued( POINTER(Display)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None'),
)

class XExposeEvent(Structure):
    pass
XExposeEvent._fields_ = [
    # /usr/include/X11/Xlib.h 703
    ('type', c_int),
    ('serial', c_ulong),
    ('send_event', c_int),
    ('display', POINTER(Display)),
    ('window', Window),
    ('x', c_int),
    ('y', c_int),
    ('width', c_int),
    ('height', c_int),
    ('count', c_int),
]
XExtCodes._fields_ = [
    # /usr/include/X11/Xlib.h 197
    ('extension', c_int),
    ('major_opcode', c_int),
    ('first_event', c_int),
    ('first_error', c_int),
]

# /usr/include/X11/Xlib.h 1720
XExtendedMaxRequestSize = platform.createBaseFunction( 
	'XExtendedMaxRequestSize', dll=platform.GL, resultType=c_long, 
	argTypes=[POINTER(Display)],
	doc='XExtendedMaxRequestSize( POINTER(Display)(None) ) -> c_long', 
	argNames=('None',),
)

class XFontSetExtents(Structure):
    pass

# /usr/include/X11/Xlib.h 3652
XExtentsOfFontSet = platform.createBaseFunction( 
	'XExtentsOfFontSet', dll=platform.GL, resultType=POINTER(XFontSetExtents), 
	argTypes=[XFontSet],
	doc='XExtentsOfFontSet( XFontSet(None) ) -> POINTER(XFontSetExtents)', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 1502
XFetchBuffer = platform.createBaseFunction( 
	'XFetchBuffer', dll=platform.GL, resultType=STRING, 
	argTypes=[POINTER(Display),POINTER(c_int),c_int],
	doc='XFetchBuffer( POINTER(Display)(None), POINTER(c_int)(None), c_int(None) ) -> STRING', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1497
XFetchBytes = platform.createBaseFunction( 
	'XFetchBytes', dll=platform.GL, resultType=STRING, 
	argTypes=[POINTER(Display),POINTER(c_int)],
	doc='XFetchBytes( POINTER(Display)(None), POINTER(c_int)(None) ) -> STRING', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 2459
XFetchName = platform.createBaseFunction( 
	'XFetchName', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,POINTER(STRING)],
	doc='XFetchName( POINTER(Display)(None), Window(None), POINTER(STRING)(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2471
XFillArc = platform.createBaseFunction( 
	'XFillArc', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Drawable,GC,c_int,c_int,c_uint,c_uint,c_int,c_int],
	doc='XFillArc( POINTER(Display)(None), Drawable(None), GC(None), c_int(None), c_int(None), c_uint(None), c_uint(None), c_int(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2479
XFillArcs = platform.createBaseFunction( 
	'XFillArcs', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Drawable,GC,POINTER(XArc),c_int],
	doc='XFillArcs( POINTER(Display)(None), Drawable(None), GC(None), POINTER(XArc)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2489
XFillPolygon = platform.createBaseFunction( 
	'XFillPolygon', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Drawable,GC,POINTER(XPoint),c_int,c_int,c_int],
	doc='XFillPolygon( POINTER(Display)(None), Drawable(None), GC(None), POINTER(XPoint)(None), c_int(None), c_int(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2499
XFillRectangle = platform.createBaseFunction( 
	'XFillRectangle', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Drawable,GC,c_int,c_int,c_uint,c_uint],
	doc='XFillRectangle( POINTER(Display)(None), Drawable(None), GC(None), c_int(None), c_int(None), c_uint(None), c_uint(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2507
XFillRectangles = platform.createBaseFunction( 
	'XFillRectangles', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Drawable,GC,POINTER(XRectangle),c_int],
	doc='XFillRectangles( POINTER(Display)(None), Drawable(None), GC(None), POINTER(XRectangle)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3898
XFilterEvent = platform.createBaseFunction( 
	'XFilterEvent', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(XEvent),Window],
	doc='XFilterEvent( POINTER(XEvent)(None), Window(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xutil.h 415
XFindContext = platform.createBaseFunction( 
	'XFindContext', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),XID,XContext,POINTER(XPointer)],
	doc='XFindContext( POINTER(Display)(None), XID(None), XContext(None), POINTER(XPointer)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1761
XFindOnExtensionList = platform.createBaseFunction( 
	'XFindOnExtensionList', dll=platform.GL, resultType=POINTER(XExtData), 
	argTypes=[POINTER(POINTER(XExtData)),c_int],
	doc='XFindOnExtensionList( POINTER(POINTER(XExtData))(None), c_int(None) ) -> POINTER(XExtData)', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 2511
XFlush = platform.createBaseFunction( 
	'XFlush', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display)],
	doc='XFlush( POINTER(Display)(None) ) -> c_int', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 1599
XFlushGC = platform.createBaseFunction( 
	'XFlushGC', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(Display),GC],
	doc='XFlushGC( POINTER(Display)(None), GC(None) ) -> None', 
	argNames=('None', 'None'),
)

class XFocusChangeEvent(Structure):
    pass
XFocusChangeEvent._fields_ = [
    # /usr/include/X11/Xlib.h 680
    ('type', c_int),
    ('serial', c_ulong),
    ('send_event', c_int),
    ('display', POINTER(Display)),
    ('window', Window),
    ('mode', c_int),
    ('detail', c_int),
]
XFocusInEvent = XFocusChangeEvent
XFocusOutEvent = XFocusChangeEvent
class XFontProp(Structure):
    pass
XFontProp._fields_ = [
    # /usr/include/X11/Xlib.h 1036
    ('name', Atom),
    ('card32', c_ulong),
]
XRectangle._fields_ = [
    # /usr/include/X11/Xlib.h 465
    ('x', c_short),
    ('y', c_short),
    ('width', c_ushort),
    ('height', c_ushort),
]
XFontSetExtents._fields_ = [
    # /usr/include/X11/Xlib.h 1090
    ('max_ink_extent', XRectangle),
    ('max_logical_extent', XRectangle),
]


XFontStruct._fields_ = [
    # /usr/include/X11/Xlib.h 1055
    ('ext_data', POINTER(XExtData)),
    ('fid', Font),
    ('direction', c_uint),
    ('min_char_or_byte2', c_uint),
    ('max_char_or_byte2', c_uint),
    ('min_byte1', c_uint),
    ('max_byte1', c_uint),
    ('all_chars_exist', c_int),
    ('default_char', c_uint),
    ('n_properties', c_int),
    ('properties', POINTER(XFontProp)),
    ('min_bounds', XCharStruct),
    ('max_bounds', XCharStruct),
    ('per_char', POINTER(XCharStruct)),
    ('ascent', c_int),
    ('descent', c_int),
]

# /usr/include/X11/Xlib.h 3628
XFontsOfFontSet = platform.createBaseFunction( 
	'XFontsOfFontSet', dll=platform.GL, resultType=c_int, 
	argTypes=[XFontSet,POINTER(POINTER(POINTER(XFontStruct))),POINTER(POINTER(STRING))],
	doc='XFontsOfFontSet( XFontSet(None), POINTER(POINTER(POINTER(XFontStruct)))(None), POINTER(POINTER(STRING))(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2516
XForceScreenSaver = platform.createBaseFunction( 
	'XForceScreenSaver', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),c_int],
	doc='XForceScreenSaver( POINTER(Display)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 2520
XFree = platform.createBaseFunction( 
	'XFree', dll=platform.GL, resultType=c_int, 
	argTypes=[c_void_p],
	doc='XFree( c_void_p(None) ) -> c_int', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 2525
XFreeColormap = platform.createBaseFunction( 
	'XFreeColormap', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Colormap],
	doc='XFreeColormap( POINTER(Display)(None), Colormap(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 2533
XFreeColors = platform.createBaseFunction( 
	'XFreeColors', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Colormap,POINTER(c_ulong),c_int,c_ulong],
	doc='XFreeColors( POINTER(Display)(None), Colormap(None), POINTER(c_ulong)(None), c_int(None), c_ulong(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2538
XFreeCursor = platform.createBaseFunction( 
	'XFreeCursor', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Cursor],
	doc='XFreeCursor( POINTER(Display)(None), Cursor(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 2542
XFreeExtensionList = platform.createBaseFunction( 
	'XFreeExtensionList', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(STRING)],
	doc='XFreeExtensionList( POINTER(STRING)(None) ) -> c_int', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 2547
XFreeFont = platform.createBaseFunction( 
	'XFreeFont', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),POINTER(XFontStruct)],
	doc='XFreeFont( POINTER(Display)(None), POINTER(XFontStruct)(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 2553
XFreeFontInfo = platform.createBaseFunction( 
	'XFreeFontInfo', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(STRING),POINTER(XFontStruct),c_int],
	doc='XFreeFontInfo( POINTER(STRING)(None), POINTER(XFontStruct)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2557
XFreeFontNames = platform.createBaseFunction( 
	'XFreeFontNames', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(STRING)],
	doc='XFreeFontNames( POINTER(STRING)(None) ) -> c_int', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 2561
XFreeFontPath = platform.createBaseFunction( 
	'XFreeFontPath', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(STRING)],
	doc='XFreeFontPath( POINTER(STRING)(None) ) -> c_int', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 3622
XFreeFontSet = platform.createBaseFunction( 
	'XFreeFontSet', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(Display),XFontSet],
	doc='XFreeFontSet( POINTER(Display)(None), XFontSet(None) ) -> None', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 2566
XFreeGC = platform.createBaseFunction( 
	'XFreeGC', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),GC],
	doc='XFreeGC( POINTER(Display)(None), GC(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 2570
XFreeModifiermap = platform.createBaseFunction( 
	'XFreeModifiermap', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(XModifierKeymap)],
	doc='XFreeModifiermap( POINTER(XModifierKeymap)(None) ) -> c_int', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 2575
XFreePixmap = platform.createBaseFunction( 
	'XFreePixmap', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Pixmap],
	doc='XFreePixmap( POINTER(Display)(None), Pixmap(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 1926
XFreeStringList = platform.createBaseFunction( 
	'XFreeStringList', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(STRING)],
	doc='XFreeStringList( POINTER(STRING)(None) ) -> None', 
	argNames=('None',),
)

XGCValues._fields_ = [
    # /usr/include/X11/Xlib.h 239
    ('function', c_int),
    ('plane_mask', c_ulong),
    ('foreground', c_ulong),
    ('background', c_ulong),
    ('line_width', c_int),
    ('line_style', c_int),
    ('cap_style', c_int),
    ('join_style', c_int),
    ('fill_style', c_int),
    ('fill_rule', c_int),
    ('arc_mode', c_int),
    ('tile', Pixmap),
    ('stipple', Pixmap),
    ('ts_x_origin', c_int),
    ('ts_y_origin', c_int),
    ('font', Font),
    ('subwindow_mode', c_int),
    ('graphics_exposures', c_int),
    ('clip_x_origin', c_int),
    ('clip_y_origin', c_int),
    ('clip_mask', Pixmap),
    ('dash_offset', c_int),
    ('dashes', c_char),
]

# /usr/include/X11/Xlib.h 1595
XGContextFromGC = platform.createBaseFunction( 
	'XGContextFromGC', dll=platform.GL, resultType=GContext, 
	argTypes=[GC],
	doc='XGContextFromGC( GC(None) ) -> GContext', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 2591
XGeometry = platform.createBaseFunction( 
	'XGeometry', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),c_int,STRING,STRING,c_uint,c_uint,c_uint,c_int,c_int,POINTER(c_int),POINTER(c_int),POINTER(c_int),POINTER(c_int)],
	doc='XGeometry( POINTER(Display)(None), c_int(None), STRING(None), STRING(None), c_uint(None), c_uint(None), c_uint(None), c_int(None), c_int(None), POINTER(c_int)(None), POINTER(c_int)(None), POINTER(c_int)(None), POINTER(c_int)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1506
XGetAtomName = platform.createBaseFunction( 
	'XGetAtomName', dll=platform.GL, resultType=STRING, 
	argTypes=[POINTER(Display),Atom],
	doc='XGetAtomName( POINTER(Display)(None), Atom(None) ) -> STRING', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 1512
XGetAtomNames = platform.createBaseFunction( 
	'XGetAtomNames', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),POINTER(Atom),c_int,POINTER(STRING)],
	doc='XGetAtomNames( POINTER(Display)(None), POINTER(Atom)(None), c_int(None), POINTER(STRING)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 421
XGetClassHint = platform.createBaseFunction( 
	'XGetClassHint', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,POINTER(XClassHint)],
	doc='XGetClassHint( POINTER(Display)(None), Window(None), POINTER(XClassHint)(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1911
XGetCommand = platform.createBaseFunction( 
	'XGetCommand', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,POINTER(POINTER(STRING)),POINTER(c_int)],
	doc='XGetCommand( POINTER(Display)(None), Window(None), POINTER(POINTER(STRING))(None), POINTER(c_int)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1517
XGetDefault = platform.createBaseFunction( 
	'XGetDefault', dll=platform.GL, resultType=STRING, 
	argTypes=[POINTER(Display),STRING,STRING],
	doc='XGetDefault( POINTER(Display)(None), STRING(None), STRING(None) ) -> STRING', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2600
XGetErrorDatabaseText = platform.createBaseFunction( 
	'XGetErrorDatabaseText', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),STRING,STRING,STRING,STRING,c_int],
	doc='XGetErrorDatabaseText( POINTER(Display)(None), STRING(None), STRING(None), STRING(None), STRING(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2607
XGetErrorText = platform.createBaseFunction( 
	'XGetErrorText', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),c_int,STRING,c_int],
	doc='XGetErrorText( POINTER(Display)(None), c_int(None), STRING(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1674
XGetFontPath = platform.createBaseFunction( 
	'XGetFontPath', dll=platform.GL, resultType=POINTER(STRING), 
	argTypes=[POINTER(Display),POINTER(c_int)],
	doc='XGetFontPath( POINTER(Display)(None), POINTER(c_int)(None) ) -> POINTER(STRING)', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 2613
XGetFontProperty = platform.createBaseFunction( 
	'XGetFontProperty', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(XFontStruct),Atom,POINTER(c_ulong)],
	doc='XGetFontProperty( POINTER(XFontStruct)(None), Atom(None), POINTER(c_ulong)(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2620
XGetGCValues = platform.createBaseFunction( 
	'XGetGCValues', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),GC,c_ulong,POINTER(XGCValues)],
	doc='XGetGCValues( POINTER(Display)(None), GC(None), c_ulong(None), POINTER(XGCValues)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2632
XGetGeometry = platform.createBaseFunction( 
	'XGetGeometry', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Drawable,POINTER(Window),POINTER(c_int),POINTER(c_int),POINTER(c_uint),POINTER(c_uint),POINTER(c_uint),POINTER(c_uint)],
	doc='XGetGeometry( POINTER(Display)(None), Drawable(None), POINTER(Window)(None), POINTER(c_int)(None), POINTER(c_int)(None), POINTER(c_uint)(None), POINTER(c_uint)(None), POINTER(c_uint)(None), POINTER(c_uint)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3889
XGetICValues = platform.createBaseFunction( 
	'XGetICValues', dll=platform.GL, resultType=STRING, 
	argTypes=[XIC],
	doc='XGetICValues( XIC(None) ) -> STRING', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 3841
XGetIMValues = platform.createBaseFunction( 
	'XGetIMValues', dll=platform.GL, resultType=STRING, 
	argTypes=[XIM],
	doc='XGetIMValues( XIM(None) ) -> STRING', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 2638
XGetIconName = platform.createBaseFunction( 
	'XGetIconName', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,POINTER(STRING)],
	doc='XGetIconName( POINTER(Display)(None), Window(None), POINTER(STRING)(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 428
XGetIconSizes = platform.createBaseFunction( 
	'XGetIconSizes', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,POINTER(POINTER(XIconSize)),POINTER(c_int)],
	doc='XGetIconSizes( POINTER(Display)(None), Window(None), POINTER(POINTER(XIconSize))(None), POINTER(c_int)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1468
XGetImage = platform.createBaseFunction( 
	'XGetImage', dll=platform.GL, resultType=POINTER(XImage), 
	argTypes=[POINTER(Display),Drawable,c_int,c_int,c_uint,c_uint,c_ulong,c_int],
	doc='XGetImage( POINTER(Display)(None), Drawable(None), c_int(None), c_int(None), c_uint(None), c_uint(None), c_ulong(None), c_int(None) ) -> POINTER(XImage)', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2644
XGetInputFocus = platform.createBaseFunction( 
	'XGetInputFocus', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),POINTER(Window),POINTER(c_int)],
	doc='XGetInputFocus( POINTER(Display)(None), POINTER(Window)(None), POINTER(c_int)(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)

class XKeyboardState(Structure):
    pass
# /usr/include/X11/Xlib.h 2649
XGetKeyboardControl = platform.createBaseFunction( 
	'XGetKeyboardControl', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),POINTER(XKeyboardState)],
	doc='XGetKeyboardControl( POINTER(Display)(None), POINTER(XKeyboardState)(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 1711
XGetKeyboardMapping = platform.createBaseFunction( 
	'XGetKeyboardMapping', dll=platform.GL, resultType=POINTER(KeySym), 
	argTypes=[POINTER(Display),KeyCode,c_int,POINTER(c_int)],
	doc='XGetKeyboardMapping( POINTER(Display)(None), KeyCode(None), c_int(None), POINTER(c_int)(None) ) -> POINTER(KeySym)', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1428
XGetModifierMapping = platform.createBaseFunction( 
	'XGetModifierMapping', dll=platform.GL, resultType=POINTER(XModifierKeymap), 
	argTypes=[POINTER(Display)],
	doc='XGetModifierMapping( POINTER(Display)(None) ) -> POINTER(XModifierKeymap)', 
	argNames=('None',),
)

class XTimeCoord(Structure):
    pass

# /usr/include/X11/Xlib.h 1414
XGetMotionEvents = platform.createBaseFunction( 
	'XGetMotionEvents', dll=platform.GL, resultType=POINTER(XTimeCoord), 
	argTypes=[POINTER(Display),Window,Time,Time,POINTER(c_int)],
	doc='XGetMotionEvents( POINTER(Display)(None), Window(None), Time(None), Time(None), POINTER(c_int)(None) ) -> POINTER(XTimeCoord)', 
	argNames=('None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 434
XGetNormalHints = platform.createBaseFunction( 
	'XGetNormalHints', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,POINTER(XSizeHints)],
	doc='XGetNormalHints( POINTER(Display)(None), Window(None), POINTER(XSizeHints)(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3609
XGetOCValues = platform.createBaseFunction( 
	'XGetOCValues', dll=platform.GL, resultType=STRING, 
	argTypes=[XOC],
	doc='XGetOCValues( XOC(None) ) -> STRING', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 3578
XGetOMValues = platform.createBaseFunction( 
	'XGetOMValues', dll=platform.GL, resultType=STRING, 
	argTypes=[XOM],
	doc='XGetOMValues( XOM(None) ) -> STRING', 
	argNames=('None',),
)

#def XGetPixel(ximage,x,y): return ((*((ximage)->f.get_pixel))((ximage), (x), (y))) # macro

# /usr/include/X11/Xlib.h 2656
XGetPointerControl = platform.createBaseFunction( 
	'XGetPointerControl', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),POINTER(c_int),POINTER(c_int),POINTER(c_int)],
	doc='XGetPointerControl( POINTER(Display)(None), POINTER(c_int)(None), POINTER(c_int)(None), POINTER(c_int)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2662
XGetPointerMapping = platform.createBaseFunction( 
	'XGetPointerMapping', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),POINTER(c_ubyte),c_int],
	doc='XGetPointerMapping( POINTER(Display)(None), POINTER(c_ubyte)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 442
XGetRGBColormaps = platform.createBaseFunction( 
	'XGetRGBColormaps', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,POINTER(POINTER(XStandardColormap)),POINTER(c_int),Atom],
	doc='XGetRGBColormaps( POINTER(Display)(None), Window(None), POINTER(POINTER(XStandardColormap))(None), POINTER(c_int)(None), Atom(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2670
XGetScreenSaver = platform.createBaseFunction( 
	'XGetScreenSaver', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),POINTER(c_int),POINTER(c_int),POINTER(c_int),POINTER(c_int)],
	doc='XGetScreenSaver( POINTER(Display)(None), POINTER(c_int)(None), POINTER(c_int)(None), POINTER(c_int)(None), POINTER(c_int)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1638
XGetSelectionOwner = platform.createBaseFunction( 
	'XGetSelectionOwner', dll=platform.GL, resultType=Window, 
	argTypes=[POINTER(Display),Atom],
	doc='XGetSelectionOwner( POINTER(Display)(None), Atom(None) ) -> Window', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xutil.h 449
XGetSizeHints = platform.createBaseFunction( 
	'XGetSizeHints', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,POINTER(XSizeHints),Atom],
	doc='XGetSizeHints( POINTER(Display)(None), Window(None), POINTER(XSizeHints)(None), Atom(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 456
XGetStandardColormap = platform.createBaseFunction( 
	'XGetStandardColormap', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,POINTER(XStandardColormap),Atom],
	doc='XGetStandardColormap( POINTER(Display)(None), Window(None), POINTER(XStandardColormap)(None), Atom(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1481
XGetSubImage = platform.createBaseFunction( 
	'XGetSubImage', dll=platform.GL, resultType=POINTER(XImage), 
	argTypes=[POINTER(Display),Drawable,c_int,c_int,c_uint,c_uint,c_ulong,c_int,POINTER(XImage),c_int,c_int],
	doc='XGetSubImage( POINTER(Display)(None), Drawable(None), c_int(None), c_int(None), c_uint(None), c_uint(None), c_ulong(None), c_int(None), POINTER(XImage)(None), c_int(None), c_int(None) ) -> POINTER(XImage)', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None'),
)

class XTextProperty(Structure):
    pass
# /usr/include/X11/Xutil.h 463
XGetTextProperty = platform.createBaseFunction( 
	'XGetTextProperty', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,POINTER(XTextProperty),Atom],
	doc='XGetTextProperty( POINTER(Display)(None), Window(None), POINTER(XTextProperty)(None), Atom(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2676
XGetTransientForHint = platform.createBaseFunction( 
	'XGetTransientForHint', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,POINTER(Window)],
	doc='XGetTransientForHint( POINTER(Display)(None), Window(None), POINTER(Window)(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)

class XVisualInfo(Structure):
    pass

# /usr/include/X11/Xutil.h 470
XGetVisualInfo = platform.createBaseFunction( 
	'XGetVisualInfo', dll=platform.GL, resultType=POINTER(XVisualInfo), 
	argTypes=[POINTER(Display),c_long,POINTER(XVisualInfo),POINTER(c_int)],
	doc='XGetVisualInfo( POINTER(Display)(None), c_long(None), POINTER(XVisualInfo)(None), POINTER(c_int)(None) ) -> POINTER(XVisualInfo)', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 476
XGetWMClientMachine = platform.createBaseFunction( 
	'XGetWMClientMachine', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,POINTER(XTextProperty)],
	doc='XGetWMClientMachine( POINTER(Display)(None), Window(None), POINTER(XTextProperty)(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1917
XGetWMColormapWindows = platform.createBaseFunction( 
	'XGetWMColormapWindows', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,POINTER(POINTER(Window)),POINTER(c_int)],
	doc='XGetWMColormapWindows( POINTER(Display)(None), Window(None), POINTER(POINTER(Window))(None), POINTER(c_int)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 481
XGetWMHints = platform.createBaseFunction( 
	'XGetWMHints', dll=platform.GL, resultType=POINTER(XWMHints), 
	argTypes=[POINTER(Display),Window],
	doc='XGetWMHints( POINTER(Display)(None), Window(None) ) -> POINTER(XWMHints)', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xutil.h 487
XGetWMIconName = platform.createBaseFunction( 
	'XGetWMIconName', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,POINTER(XTextProperty)],
	doc='XGetWMIconName( POINTER(Display)(None), Window(None), POINTER(XTextProperty)(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 493
XGetWMName = platform.createBaseFunction( 
	'XGetWMName', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,POINTER(XTextProperty)],
	doc='XGetWMName( POINTER(Display)(None), Window(None), POINTER(XTextProperty)(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 500
XGetWMNormalHints = platform.createBaseFunction( 
	'XGetWMNormalHints', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,POINTER(XSizeHints),POINTER(c_long)],
	doc='XGetWMNormalHints( POINTER(Display)(None), Window(None), POINTER(XSizeHints)(None), POINTER(c_long)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1889
XGetWMProtocols = platform.createBaseFunction( 
	'XGetWMProtocols', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,POINTER(POINTER(Atom)),POINTER(c_int)],
	doc='XGetWMProtocols( POINTER(Display)(None), Window(None), POINTER(POINTER(Atom))(None), POINTER(c_int)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 508
XGetWMSizeHints = platform.createBaseFunction( 
	'XGetWMSizeHints', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,POINTER(XSizeHints),POINTER(c_long),Atom],
	doc='XGetWMSizeHints( POINTER(Display)(None), Window(None), POINTER(XSizeHints)(None), POINTER(c_long)(None), Atom(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None'),
)

class XWindowAttributes(Structure):
    pass
# /usr/include/X11/Xlib.h 2697
XGetWindowAttributes = platform.createBaseFunction( 
	'XGetWindowAttributes', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,POINTER(XWindowAttributes)],
	doc='XGetWindowAttributes( POINTER(Display)(None), Window(None), POINTER(XWindowAttributes)(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2691
XGetWindowProperty = platform.createBaseFunction( 
	'XGetWindowProperty', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,Atom,c_long,c_long,c_int,Atom,POINTER(Atom),POINTER(c_int),POINTER(c_ulong),POINTER(c_ulong),POINTER(POINTER(c_ubyte))],
	doc='XGetWindowProperty( POINTER(Display)(None), Window(None), Atom(None), c_long(None), c_long(None), c_int(None), Atom(None), POINTER(Atom)(None), POINTER(c_int)(None), POINTER(c_ulong)(None), POINTER(c_ulong)(None), POINTER(POINTER(c_ubyte))(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 514
XGetZoomHints = platform.createBaseFunction( 
	'XGetZoomHints', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,POINTER(XSizeHints)],
	doc='XGetZoomHints( POINTER(Display)(None), Window(None), POINTER(XSizeHints)(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2710
XGrabButton = platform.createBaseFunction( 
	'XGrabButton', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),c_uint,c_uint,Window,c_int,c_uint,c_int,c_int,Window,Cursor],
	doc='XGrabButton( POINTER(Display)(None), c_uint(None), c_uint(None), Window(None), c_int(None), c_uint(None), c_int(None), c_int(None), Window(None), Cursor(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2720
XGrabKey = platform.createBaseFunction( 
	'XGrabKey', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),c_int,c_uint,Window,c_int,c_int,c_int],
	doc='XGrabKey( POINTER(Display)(None), c_int(None), c_uint(None), Window(None), c_int(None), c_int(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2729
XGrabKeyboard = platform.createBaseFunction( 
	'XGrabKeyboard', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,c_int,c_int,c_int,Time],
	doc='XGrabKeyboard( POINTER(Display)(None), Window(None), c_int(None), c_int(None), c_int(None), Time(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2741
XGrabPointer = platform.createBaseFunction( 
	'XGrabPointer', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,c_int,c_uint,c_int,c_int,Window,Cursor,Time],
	doc='XGrabPointer( POINTER(Display)(None), Window(None), c_int(None), c_uint(None), c_int(None), c_int(None), Window(None), Cursor(None), Time(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2745
XGrabServer = platform.createBaseFunction( 
	'XGrabServer', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display)],
	doc='XGrabServer( POINTER(Display)(None) ) -> c_int', 
	argNames=('None',),
)

class XGraphicsExposeEvent(Structure):
    pass
XGraphicsExposeEvent._fields_ = [
    # /usr/include/X11/Xlib.h 716
    ('type', c_int),
    ('serial', c_ulong),
    ('send_event', c_int),
    ('display', POINTER(Display)),
    ('drawable', Drawable),
    ('x', c_int),
    ('y', c_int),
    ('width', c_int),
    ('height', c_int),
    ('count', c_int),
    ('major_code', c_int),
    ('minor_code', c_int),
]
class XGravityEvent(Structure):
    pass
XGravityEvent._fields_ = [
    # /usr/include/X11/Xlib.h 822
    ('type', c_int),
    ('serial', c_ulong),
    ('send_event', c_int),
    ('display', POINTER(Display)),
    ('event', Window),
    ('window', Window),
    ('x', c_int),
    ('y', c_int),
]

# /usr/include/X11/Xlib.h 2749
XHeightMMOfScreen = platform.createBaseFunction( 
	'XHeightMMOfScreen', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Screen)],
	doc='XHeightMMOfScreen( POINTER(Screen)(None) ) -> c_int', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 2753
XHeightOfScreen = platform.createBaseFunction( 
	'XHeightOfScreen', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Screen)],
	doc='XHeightOfScreen( POINTER(Screen)(None) ) -> c_int', 
	argNames=('None',),
)

XHostAddress._fields_ = [
    # /usr/include/X11/Xlib.h 377
    ('family', c_int),
    ('length', c_int),
    ('address', STRING),
]

# values for enumeration 'XICCEncodingStyle'
XStringStyle = 0
XTextStyle = 2
XStdICCTextStyle = 3
XUTF8StringStyle = 4
XICCEncodingStyle = c_int # enum
class XICCallback(Structure):
    pass

XICProc = CFUNCTYPE(c_int, POINTER(_XIC), STRING, STRING)
XICCallback._fields_ = [
    # /usr/include/X11/Xlib.h 1246
    ('client_data', XPointer),
    ('callback', XICProc),
]

XIDProc = CFUNCTYPE(None, POINTER(Display), STRING, STRING)
XIMAbsolutePosition = 10
XIMBackwardChar = 1
XIMBackwardWord = 3
XIMBitmapType = 1
class XIMCallback(Structure):
    pass

XIMProc = CFUNCTYPE(None, POINTER(_XIM), STRING, STRING)
XIMCallback._fields_ = [
    # /usr/include/X11/Xlib.h 1241
    ('client_data', XPointer),
    ('callback', XIMProc),
]

# values for enumeration 'XIMCaretDirection'
XIMForwardChar = 0
XIMForwardWord = 2
XIMCaretUp = 4
XIMCaretDown = 5
XIMNextLine = 6
XIMPreviousLine = 7
XIMLineStart = 8
XIMLineEnd = 9
XIMDontChange = 11
XIMCaretDirection = c_int # enum

# values for enumeration 'XIMCaretStyle'
XIMIsInvisible = 0
XIMIsPrimary = 1
XIMIsSecondary = 2
XIMCaretStyle = c_int # enum
XIMFeedback = c_ulong
XIMHotKeyState = c_ulong
class _XIMHotKeyTrigger(Structure):
    pass
XIMHotKeyTrigger = _XIMHotKeyTrigger
class _XIMHotKeyTriggers(Structure):
    pass
XIMHotKeyTriggers = _XIMHotKeyTriggers

# /usr/include/X11/Xlib.h 3893
XIMOfIC = platform.createBaseFunction( 
	'XIMOfIC', dll=platform.GL, resultType=XIM, 
	argTypes=[XIC],
	doc='XIMOfIC( XIC(None) ) -> XIM', 
	argNames=('None',),
)

class _XIMPreeditCaretCallbackStruct(Structure):
    pass
XIMPreeditCaretCallbackStruct = _XIMPreeditCaretCallbackStruct
class _XIMPreeditDrawCallbackStruct(Structure):
    pass
XIMPreeditDrawCallbackStruct = _XIMPreeditDrawCallbackStruct
XIMPreeditState = c_ulong
class _XIMPreeditStateNotifyCallbackStruct(Structure):
    pass
XIMPreeditStateNotifyCallbackStruct = _XIMPreeditStateNotifyCallbackStruct
XIMResetState = c_ulong

# values for enumeration 'XIMStatusDataType'
XIMTextType = 0
XIMStatusDataType = c_int # enum
class _XIMStatusDrawCallbackStruct(Structure):
    pass
XIMStatusDrawCallbackStruct = _XIMStatusDrawCallbackStruct
class _XIMStringConversionCallbackStruct(Structure):
    pass
XIMStringConversionCallbackStruct = _XIMStringConversionCallbackStruct
XIMStringConversionFeedback = c_ulong
XIMStringConversionOperation = c_ushort
XIMStringConversionPosition = c_ushort
class _XIMStringConversionText(Structure):
    pass
XIMStringConversionText = _XIMStringConversionText
XIMStringConversionType = c_ushort
XIMStyle = c_ulong
class XIMStyles(Structure):
    pass

XIMStyles._fields_ = [
    # /usr/include/X11/Xlib.h 1174
    ('count_styles', c_ushort),
    ('supported_styles', POINTER(XIMStyle)),
]
class XIMValuesList(Structure):
    pass
XIMValuesList._fields_ = [
    # /usr/include/X11/Xlib.h 1387
    ('count_values', c_ushort),
    ('supported_values', POINTER(STRING)),
]

XIOErrorHandler = CFUNCTYPE(c_int, POINTER(Display))
XIconSize._fields_ = [
    # /usr/include/X11/Xutil.h 181
    ('min_width', c_int),
    ('min_height', c_int),
    ('max_width', c_int),
    ('max_height', c_int),
    ('width_inc', c_int),
    ('height_inc', c_int),
]

# /usr/include/X11/Xlib.h 1900
XIconifyWindow = platform.createBaseFunction( 
	'XIconifyWindow', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,c_int],
	doc='XIconifyWindow( POINTER(Display)(None), Window(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2764
XIfEvent = platform.createBaseFunction( 
	'XIfEvent', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),POINTER(XEvent),CFUNCTYPE(c_int, POINTER(Display), POINTER(XEvent), STRING),XPointer],
	doc='XIfEvent( POINTER(Display)(None), POINTER(XEvent)(None), CFUNCTYPE(c_int, POINTER(Display), POINTER(XEvent), STRING)(None), XPointer(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2768
XImageByteOrder = platform.createBaseFunction( 
	'XImageByteOrder', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display)],
	doc='XImageByteOrder( POINTER(Display)(None) ) -> c_int', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 1753
XInitExtension = platform.createBaseFunction( 
	'XInitExtension', dll=platform.GL, resultType=POINTER(XExtCodes), 
	argTypes=[POINTER(Display),STRING],
	doc='XInitExtension( POINTER(Display)(None), STRING(None) ) -> POINTER(XExtCodes)', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 1458
XInitImage = platform.createBaseFunction( 
	'XInitImage', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(XImage)],
	doc='XInitImage( POINTER(XImage)(None) ) -> c_int', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 1738
XInitThreads = platform.createBaseFunction( 
	'XInitThreads', dll=platform.GL, resultType=c_int, 
	argTypes=[],
	doc='XInitThreads(  ) -> c_int', 
	argNames=(),
)


# /usr/include/X11/Xlib.h 1438
XInsertModifiermapEntry = platform.createBaseFunction( 
	'XInsertModifiermapEntry', dll=platform.GL, resultType=POINTER(XModifierKeymap), 
	argTypes=[POINTER(XModifierKeymap),KeyCode,c_int],
	doc='XInsertModifiermapEntry( POINTER(XModifierKeymap)(None), KeyCode(None), c_int(None) ) -> POINTER(XModifierKeymap)', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2773
XInstallColormap = platform.createBaseFunction( 
	'XInstallColormap', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Colormap],
	doc='XInstallColormap( POINTER(Display)(None), Colormap(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 1543
XInternAtom = platform.createBaseFunction( 
	'XInternAtom', dll=platform.GL, resultType=Atom, 
	argTypes=[POINTER(Display),STRING,c_int],
	doc='XInternAtom( POINTER(Display)(None), STRING(None), c_int(None) ) -> Atom', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1550
XInternAtoms = platform.createBaseFunction( 
	'XInternAtoms', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),POINTER(STRING),c_int,c_int,POINTER(Atom)],
	doc='XInternAtoms( POINTER(Display)(None), POINTER(STRING)(None), c_int(None), c_int(None), POINTER(Atom)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3964
XInternalConnectionNumbers = platform.createBaseFunction( 
	'XInternalConnectionNumbers', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),POINTER(POINTER(c_int)),POINTER(c_int)],
	doc='XInternalConnectionNumbers( POINTER(Display)(None), POINTER(POINTER(c_int))(None), POINTER(c_int)(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 520
XIntersectRegion = platform.createBaseFunction( 
	'XIntersectRegion', dll=platform.GL, resultType=c_int, 
	argTypes=[Region,Region,Region],
	doc='XIntersectRegion( Region(None), Region(None), Region(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)

class XKeyEvent(Structure):
    pass
XKeyEvent._fields_ = [
    # /usr/include/X11/Xlib.h 603
    ('type', c_int),
    ('serial', c_ulong),
    ('send_event', c_int),
    ('display', POINTER(Display)),
    ('window', Window),
    ('root', Window),
    ('subwindow', Window),
    ('time', Time),
    ('x', c_int),
    ('y', c_int),
    ('x_root', c_int),
    ('y_root', c_int),
    ('state', c_uint),
    ('keycode', c_uint),
    ('same_screen', c_int),
]
XKeyPressedEvent = XKeyEvent
XKeyReleasedEvent = XKeyEvent
XKeyboardControl._fields_ = [
    # /usr/include/X11/Xlib.h 485
    ('key_click_percent', c_int),
    ('bell_percent', c_int),
    ('bell_pitch', c_int),
    ('bell_duration', c_int),
    ('led', c_int),
    ('led_mode', c_int),
    ('key', c_int),
    ('auto_repeat_mode', c_int),
]

XKeyboardState._fields_ = [
    # /usr/include/X11/Xlib.h 496
    ('key_click_percent', c_int),
    ('bell_percent', c_int),
    ('bell_pitch', c_uint),
    ('bell_duration', c_uint),
    ('led_mask', c_ulong),
    ('global_auto_repeat', c_int),
    ('auto_repeats', c_char * 32),
]

# /usr/include/X11/Xlib.h 1697
XKeycodeToKeysym = platform.createBaseFunction( 
	'XKeycodeToKeysym', dll=platform.GL, resultType=KeySym, 
	argTypes=[POINTER(Display),KeyCode,c_int],
	doc='XKeycodeToKeysym( POINTER(Display)(None), KeyCode(None), c_int(None) ) -> KeySym', 
	argNames=('None', 'None', 'None'),
)

class XKeymapEvent(Structure):
    pass
XKeymapEvent._fields_ = [
    # /usr/include/X11/Xlib.h 692
    ('type', c_int),
    ('serial', c_ulong),
    ('send_event', c_int),
    ('display', POINTER(Display)),
    ('window', Window),
    ('key_vector', c_char * 32),
]

# /usr/include/X11/Xlib.h 2778
XKeysymToKeycode = platform.createBaseFunction( 
	'XKeysymToKeycode', dll=platform.GL, resultType=KeyCode, 
	argTypes=[POINTER(Display),KeySym],
	doc='XKeysymToKeycode( POINTER(Display)(None), KeySym(None) ) -> KeyCode', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 1523
XKeysymToString = platform.createBaseFunction( 
	'XKeysymToString', dll=platform.GL, resultType=STRING, 
	argTypes=[KeySym],
	doc='XKeysymToString( KeySym(None) ) -> STRING', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 2783
XKillClient = platform.createBaseFunction( 
	'XKillClient', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),XID],
	doc='XKillClient( POINTER(Display)(None), XID(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 1813
XLastKnownRequestProcessed = platform.createBaseFunction( 
	'XLastKnownRequestProcessed', dll=platform.GL, resultType=c_ulong, 
	argTypes=[POINTER(Display)],
	doc='XLastKnownRequestProcessed( POINTER(Display)(None) ) -> c_ulong', 
	argNames=('None',),
)

XLeaveWindowEvent = XCrossingEvent

# /usr/include/X11/Xlib.h 1872
XListDepths = platform.createBaseFunction( 
	'XListDepths', dll=platform.GL, resultType=POINTER(c_int), 
	argTypes=[POINTER(Display),c_int,POINTER(c_int)],
	doc='XListDepths( POINTER(Display)(None), c_int(None), POINTER(c_int)(None) ) -> POINTER(c_int)', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1678
XListExtensions = platform.createBaseFunction( 
	'XListExtensions', dll=platform.GL, resultType=POINTER(STRING), 
	argTypes=[POINTER(Display),POINTER(c_int)],
	doc='XListExtensions( POINTER(Display)(None), POINTER(c_int)(None) ) -> POINTER(STRING)', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 1663
XListFonts = platform.createBaseFunction( 
	'XListFonts', dll=platform.GL, resultType=POINTER(STRING), 
	argTypes=[POINTER(Display),STRING,c_int,POINTER(c_int)],
	doc='XListFonts( POINTER(Display)(None), STRING(None), c_int(None), POINTER(c_int)(None) ) -> POINTER(STRING)', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1670
XListFontsWithInfo = platform.createBaseFunction( 
	'XListFontsWithInfo', dll=platform.GL, resultType=POINTER(STRING), 
	argTypes=[POINTER(Display),STRING,c_int,POINTER(c_int),POINTER(POINTER(XFontStruct))],
	doc='XListFontsWithInfo( POINTER(Display)(None), STRING(None), c_int(None), POINTER(c_int)(None), POINTER(POINTER(XFontStruct))(None) ) -> POINTER(STRING)', 
	argNames=('None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1688
XListHosts = platform.createBaseFunction( 
	'XListHosts', dll=platform.GL, resultType=POINTER(XHostAddress), 
	argTypes=[POINTER(Display),POINTER(c_int),POINTER(c_int)],
	doc='XListHosts( POINTER(Display)(None), POINTER(c_int)(None), POINTER(c_int)(None) ) -> POINTER(XHostAddress)', 
	argNames=('None', 'None', 'None'),
)



# /usr/include/X11/Xlib.h 1657
XListInstalledColormaps = platform.createBaseFunction( 
	'XListInstalledColormaps', dll=platform.GL, resultType=POINTER(Colormap), 
	argTypes=[POINTER(Display),Window,POINTER(c_int)],
	doc='XListInstalledColormaps( POINTER(Display)(None), Window(None), POINTER(c_int)(None) ) -> POINTER(Colormap)', 
	argNames=('None', 'None', 'None'),
)

class XPixmapFormatValues(Structure):
    pass

# /usr/include/X11/Xlib.h 1867
XListPixmapFormats = platform.createBaseFunction( 
	'XListPixmapFormats', dll=platform.GL, resultType=POINTER(XPixmapFormatValues), 
	argTypes=[POINTER(Display),POINTER(c_int)],
	doc='XListPixmapFormats( POINTER(Display)(None), POINTER(c_int)(None) ) -> POINTER(XPixmapFormatValues)', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 1683
XListProperties = platform.createBaseFunction( 
	'XListProperties', dll=platform.GL, resultType=POINTER(Atom), 
	argTypes=[POINTER(Display),Window,POINTER(c_int)],
	doc='XListProperties( POINTER(Display)(None), Window(None), POINTER(c_int)(None) ) -> POINTER(Atom)', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1586
XLoadFont = platform.createBaseFunction( 
	'XLoadFont', dll=platform.GL, resultType=Font, 
	argTypes=[POINTER(Display),STRING],
	doc='XLoadFont( POINTER(Display)(None), STRING(None) ) -> Font', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 1400
XLoadQueryFont = platform.createBaseFunction( 
	'XLoadQueryFont', dll=platform.GL, resultType=POINTER(XFontStruct), 
	argTypes=[POINTER(Display),STRING],
	doc='XLoadQueryFont( POINTER(Display)(None), STRING(None) ) -> POINTER(XFontStruct)', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 3636
XLocaleOfFontSet = platform.createBaseFunction( 
	'XLocaleOfFontSet', dll=platform.GL, resultType=STRING, 
	argTypes=[XFontSet],
	doc='XLocaleOfFontSet( XFontSet(None) ) -> STRING', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 3853
XLocaleOfIM = platform.createBaseFunction( 
	'XLocaleOfIM', dll=platform.GL, resultType=STRING, 
	argTypes=[XIM],
	doc='XLocaleOfIM( XIM(None) ) -> STRING', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 3586
XLocaleOfOM = platform.createBaseFunction( 
	'XLocaleOfOM', dll=platform.GL, resultType=STRING, 
	argTypes=[XOM],
	doc='XLocaleOfOM( XOM(None) ) -> STRING', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 1742
XLockDisplay = platform.createBaseFunction( 
	'XLockDisplay', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(Display)],
	doc='XLockDisplay( POINTER(Display)(None) ) -> None', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 2791
XLookupColor = platform.createBaseFunction( 
	'XLookupColor', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Colormap,STRING,POINTER(XColor),POINTER(XColor)],
	doc='XLookupColor( POINTER(Display)(None), Colormap(None), STRING(None), POINTER(XColor)(None), POINTER(XColor)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1701
XLookupKeysym = platform.createBaseFunction( 
	'XLookupKeysym', dll=platform.GL, resultType=KeySym, 
	argTypes=[POINTER(XKeyEvent),c_int],
	doc='XLookupKeysym( POINTER(XKeyEvent)(None), c_int(None) ) -> KeySym', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xutil.h 534
XLookupString = platform.createBaseFunction( 
	'XLookupString', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(XKeyEvent),STRING,c_int,POINTER(KeySym),POINTER(XComposeStatus)],
	doc='XLookupString( POINTER(XKeyEvent)(None), STRING(None), c_int(None), POINTER(KeySym)(None), POINTER(XComposeStatus)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2796
XLowerWindow = platform.createBaseFunction( 
	'XLowerWindow', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window],
	doc='XLowerWindow( POINTER(Display)(None), Window(None) ) -> c_int', 
	argNames=('None', 'None'),
)

class XMapEvent(Structure):
    pass
XMapEvent._fields_ = [
    # /usr/include/X11/Xlib.h 777
    ('type', c_int),
    ('serial', c_ulong),
    ('send_event', c_int),
    ('display', POINTER(Display)),
    ('event', Window),
    ('window', Window),
    ('override_redirect', c_int),
]

# /usr/include/X11/Xlib.h 2801
XMapRaised = platform.createBaseFunction( 
	'XMapRaised', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window],
	doc='XMapRaised( POINTER(Display)(None), Window(None) ) -> c_int', 
	argNames=('None', 'None'),
)

class XMapRequestEvent(Structure):
    pass
XMapRequestEvent._fields_ = [
    # /usr/include/X11/Xlib.h 786
    ('type', c_int),
    ('serial', c_ulong),
    ('send_event', c_int),
    ('display', POINTER(Display)),
    ('parent', Window),
    ('window', Window),
]

# /usr/include/X11/Xlib.h 2806
XMapSubwindows = platform.createBaseFunction( 
	'XMapSubwindows', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window],
	doc='XMapSubwindows( POINTER(Display)(None), Window(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 2811
XMapWindow = platform.createBaseFunction( 
	'XMapWindow', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window],
	doc='XMapWindow( POINTER(Display)(None), Window(None) ) -> c_int', 
	argNames=('None', 'None'),
)

class XMappingEvent(Structure):
    pass
XMappingEvent._fields_ = [
    # /usr/include/X11/Xlib.h 954
    ('type', c_int),
    ('serial', c_ulong),
    ('send_event', c_int),
    ('display', POINTER(Display)),
    ('window', Window),
    ('request', c_int),
    ('first_keycode', c_int),
    ('count', c_int),
]

# /usr/include/X11/Xlib.h 2817
XMaskEvent = platform.createBaseFunction( 
	'XMaskEvent', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),c_long,POINTER(XEvent)],
	doc='XMaskEvent( POINTER(Display)(None), c_long(None), POINTER(XEvent)(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 542
XMatchVisualInfo = platform.createBaseFunction( 
	'XMatchVisualInfo', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),c_int,c_int,c_int,POINTER(XVisualInfo)],
	doc='XMatchVisualInfo( POINTER(Display)(None), c_int(None), c_int(None), c_int(None), POINTER(XVisualInfo)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2821
XMaxCmapsOfScreen = platform.createBaseFunction( 
	'XMaxCmapsOfScreen', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Screen)],
	doc='XMaxCmapsOfScreen( POINTER(Screen)(None) ) -> c_int', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 1717
XMaxRequestSize = platform.createBaseFunction( 
	'XMaxRequestSize', dll=platform.GL, resultType=c_long, 
	argTypes=[POINTER(Display)],
	doc='XMaxRequestSize( POINTER(Display)(None) ) -> c_long', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 2825
XMinCmapsOfScreen = platform.createBaseFunction( 
	'XMinCmapsOfScreen', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Screen)],
	doc='XMinCmapsOfScreen( POINTER(Screen)(None) ) -> c_int', 
	argNames=('None',),
)


XModifierKeymap._fields_ = [
    # /usr/include/X11/Xlib.h 510
    ('max_keypermod', c_int),
    ('modifiermap', POINTER(KeyCode)),
]
class XMotionEvent(Structure):
    pass
XMotionEvent._fields_ = [
    # /usr/include/X11/Xlib.h 639
    ('type', c_int),
    ('serial', c_ulong),
    ('send_event', c_int),
    ('display', POINTER(Display)),
    ('window', Window),
    ('root', Window),
    ('subwindow', Window),
    ('time', Time),
    ('x', c_int),
    ('y', c_int),
    ('x_root', c_int),
    ('y_root', c_int),
    ('state', c_uint),
    ('is_hint', c_char),
    ('same_screen', c_int),
]

# /usr/include/X11/Xlib.h 2834
XMoveResizeWindow = platform.createBaseFunction( 
	'XMoveResizeWindow', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,c_int,c_int,c_uint,c_uint],
	doc='XMoveResizeWindow( POINTER(Display)(None), Window(None), c_int(None), c_int(None), c_uint(None), c_uint(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2841
XMoveWindow = platform.createBaseFunction( 
	'XMoveWindow', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,c_int,c_int],
	doc='XMoveWindow( POINTER(Display)(None), Window(None), c_int(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1442
XNewModifiermap = platform.createBaseFunction( 
	'XNewModifiermap', dll=platform.GL, resultType=POINTER(XModifierKeymap), 
	argTypes=[c_int],
	doc='XNewModifiermap( c_int(None) ) -> POINTER(XModifierKeymap)', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 2846
XNextEvent = platform.createBaseFunction( 
	'XNextEvent', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),POINTER(XEvent)],
	doc='XNextEvent( POINTER(Display)(None), POINTER(XEvent)(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 1810
XNextRequest = platform.createBaseFunction( 
	'XNextRequest', dll=platform.GL, resultType=c_ulong, 
	argTypes=[POINTER(Display)],
	doc='XNextRequest( POINTER(Display)(None) ) -> c_ulong', 
	argNames=('None',),
)

class XNoExposeEvent(Structure):
    pass
XNoExposeEvent._fields_ = [
    # /usr/include/X11/Xlib.h 726
    ('type', c_int),
    ('serial', c_ulong),
    ('send_event', c_int),
    ('display', POINTER(Display)),
    ('drawable', Drawable),
    ('major_code', c_int),
    ('minor_code', c_int),
]

# /usr/include/X11/Xlib.h 2850
XNoOp = platform.createBaseFunction( 
	'XNoOp', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display)],
	doc='XNoOp( POINTER(Display)(None) ) -> c_int', 
	argNames=('None',),
)

class XOMCharSetList(Structure):
    pass
XOMCharSetList._fields_ = [
    # /usr/include/X11/Xlib.h 1127
    ('charset_count', c_int),
    ('charset_list', POINTER(STRING)),
]
class XOMFontInfo(Structure):
    pass
XOMFontInfo._fields_ = [
    # /usr/include/X11/Xlib.h 1146
    ('num_font', c_int),
    ('font_struct_list', POINTER(POINTER(XFontStruct))),
    ('font_name_list', POINTER(STRING)),
]

# /usr/include/X11/Xlib.h 3599
XOMOfOC = platform.createBaseFunction( 
	'XOMOfOC', dll=platform.GL, resultType=XOM, 
	argTypes=[XOC],
	doc='XOMOfOC( XOC(None) ) -> XOM', 
	argNames=('None',),
)

class XOMOrientation(Structure):
    pass

# values for enumeration 'XOrientation'
XOMOrientation_LTR_TTB = 0
XOMOrientation_RTL_TTB = 1
XOMOrientation_TTB_LTR = 2
XOMOrientation_TTB_RTL = 3
XOMOrientation_Context = 4
XOrientation = c_int # enum
XOMOrientation._fields_ = [
    # /usr/include/X11/Xlib.h 1140
    ('num_orientation', c_int),
    ('orientation', POINTER(XOrientation)),
]

# /usr/include/X11/Xutil.h 548
XOffsetRegion = platform.createBaseFunction( 
	'XOffsetRegion', dll=platform.GL, resultType=c_int, 
	argTypes=[Region,c_int,c_int],
	doc='XOffsetRegion( Region(None), c_int(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1488
XOpenDisplay = platform.createBaseFunction( 
	'XOpenDisplay', dll=platform.GL, resultType=POINTER(Display), 
	argTypes=[STRING],
	doc='XOpenDisplay( STRING(None) ) -> POINTER(Display)', 
	argNames=('None',),
)

class _XrmHashBucketRec(Structure):
    pass
# /usr/include/X11/Xlib.h 3833
XOpenIM = platform.createBaseFunction( 
	'XOpenIM', dll=platform.GL, resultType=XIM, 
	argTypes=[POINTER(Display),POINTER(_XrmHashBucketRec),STRING,STRING],
	doc='XOpenIM( POINTER(Display)(None), POINTER(_XrmHashBucketRec)(None), STRING(None), STRING(None) ) -> XIM', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3564
XOpenOM = platform.createBaseFunction( 
	'XOpenOM', dll=platform.GL, resultType=XOM, 
	argTypes=[POINTER(Display),POINTER(_XrmHashBucketRec),STRING,STRING],
	doc='XOpenOM( POINTER(Display)(None), POINTER(_XrmHashBucketRec)(None), STRING(None), STRING(None) ) -> XOM', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2857
XParseColor = platform.createBaseFunction( 
	'XParseColor', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Colormap,STRING,POINTER(XColor)],
	doc='XParseColor( POINTER(Display)(None), Colormap(None), STRING(None), POINTER(XColor)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2865
XParseGeometry = platform.createBaseFunction( 
	'XParseGeometry', dll=platform.GL, resultType=c_int, 
	argTypes=[STRING,POINTER(c_int),POINTER(c_int),POINTER(c_uint),POINTER(c_uint)],
	doc='XParseGeometry( STRING(None), POINTER(c_int)(None), POINTER(c_int)(None), POINTER(c_uint)(None), POINTER(c_uint)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2870
XPeekEvent = platform.createBaseFunction( 
	'XPeekEvent', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),POINTER(XEvent)],
	doc='XPeekEvent( POINTER(Display)(None), POINTER(XEvent)(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 2881
XPeekIfEvent = platform.createBaseFunction( 
	'XPeekIfEvent', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),POINTER(XEvent),CFUNCTYPE(c_int, POINTER(Display), POINTER(XEvent), STRING),XPointer],
	doc='XPeekIfEvent( POINTER(Display)(None), POINTER(XEvent)(None), CFUNCTYPE(c_int, POINTER(Display), POINTER(XEvent), STRING)(None), XPointer(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2885
XPending = platform.createBaseFunction( 
	'XPending', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display)],
	doc='XPending( POINTER(Display)(None) ) -> c_int', 
	argNames=('None',),
)

XPixmapFormatValues._fields_ = [
    # /usr/include/X11/Xlib.h 207
    ('depth', c_int),
    ('bits_per_pixel', c_int),
    ('scanline_pad', c_int),
]

# /usr/include/X11/Xlib.h 2889
XPlanesOfScreen = platform.createBaseFunction( 
	'XPlanesOfScreen', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Screen)],
	doc='XPlanesOfScreen( POINTER(Screen)(None) ) -> c_int', 
	argNames=('None',),
)

XPoint._fields_ = [
    # /usr/include/X11/Xlib.h 460
    ('x', c_short),
    ('y', c_short),
]

# /usr/include/X11/Xutil.h 554
XPointInRegion = platform.createBaseFunction( 
	'XPointInRegion', dll=platform.GL, resultType=c_int, 
	argTypes=[Region,c_int,c_int],
	doc='XPointInRegion( Region(None), c_int(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)

XPointerMovedEvent = XMotionEvent

# /usr/include/X11/Xutil.h 560
XPolygonRegion = platform.createBaseFunction( 
	'XPolygonRegion', dll=platform.GL, resultType=Region, 
	argTypes=[POINTER(XPoint),c_int,c_int],
	doc='XPolygonRegion( POINTER(XPoint)(None), c_int(None), c_int(None) ) -> Region', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3969
XProcessInternalConnection = platform.createBaseFunction( 
	'XProcessInternalConnection', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(Display),c_int],
	doc='XProcessInternalConnection( POINTER(Display)(None), c_int(None) ) -> None', 
	argNames=('None', 'None'),
)

class XPropertyEvent(Structure):
    pass
XPropertyEvent._fields_ = [
    # /usr/include/X11/Xlib.h 877
    ('type', c_int),
    ('serial', c_ulong),
    ('send_event', c_int),
    ('display', POINTER(Display)),
    ('window', Window),
    ('atom', Atom),
    ('time', Time),
    ('state', c_int),
]

# /usr/include/X11/Xlib.h 2893
XProtocolRevision = platform.createBaseFunction( 
	'XProtocolRevision', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display)],
	doc='XProtocolRevision( POINTER(Display)(None) ) -> c_int', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 2897
XProtocolVersion = platform.createBaseFunction( 
	'XProtocolVersion', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display)],
	doc='XProtocolVersion( POINTER(Display)(None) ) -> c_int', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 2903
XPutBackEvent = platform.createBaseFunction( 
	'XPutBackEvent', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),POINTER(XEvent)],
	doc='XPutBackEvent( POINTER(Display)(None), POINTER(XEvent)(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 2916
XPutImage = platform.createBaseFunction( 
	'XPutImage', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Drawable,GC,POINTER(XImage),c_int,c_int,c_int,c_int,c_uint,c_uint],
	doc='XPutImage( POINTER(Display)(None), Drawable(None), GC(None), POINTER(XImage)(None), c_int(None), c_int(None), c_int(None), c_int(None), c_uint(None), c_uint(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None'),
)

#def XPutPixel(ximage,x,y,pixel): return ((*((ximage)->f.put_pixel))((ximage), (x), (y), (pixel))) # macro

# /usr/include/X11/Xlib.h 2920
XQLength = platform.createBaseFunction( 
	'XQLength', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display)],
	doc='XQLength( POINTER(Display)(None) ) -> c_int', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 2929
XQueryBestCursor = platform.createBaseFunction( 
	'XQueryBestCursor', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Drawable,c_uint,c_uint,POINTER(c_uint),POINTER(c_uint)],
	doc='XQueryBestCursor( POINTER(Display)(None), Drawable(None), c_uint(None), c_uint(None), POINTER(c_uint)(None), POINTER(c_uint)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2939
XQueryBestSize = platform.createBaseFunction( 
	'XQueryBestSize', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),c_int,Drawable,c_uint,c_uint,POINTER(c_uint),POINTER(c_uint)],
	doc='XQueryBestSize( POINTER(Display)(None), c_int(None), Drawable(None), c_uint(None), c_uint(None), POINTER(c_uint)(None), POINTER(c_uint)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2948
XQueryBestStipple = platform.createBaseFunction( 
	'XQueryBestStipple', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Drawable,c_uint,c_uint,POINTER(c_uint),POINTER(c_uint)],
	doc='XQueryBestStipple( POINTER(Display)(None), Drawable(None), c_uint(None), c_uint(None), POINTER(c_uint)(None), POINTER(c_uint)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2957
XQueryBestTile = platform.createBaseFunction( 
	'XQueryBestTile', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Drawable,c_uint,c_uint,POINTER(c_uint),POINTER(c_uint)],
	doc='XQueryBestTile( POINTER(Display)(None), Drawable(None), c_uint(None), c_uint(None), POINTER(c_uint)(None), POINTER(c_uint)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2963
XQueryColor = platform.createBaseFunction( 
	'XQueryColor', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Colormap,POINTER(XColor)],
	doc='XQueryColor( POINTER(Display)(None), Colormap(None), POINTER(XColor)(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2970
XQueryColors = platform.createBaseFunction( 
	'XQueryColors', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Colormap,POINTER(XColor),c_int],
	doc='XQueryColors( POINTER(Display)(None), Colormap(None), POINTER(XColor)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 2978
XQueryExtension = platform.createBaseFunction( 
	'XQueryExtension', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),STRING,POINTER(c_int),POINTER(c_int),POINTER(c_int)],
	doc='XQueryExtension( POINTER(Display)(None), STRING(None), POINTER(c_int)(None), POINTER(c_int)(None), POINTER(c_int)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1405
XQueryFont = platform.createBaseFunction( 
	'XQueryFont', dll=platform.GL, resultType=POINTER(XFontStruct), 
	argTypes=[POINTER(Display),XID],
	doc='XQueryFont( POINTER(Display)(None), XID(None) ) -> POINTER(XFontStruct)', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 2983
XQueryKeymap = platform.createBaseFunction( 
	'XQueryKeymap', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),STRING],
	doc='XQueryKeymap( POINTER(Display)(None), STRING(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 2995
XQueryPointer = platform.createBaseFunction( 
	'XQueryPointer', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,POINTER(Window),POINTER(Window),POINTER(c_int),POINTER(c_int),POINTER(c_int),POINTER(c_int),POINTER(c_uint)],
	doc='XQueryPointer( POINTER(Display)(None), Window(None), POINTER(Window)(None), POINTER(Window)(None), POINTER(c_int)(None), POINTER(c_int)(None), POINTER(c_int)(None), POINTER(c_int)(None), POINTER(c_uint)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3006
XQueryTextExtents = platform.createBaseFunction( 
	'XQueryTextExtents', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),XID,STRING,c_int,POINTER(c_int),POINTER(c_int),POINTER(c_int),POINTER(XCharStruct)],
	doc='XQueryTextExtents( POINTER(Display)(None), XID(None), STRING(None), c_int(None), POINTER(c_int)(None), POINTER(c_int)(None), POINTER(c_int)(None), POINTER(XCharStruct)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3017
XQueryTextExtents16 = platform.createBaseFunction( 
	'XQueryTextExtents16', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),XID,POINTER(XChar2b),c_int,POINTER(c_int),POINTER(c_int),POINTER(c_int),POINTER(XCharStruct)],
	doc='XQueryTextExtents16( POINTER(Display)(None), XID(None), POINTER(XChar2b)(None), c_int(None), POINTER(c_int)(None), POINTER(c_int)(None), POINTER(c_int)(None), POINTER(XCharStruct)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3026
XQueryTree = platform.createBaseFunction( 
	'XQueryTree', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,POINTER(Window),POINTER(Window),POINTER(POINTER(Window)),POINTER(c_uint)],
	doc='XQueryTree( POINTER(Display)(None), Window(None), POINTER(Window)(None), POINTER(Window)(None), POINTER(POINTER(Window))(None), POINTER(c_uint)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3031
XRaiseWindow = platform.createBaseFunction( 
	'XRaiseWindow', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window],
	doc='XRaiseWindow( POINTER(Display)(None), Window(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 3042
XReadBitmapFile = platform.createBaseFunction( 
	'XReadBitmapFile', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Drawable,STRING,POINTER(c_uint),POINTER(c_uint),POINTER(Pixmap),POINTER(c_int),POINTER(c_int)],
	doc='XReadBitmapFile( POINTER(Display)(None), Drawable(None), STRING(None), POINTER(c_uint)(None), POINTER(c_uint)(None), POINTER(Pixmap)(None), POINTER(c_int)(None), POINTER(c_int)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3051
XReadBitmapFileData = platform.createBaseFunction( 
	'XReadBitmapFileData', dll=platform.GL, resultType=c_int, 
	argTypes=[STRING,POINTER(c_uint),POINTER(c_uint),POINTER(POINTER(c_ubyte)),POINTER(c_int),POINTER(c_int)],
	doc='XReadBitmapFileData( STRING(None), POINTER(c_uint)(None), POINTER(c_uint)(None), POINTER(POINTER(c_ubyte))(None), POINTER(c_int)(None), POINTER(c_int)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3060
XRebindKeysym = platform.createBaseFunction( 
	'XRebindKeysym', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),KeySym,POINTER(KeySym),c_int,POINTER(c_ubyte),c_int],
	doc='XRebindKeysym( POINTER(Display)(None), KeySym(None), POINTER(KeySym)(None), c_int(None), POINTER(c_ubyte)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3067
XRecolorCursor = platform.createBaseFunction( 
	'XRecolorCursor', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Cursor,POINTER(XColor),POINTER(XColor)],
	doc='XRecolorCursor( POINTER(Display)(None), Cursor(None), POINTER(XColor)(None), POINTER(XColor)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1882
XReconfigureWMWindow = platform.createBaseFunction( 
	'XReconfigureWMWindow', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,c_int,c_uint,POINTER(XWindowChanges)],
	doc='XReconfigureWMWindow( POINTER(Display)(None), Window(None), c_int(None), c_uint(None), POINTER(XWindowChanges)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 568
XRectInRegion = platform.createBaseFunction( 
	'XRectInRegion', dll=platform.GL, resultType=c_int, 
	argTypes=[Region,c_int,c_int,c_uint,c_uint],
	doc='XRectInRegion( Region(None), c_int(None), c_int(None), c_uint(None), c_uint(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3071
XRefreshKeyboardMapping = platform.createBaseFunction( 
	'XRefreshKeyboardMapping', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(XMappingEvent)],
	doc='XRefreshKeyboardMapping( POINTER(XMappingEvent)(None) ) -> c_int', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 3940
XRegisterIMInstantiateCallback = platform.createBaseFunction( 
	'XRegisterIMInstantiateCallback', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),POINTER(_XrmHashBucketRec),STRING,STRING,XIDProc,XPointer],
	doc='XRegisterIMInstantiateCallback( POINTER(Display)(None), POINTER(_XrmHashBucketRec)(None), STRING(None), STRING(None), XIDProc(None), XPointer(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3981
XRemoveConnectionWatch = platform.createBaseFunction( 
	'XRemoveConnectionWatch', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(Display),XConnectionWatchProc,XPointer],
	doc='XRemoveConnectionWatch( POINTER(Display)(None), XConnectionWatchProc(None), XPointer(None) ) -> None', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3076
XRemoveFromSaveSet = platform.createBaseFunction( 
	'XRemoveFromSaveSet', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window],
	doc='XRemoveFromSaveSet( POINTER(Display)(None), Window(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 3081
XRemoveHost = platform.createBaseFunction( 
	'XRemoveHost', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),POINTER(XHostAddress)],
	doc='XRemoveHost( POINTER(Display)(None), POINTER(XHostAddress)(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 3087
XRemoveHosts = platform.createBaseFunction( 
	'XRemoveHosts', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),POINTER(XHostAddress),c_int],
	doc='XRemoveHosts( POINTER(Display)(None), POINTER(XHostAddress)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)

class XReparentEvent(Structure):
    pass
XReparentEvent._fields_ = [
    # /usr/include/X11/Xlib.h 798
    ('type', c_int),
    ('serial', c_ulong),
    ('send_event', c_int),
    ('display', POINTER(Display)),
    ('event', Window),
    ('window', Window),
    ('parent', Window),
    ('x', c_int),
    ('y', c_int),
    ('override_redirect', c_int),
]

# /usr/include/X11/Xlib.h 3095
XReparentWindow = platform.createBaseFunction( 
	'XReparentWindow', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,Window,c_int,c_int],
	doc='XReparentWindow( POINTER(Display)(None), Window(None), Window(None), c_int(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3099
XResetScreenSaver = platform.createBaseFunction( 
	'XResetScreenSaver', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display)],
	doc='XResetScreenSaver( POINTER(Display)(None) ) -> c_int', 
	argNames=('None',),
)

class XResizeRequestEvent(Structure):
    pass
XResizeRequestEvent._fields_ = [
    # /usr/include/X11/Xlib.h 831
    ('type', c_int),
    ('serial', c_ulong),
    ('send_event', c_int),
    ('display', POINTER(Display)),
    ('window', Window),
    ('width', c_int),
    ('height', c_int),
]

# /usr/include/X11/Xlib.h 3106
XResizeWindow = platform.createBaseFunction( 
	'XResizeWindow', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,c_uint,c_uint],
	doc='XResizeWindow( POINTER(Display)(None), Window(None), c_uint(None), c_uint(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1723
XResourceManagerString = platform.createBaseFunction( 
	'XResourceManagerString', dll=platform.GL, resultType=STRING, 
	argTypes=[POINTER(Display)],
	doc='XResourceManagerString( POINTER(Display)(None) ) -> STRING', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 3112
XRestackWindows = platform.createBaseFunction( 
	'XRestackWindows', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),POINTER(Window),c_int],
	doc='XRestackWindows( POINTER(Display)(None), POINTER(Window)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1770
XRootWindow = platform.createBaseFunction( 
	'XRootWindow', dll=platform.GL, resultType=Window, 
	argTypes=[POINTER(Display),c_int],
	doc='XRootWindow( POINTER(Display)(None), c_int(None) ) -> Window', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 1776
XRootWindowOfScreen = platform.createBaseFunction( 
	'XRootWindowOfScreen', dll=platform.GL, resultType=Window, 
	argTypes=[POINTER(Screen)],
	doc='XRootWindowOfScreen( POINTER(Screen)(None) ) -> Window', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 3117
XRotateBuffers = platform.createBaseFunction( 
	'XRotateBuffers', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),c_int],
	doc='XRotateBuffers( POINTER(Display)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 3125
XRotateWindowProperties = platform.createBaseFunction( 
	'XRotateWindowProperties', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,POINTER(Atom),c_int,c_int],
	doc='XRotateWindowProperties( POINTER(Display)(None), Window(None), POINTER(Atom)(None), c_int(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 575
XSaveContext = platform.createBaseFunction( 
	'XSaveContext', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),XID,XContext,STRING],
	doc='XSaveContext( POINTER(Display)(None), XID(None), XContext(None), STRING(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3129
XScreenCount = platform.createBaseFunction( 
	'XScreenCount', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display)],
	doc='XScreenCount( POINTER(Display)(None) ) -> c_int', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 1843
XScreenNumberOfScreen = platform.createBaseFunction( 
	'XScreenNumberOfScreen', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Screen)],
	doc='XScreenNumberOfScreen( POINTER(Screen)(None) ) -> c_int', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 1833
XScreenOfDisplay = platform.createBaseFunction( 
	'XScreenOfDisplay', dll=platform.GL, resultType=POINTER(Screen), 
	argTypes=[POINTER(Display),c_int],
	doc='XScreenOfDisplay( POINTER(Display)(None), c_int(None) ) -> POINTER(Screen)', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 1726
XScreenResourceString = platform.createBaseFunction( 
	'XScreenResourceString', dll=platform.GL, resultType=STRING, 
	argTypes=[POINTER(Screen)],
	doc='XScreenResourceString( POINTER(Screen)(None) ) -> STRING', 
	argNames=('None',),
)

XSegment._fields_ = [
    # /usr/include/X11/Xlib.h 456
    ('x1', c_short),
    ('y1', c_short),
    ('x2', c_short),
    ('y2', c_short),
]

# /usr/include/X11/Xlib.h 3135
XSelectInput = platform.createBaseFunction( 
	'XSelectInput', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,c_long],
	doc='XSelectInput( POINTER(Display)(None), Window(None), c_long(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)

class XSelectionClearEvent(Structure):
    pass
XSelectionClearEvent._fields_ = [
    # /usr/include/X11/Xlib.h 887
    ('type', c_int),
    ('serial', c_ulong),
    ('send_event', c_int),
    ('display', POINTER(Display)),
    ('window', Window),
    ('selection', Atom),
    ('time', Time),
]
class XSelectionEvent(Structure):
    pass
XSelectionEvent._fields_ = [
    # /usr/include/X11/Xlib.h 912
    ('type', c_int),
    ('serial', c_ulong),
    ('send_event', c_int),
    ('display', POINTER(Display)),
    ('requestor', Window),
    ('selection', Atom),
    ('target', Atom),
    ('property', Atom),
    ('time', Time),
]
class XSelectionRequestEvent(Structure):
    pass
XSelectionRequestEvent._fields_ = [
    # /usr/include/X11/Xlib.h 900
    ('type', c_int),
    ('serial', c_ulong),
    ('send_event', c_int),
    ('display', POINTER(Display)),
    ('owner', Window),
    ('requestor', Window),
    ('selection', Atom),
    ('target', Atom),
    ('property', Atom),
    ('time', Time),
]

# /usr/include/X11/Xlib.h 3143
XSendEvent = platform.createBaseFunction( 
	'XSendEvent', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,c_int,c_long,POINTER(XEvent)],
	doc='XSendEvent( POINTER(Display)(None), Window(None), c_int(None), c_long(None), POINTER(XEvent)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None'),
)

class XServerInterpretedAddress(Structure):
    pass
XServerInterpretedAddress._fields_ = [
    # /usr/include/X11/Xlib.h 387
    ('typelength', c_int),
    ('valuelength', c_int),
    ('type', STRING),
    ('value', STRING),
]

# /usr/include/X11/Xlib.h 1816
XServerVendor = platform.createBaseFunction( 
	'XServerVendor', dll=platform.GL, resultType=STRING, 
	argTypes=[POINTER(Display)],
	doc='XServerVendor( POINTER(Display)(None) ) -> STRING', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 3148
XSetAccessControl = platform.createBaseFunction( 
	'XSetAccessControl', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),c_int],
	doc='XSetAccessControl( POINTER(Display)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 1538
XSetAfterFunction = platform.createBaseFunction( 
	'XSetAfterFunction', dll=platform.GL, resultType=CFUNCTYPE(c_int, POINTER(Display)), 
	argTypes=[POINTER(Display),CFUNCTYPE(c_int, POINTER(Display))],
	doc='XSetAfterFunction( POINTER(Display)(None), CFUNCTYPE(c_int, POINTER(Display))(None) ) -> CFUNCTYPE(c_int, POINTER(Display))', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 3154
XSetArcMode = platform.createBaseFunction( 
	'XSetArcMode', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),GC,c_int],
	doc='XSetArcMode( POINTER(Display)(None), GC(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3988
XSetAuthorization = platform.createBaseFunction( 
	'XSetAuthorization', dll=platform.GL, resultType=None, 
	argTypes=[STRING,c_int,STRING,c_int],
	doc='XSetAuthorization( STRING(None), c_int(None), STRING(None), c_int(None) ) -> None', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3160
XSetBackground = platform.createBaseFunction( 
	'XSetBackground', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),GC,c_ulong],
	doc='XSetBackground( POINTER(Display)(None), GC(None), c_ulong(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 581
XSetClassHint = platform.createBaseFunction( 
	'XSetClassHint', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,POINTER(XClassHint)],
	doc='XSetClassHint( POINTER(Display)(None), Window(None), POINTER(XClassHint)(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3166
XSetClipMask = platform.createBaseFunction( 
	'XSetClipMask', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),GC,Pixmap],
	doc='XSetClipMask( POINTER(Display)(None), GC(None), Pixmap(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3173
XSetClipOrigin = platform.createBaseFunction( 
	'XSetClipOrigin', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),GC,c_int,c_int],
	doc='XSetClipOrigin( POINTER(Display)(None), GC(None), c_int(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3183
XSetClipRectangles = platform.createBaseFunction( 
	'XSetClipRectangles', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),GC,c_int,c_int,POINTER(XRectangle),c_int,c_int],
	doc='XSetClipRectangles( POINTER(Display)(None), GC(None), c_int(None), c_int(None), POINTER(XRectangle)(None), c_int(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3188
XSetCloseDownMode = platform.createBaseFunction( 
	'XSetCloseDownMode', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),c_int],
	doc='XSetCloseDownMode( POINTER(Display)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 3195
XSetCommand = platform.createBaseFunction( 
	'XSetCommand', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,POINTER(STRING),c_int],
	doc='XSetCommand( POINTER(Display)(None), Window(None), POINTER(STRING)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3203
XSetDashes = platform.createBaseFunction( 
	'XSetDashes', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),GC,c_int,STRING,c_int],
	doc='XSetDashes( POINTER(Display)(None), GC(None), c_int(None), STRING(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1852
XSetErrorHandler = platform.createBaseFunction( 
	'XSetErrorHandler', dll=platform.GL, resultType=XErrorHandler, 
	argTypes=[XErrorHandler],
	doc='XSetErrorHandler( XErrorHandler(None) ) -> XErrorHandler', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 3209
XSetFillRule = platform.createBaseFunction( 
	'XSetFillRule', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),GC,c_int],
	doc='XSetFillRule( POINTER(Display)(None), GC(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3215
XSetFillStyle = platform.createBaseFunction( 
	'XSetFillStyle', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),GC,c_int],
	doc='XSetFillStyle( POINTER(Display)(None), GC(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3221
XSetFont = platform.createBaseFunction( 
	'XSetFont', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),GC,Font],
	doc='XSetFont( POINTER(Display)(None), GC(None), Font(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3227
XSetFontPath = platform.createBaseFunction( 
	'XSetFontPath', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),POINTER(STRING),c_int],
	doc='XSetFontPath( POINTER(Display)(None), POINTER(STRING)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3233
XSetForeground = platform.createBaseFunction( 
	'XSetForeground', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),GC,c_ulong],
	doc='XSetForeground( POINTER(Display)(None), GC(None), c_ulong(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3239
XSetFunction = platform.createBaseFunction( 
	'XSetFunction', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),GC,c_int],
	doc='XSetFunction( POINTER(Display)(None), GC(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3245
XSetGraphicsExposures = platform.createBaseFunction( 
	'XSetGraphicsExposures', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),GC,c_int],
	doc='XSetGraphicsExposures( POINTER(Display)(None), GC(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3865
XSetICFocus = platform.createBaseFunction( 
	'XSetICFocus', dll=platform.GL, resultType=None, 
	argTypes=[XIC],
	doc='XSetICFocus( XIC(None) ) -> None', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 3885
XSetICValues = platform.createBaseFunction( 
	'XSetICValues', dll=platform.GL, resultType=STRING, 
	argTypes=[XIC],
	doc='XSetICValues( XIC(None) ) -> STRING', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 3845
XSetIMValues = platform.createBaseFunction( 
	'XSetIMValues', dll=platform.GL, resultType=STRING, 
	argTypes=[XIM],
	doc='XSetIMValues( XIM(None) ) -> STRING', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 1861
XSetIOErrorHandler = platform.createBaseFunction( 
	'XSetIOErrorHandler', dll=platform.GL, resultType=XIOErrorHandler, 
	argTypes=[XIOErrorHandler],
	doc='XSetIOErrorHandler( XIOErrorHandler(None) ) -> XIOErrorHandler', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 3251
XSetIconName = platform.createBaseFunction( 
	'XSetIconName', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,STRING],
	doc='XSetIconName( POINTER(Display)(None), Window(None), STRING(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 588
XSetIconSizes = platform.createBaseFunction( 
	'XSetIconSizes', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,POINTER(XIconSize),c_int],
	doc='XSetIconSizes( POINTER(Display)(None), Window(None), POINTER(XIconSize)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3258
XSetInputFocus = platform.createBaseFunction( 
	'XSetInputFocus', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,c_int,Time],
	doc='XSetInputFocus( POINTER(Display)(None), Window(None), c_int(None), Time(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3267
XSetLineAttributes = platform.createBaseFunction( 
	'XSetLineAttributes', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),GC,c_uint,c_int,c_int,c_int],
	doc='XSetLineAttributes( POINTER(Display)(None), GC(None), c_uint(None), c_int(None), c_int(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3557
XSetLocaleModifiers = platform.createBaseFunction( 
	'XSetLocaleModifiers', dll=platform.GL, resultType=STRING, 
	argTypes=[STRING],
	doc='XSetLocaleModifiers( STRING(None) ) -> STRING', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 3272
XSetModifierMapping = platform.createBaseFunction( 
	'XSetModifierMapping', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),POINTER(XModifierKeymap)],
	doc='XSetModifierMapping( POINTER(Display)(None), POINTER(XModifierKeymap)(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xutil.h 594
XSetNormalHints = platform.createBaseFunction( 
	'XSetNormalHints', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,POINTER(XSizeHints)],
	doc='XSetNormalHints( POINTER(Display)(None), Window(None), POINTER(XSizeHints)(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3604
XSetOCValues = platform.createBaseFunction( 
	'XSetOCValues', dll=platform.GL, resultType=STRING, 
	argTypes=[XOC],
	doc='XSetOCValues( XOC(None) ) -> STRING', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 3573
XSetOMValues = platform.createBaseFunction( 
	'XSetOMValues', dll=platform.GL, resultType=STRING, 
	argTypes=[XOM],
	doc='XSetOMValues( XOM(None) ) -> STRING', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 3278
XSetPlaneMask = platform.createBaseFunction( 
	'XSetPlaneMask', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),GC,c_ulong],
	doc='XSetPlaneMask( POINTER(Display)(None), GC(None), c_ulong(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3284
XSetPointerMapping = platform.createBaseFunction( 
	'XSetPointerMapping', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),POINTER(c_ubyte),c_int],
	doc='XSetPointerMapping( POINTER(Display)(None), POINTER(c_ubyte)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 602
XSetRGBColormaps = platform.createBaseFunction( 
	'XSetRGBColormaps', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(Display),Window,POINTER(XStandardColormap),c_int,Atom],
	doc='XSetRGBColormaps( POINTER(Display)(None), Window(None), POINTER(XStandardColormap)(None), c_int(None), Atom(None) ) -> None', 
	argNames=('None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 706
XSetRegion = platform.createBaseFunction( 
	'XSetRegion', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),GC,Region],
	doc='XSetRegion( POINTER(Display)(None), GC(None), Region(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3292
XSetScreenSaver = platform.createBaseFunction( 
	'XSetScreenSaver', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),c_int,c_int,c_int,c_int],
	doc='XSetScreenSaver( POINTER(Display)(None), c_int(None), c_int(None), c_int(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3299
XSetSelectionOwner = platform.createBaseFunction( 
	'XSetSelectionOwner', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Atom,Window,Time],
	doc='XSetSelectionOwner( POINTER(Display)(None), Atom(None), Window(None), Time(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 609
XSetSizeHints = platform.createBaseFunction( 
	'XSetSizeHints', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,POINTER(XSizeHints),Atom],
	doc='XSetSizeHints( POINTER(Display)(None), Window(None), POINTER(XSizeHints)(None), Atom(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 713
XSetStandardColormap = platform.createBaseFunction( 
	'XSetStandardColormap', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(Display),Window,POINTER(XStandardColormap),Atom],
	doc='XSetStandardColormap( POINTER(Display)(None), Window(None), POINTER(XStandardColormap)(None), Atom(None) ) -> None', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 620
XSetStandardProperties = platform.createBaseFunction( 
	'XSetStandardProperties', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,STRING,STRING,Pixmap,POINTER(STRING),c_int,POINTER(XSizeHints)],
	doc='XSetStandardProperties( POINTER(Display)(None), Window(None), STRING(None), STRING(None), Pixmap(None), POINTER(STRING)(None), c_int(None), POINTER(XSizeHints)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3308
XSetState = platform.createBaseFunction( 
	'XSetState', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),GC,c_ulong,c_ulong,c_int,c_ulong],
	doc='XSetState( POINTER(Display)(None), GC(None), c_ulong(None), c_ulong(None), c_int(None), c_ulong(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3314
XSetStipple = platform.createBaseFunction( 
	'XSetStipple', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),GC,Pixmap],
	doc='XSetStipple( POINTER(Display)(None), GC(None), Pixmap(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3320
XSetSubwindowMode = platform.createBaseFunction( 
	'XSetSubwindowMode', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),GC,c_int],
	doc='XSetSubwindowMode( POINTER(Display)(None), GC(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3327
XSetTSOrigin = platform.createBaseFunction( 
	'XSetTSOrigin', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),GC,c_int,c_int],
	doc='XSetTSOrigin( POINTER(Display)(None), GC(None), c_int(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 627
XSetTextProperty = platform.createBaseFunction( 
	'XSetTextProperty', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(Display),Window,POINTER(XTextProperty),Atom],
	doc='XSetTextProperty( POINTER(Display)(None), Window(None), POINTER(XTextProperty)(None), Atom(None) ) -> None', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3333
XSetTile = platform.createBaseFunction( 
	'XSetTile', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),GC,Pixmap],
	doc='XSetTile( POINTER(Display)(None), GC(None), Pixmap(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1931
XSetTransientForHint = platform.createBaseFunction( 
	'XSetTransientForHint', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,Window],
	doc='XSetTransientForHint( POINTER(Display)(None), Window(None), Window(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 633
XSetWMClientMachine = platform.createBaseFunction( 
	'XSetWMClientMachine', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(Display),Window,POINTER(XTextProperty)],
	doc='XSetWMClientMachine( POINTER(Display)(None), Window(None), POINTER(XTextProperty)(None) ) -> None', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1923
XSetWMColormapWindows = platform.createBaseFunction( 
	'XSetWMColormapWindows', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,POINTER(Window),c_int],
	doc='XSetWMColormapWindows( POINTER(Display)(None), Window(None), POINTER(Window)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 639
XSetWMHints = platform.createBaseFunction( 
	'XSetWMHints', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,POINTER(XWMHints)],
	doc='XSetWMHints( POINTER(Display)(None), Window(None), POINTER(XWMHints)(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 645
XSetWMIconName = platform.createBaseFunction( 
	'XSetWMIconName', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(Display),Window,POINTER(XTextProperty)],
	doc='XSetWMIconName( POINTER(Display)(None), Window(None), POINTER(XTextProperty)(None) ) -> None', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 651
XSetWMName = platform.createBaseFunction( 
	'XSetWMName', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(Display),Window,POINTER(XTextProperty)],
	doc='XSetWMName( POINTER(Display)(None), Window(None), POINTER(XTextProperty)(None) ) -> None', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 657
XSetWMNormalHints = platform.createBaseFunction( 
	'XSetWMNormalHints', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(Display),Window,POINTER(XSizeHints)],
	doc='XSetWMNormalHints( POINTER(Display)(None), Window(None), POINTER(XSizeHints)(None) ) -> None', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 669
XSetWMProperties = platform.createBaseFunction( 
	'XSetWMProperties', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(Display),Window,POINTER(XTextProperty),POINTER(XTextProperty),POINTER(STRING),c_int,POINTER(XSizeHints),POINTER(XWMHints),POINTER(XClassHint)],
	doc='XSetWMProperties( POINTER(Display)(None), Window(None), POINTER(XTextProperty)(None), POINTER(XTextProperty)(None), POINTER(STRING)(None), c_int(None), POINTER(XSizeHints)(None), POINTER(XWMHints)(None), POINTER(XClassHint)(None) ) -> None', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1895
XSetWMProtocols = platform.createBaseFunction( 
	'XSetWMProtocols', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,POINTER(Atom),c_int],
	doc='XSetWMProtocols( POINTER(Display)(None), Window(None), POINTER(Atom)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 700
XSetWMSizeHints = platform.createBaseFunction( 
	'XSetWMSizeHints', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(Display),Window,POINTER(XSizeHints),Atom],
	doc='XSetWMSizeHints( POINTER(Display)(None), Window(None), POINTER(XSizeHints)(None), Atom(None) ) -> None', 
	argNames=('None', 'None', 'None', 'None'),
)

XSetWindowAttributes._fields_ = [
    # /usr/include/X11/Xlib.h 338
    ('background_pixmap', Pixmap),
    ('background_pixel', c_ulong),
    ('border_pixmap', Pixmap),
    ('border_pixel', c_ulong),
    ('bit_gravity', c_int),
    ('win_gravity', c_int),
    ('backing_store', c_int),
    ('backing_planes', c_ulong),
    ('backing_pixel', c_ulong),
    ('save_under', c_int),
    ('event_mask', c_long),
    ('do_not_propagate_mask', c_long),
    ('override_redirect', c_int),
    ('colormap', Colormap),
    ('cursor', Cursor),
]

# /usr/include/X11/Xlib.h 3339
XSetWindowBackground = platform.createBaseFunction( 
	'XSetWindowBackground', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,c_ulong],
	doc='XSetWindowBackground( POINTER(Display)(None), Window(None), c_ulong(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3345
XSetWindowBackgroundPixmap = platform.createBaseFunction( 
	'XSetWindowBackgroundPixmap', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,Pixmap],
	doc='XSetWindowBackgroundPixmap( POINTER(Display)(None), Window(None), Pixmap(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3351
XSetWindowBorder = platform.createBaseFunction( 
	'XSetWindowBorder', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,c_ulong],
	doc='XSetWindowBorder( POINTER(Display)(None), Window(None), c_ulong(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3357
XSetWindowBorderPixmap = platform.createBaseFunction( 
	'XSetWindowBorderPixmap', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,Pixmap],
	doc='XSetWindowBorderPixmap( POINTER(Display)(None), Window(None), Pixmap(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3363
XSetWindowBorderWidth = platform.createBaseFunction( 
	'XSetWindowBorderWidth', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,c_uint],
	doc='XSetWindowBorderWidth( POINTER(Display)(None), Window(None), c_uint(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3369
XSetWindowColormap = platform.createBaseFunction( 
	'XSetWindowColormap', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,Colormap],
	doc='XSetWindowColormap( POINTER(Display)(None), Window(None), Colormap(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 719
XSetZoomHints = platform.createBaseFunction( 
	'XSetZoomHints', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,POINTER(XSizeHints)],
	doc='XSetZoomHints( POINTER(Display)(None), Window(None), POINTER(XSizeHints)(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 725
XShrinkRegion = platform.createBaseFunction( 
	'XShrinkRegion', dll=platform.GL, resultType=c_int, 
	argTypes=[Region,c_int,c_int],
	doc='XShrinkRegion( Region(None), c_int(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)

XSizeHints._fields_ = [
    # /usr/include/X11/Xutil.h 88
    ('flags', c_long),
    ('x', c_int),
    ('y', c_int),
    ('width', c_int),
    ('height', c_int),
    ('min_width', c_int),
    ('min_height', c_int),
    ('max_width', c_int),
    ('max_height', c_int),
    ('width_inc', c_int),
    ('height_inc', c_int),
    ('min_aspect', N10XSizeHints4DOT_93E),
    ('max_aspect', N10XSizeHints4DOT_93E),
    ('base_width', c_int),
    ('base_height', c_int),
    ('win_gravity', c_int),
]
XStandardColormap._fields_ = [
    # /usr/include/X11/Xutil.h 325
    ('colormap', Colormap),
    ('red_max', c_ulong),
    ('red_mult', c_ulong),
    ('green_max', c_ulong),
    ('green_mult', c_ulong),
    ('blue_max', c_ulong),
    ('blue_mult', c_ulong),
    ('base_pixel', c_ulong),
    ('visualid', VisualID),
    ('killid', XID),
]

# /usr/include/X11/Xlib.h 3376
XStoreBuffer = platform.createBaseFunction( 
	'XStoreBuffer', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),STRING,c_int,c_int],
	doc='XStoreBuffer( POINTER(Display)(None), STRING(None), c_int(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3382
XStoreBytes = platform.createBaseFunction( 
	'XStoreBytes', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),STRING,c_int],
	doc='XStoreBytes( POINTER(Display)(None), STRING(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3388
XStoreColor = platform.createBaseFunction( 
	'XStoreColor', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Colormap,POINTER(XColor)],
	doc='XStoreColor( POINTER(Display)(None), Colormap(None), POINTER(XColor)(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3395
XStoreColors = platform.createBaseFunction( 
	'XStoreColors', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Colormap,POINTER(XColor),c_int],
	doc='XStoreColors( POINTER(Display)(None), Colormap(None), POINTER(XColor)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3401
XStoreName = platform.createBaseFunction( 
	'XStoreName', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,STRING],
	doc='XStoreName( POINTER(Display)(None), Window(None), STRING(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3409
XStoreNamedColor = platform.createBaseFunction( 
	'XStoreNamedColor', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Colormap,STRING,c_ulong,c_int],
	doc='XStoreNamedColor( POINTER(Display)(None), Colormap(None), STRING(None), c_ulong(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 731
XStringListToTextProperty = platform.createBaseFunction( 
	'XStringListToTextProperty', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(STRING),c_int,POINTER(XTextProperty)],
	doc='XStringListToTextProperty( POINTER(STRING)(None), c_int(None), POINTER(XTextProperty)(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)

#def XStringToContext(string): return ((XContext) XrmStringToQuark(string)) # macro

# /usr/include/X11/Xlib.h 1714
XStringToKeysym = platform.createBaseFunction( 
	'XStringToKeysym', dll=platform.GL, resultType=KeySym, 
	argTypes=[STRING],
	doc='XStringToKeysym( STRING(None) ) -> KeySym', 
	argNames=('None',),
)

#def XSubImage(ximage,x,y,width,height): return ((*((ximage)->f.sub_image))((ximage), (x), (y), (width), (height))) # macro

# /usr/include/X11/Xutil.h 737
XSubtractRegion = platform.createBaseFunction( 
	'XSubtractRegion', dll=platform.GL, resultType=c_int, 
	argTypes=[Region,Region,Region],
	doc='XSubtractRegion( Region(None), Region(None), Region(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3553
XSupportsLocale = platform.createBaseFunction( 
	'XSupportsLocale', dll=platform.GL, resultType=c_int, 
	argTypes=[],
	doc='XSupportsLocale(  ) -> c_int', 
	argNames=(),
)


# /usr/include/X11/Xlib.h 3414
XSync = platform.createBaseFunction( 
	'XSync', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),c_int],
	doc='XSync( POINTER(Display)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 1530
XSynchronize = platform.createBaseFunction( 
	'XSynchronize', dll=platform.GL, resultType=CFUNCTYPE(c_int, POINTER(Display)), 
	argTypes=[POINTER(Display),c_int],
	doc='XSynchronize( POINTER(Display)(None), c_int(None) ) -> CFUNCTYPE(c_int, POINTER(Display))', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 3424
XTextExtents = platform.createBaseFunction( 
	'XTextExtents', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(XFontStruct),STRING,c_int,POINTER(c_int),POINTER(c_int),POINTER(c_int),POINTER(XCharStruct)],
	doc='XTextExtents( POINTER(XFontStruct)(None), STRING(None), c_int(None), POINTER(c_int)(None), POINTER(c_int)(None), POINTER(c_int)(None), POINTER(XCharStruct)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3434
XTextExtents16 = platform.createBaseFunction( 
	'XTextExtents16', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(XFontStruct),POINTER(XChar2b),c_int,POINTER(c_int),POINTER(c_int),POINTER(c_int),POINTER(XCharStruct)],
	doc='XTextExtents16( POINTER(XFontStruct)(None), POINTER(XChar2b)(None), c_int(None), POINTER(c_int)(None), POINTER(c_int)(None), POINTER(c_int)(None), POINTER(XCharStruct)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None'),
)

XTextItem._fields_ = [
    # /usr/include/X11/Xlib.h 1065
    ('chars', STRING),
    ('nchars', c_int),
    ('delta', c_int),
    ('font', Font),
]

XTextItem16._fields_ = [
    # /usr/include/X11/Xlib.h 1077
    ('chars', POINTER(XChar2b)),
    ('nchars', c_int),
    ('delta', c_int),
    ('font', Font),
]
XTextProperty._fields_ = [
    # /usr/include/X11/Xutil.h 162
    ('value', POINTER(c_ubyte)),
    ('encoding', Atom),
    ('format', c_int),
    ('nitems', c_ulong),
]

# /usr/include/X11/Xutil.h 771
XTextPropertyToStringList = platform.createBaseFunction( 
	'XTextPropertyToStringList', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(XTextProperty),POINTER(POINTER(STRING)),POINTER(c_int)],
	doc='XTextPropertyToStringList( POINTER(XTextProperty)(None), POINTER(POINTER(STRING))(None), POINTER(c_int)(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3440
XTextWidth = platform.createBaseFunction( 
	'XTextWidth', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(XFontStruct),STRING,c_int],
	doc='XTextWidth( POINTER(XFontStruct)(None), STRING(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3446
XTextWidth16 = platform.createBaseFunction( 
	'XTextWidth16', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(XFontStruct),POINTER(XChar2b),c_int],
	doc='XTextWidth16( POINTER(XFontStruct)(None), POINTER(XChar2b)(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)

XTimeCoord._fields_ = [
    # /usr/include/X11/Xlib.h 503
    ('time', Time),
    ('x', c_short),
    ('y', c_short),
]

# /usr/include/X11/Xlib.h 3457
XTranslateCoordinates = platform.createBaseFunction( 
	'XTranslateCoordinates', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,Window,c_int,c_int,POINTER(c_int),POINTER(c_int),POINTER(Window)],
	doc='XTranslateCoordinates( POINTER(Display)(None), Window(None), Window(None), c_int(None), c_int(None), POINTER(c_int)(None), POINTER(c_int)(None), POINTER(Window)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3462
XUndefineCursor = platform.createBaseFunction( 
	'XUndefineCursor', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window],
	doc='XUndefineCursor( POINTER(Display)(None), Window(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 3469
XUngrabButton = platform.createBaseFunction( 
	'XUngrabButton', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),c_uint,c_uint,Window],
	doc='XUngrabButton( POINTER(Display)(None), c_uint(None), c_uint(None), Window(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3476
XUngrabKey = platform.createBaseFunction( 
	'XUngrabKey', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),c_int,c_uint,Window],
	doc='XUngrabKey( POINTER(Display)(None), c_int(None), c_uint(None), Window(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3481
XUngrabKeyboard = platform.createBaseFunction( 
	'XUngrabKeyboard', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Time],
	doc='XUngrabKeyboard( POINTER(Display)(None), Time(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 3486
XUngrabPointer = platform.createBaseFunction( 
	'XUngrabPointer', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Time],
	doc='XUngrabPointer( POINTER(Display)(None), Time(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 3490
XUngrabServer = platform.createBaseFunction( 
	'XUngrabServer', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display)],
	doc='XUngrabServer( POINTER(Display)(None) ) -> c_int', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 3495
XUninstallColormap = platform.createBaseFunction( 
	'XUninstallColormap', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Colormap],
	doc='XUninstallColormap( POINTER(Display)(None), Colormap(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xutil.h 798
XUnionRectWithRegion = platform.createBaseFunction( 
	'XUnionRectWithRegion', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(XRectangle),Region,Region],
	doc='XUnionRectWithRegion( POINTER(XRectangle)(None), Region(None), Region(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 804
XUnionRegion = platform.createBaseFunction( 
	'XUnionRegion', dll=platform.GL, resultType=c_int, 
	argTypes=[Region,Region,Region],
	doc='XUnionRegion( Region(None), Region(None), Region(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)

#def XUniqueContext(): return ((XContext) XrmUniqueQuark()) # macro

# /usr/include/X11/Xlib.h 3500
XUnloadFont = platform.createBaseFunction( 
	'XUnloadFont', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Font],
	doc='XUnloadFont( POINTER(Display)(None), Font(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 1746
XUnlockDisplay = platform.createBaseFunction( 
	'XUnlockDisplay', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(Display)],
	doc='XUnlockDisplay( POINTER(Display)(None) ) -> None', 
	argNames=('None',),
)

class XUnmapEvent(Structure):
    pass
XUnmapEvent._fields_ = [
    # /usr/include/X11/Xlib.h 767
    ('type', c_int),
    ('serial', c_ulong),
    ('send_event', c_int),
    ('display', POINTER(Display)),
    ('event', Window),
    ('window', Window),
    ('from_configure', c_int),
]

# /usr/include/X11/Xlib.h 3505
XUnmapSubwindows = platform.createBaseFunction( 
	'XUnmapSubwindows', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window],
	doc='XUnmapSubwindows( POINTER(Display)(None), Window(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 3510
XUnmapWindow = platform.createBaseFunction( 
	'XUnmapWindow', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window],
	doc='XUnmapWindow( POINTER(Display)(None), Window(None) ) -> c_int', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 3949
XUnregisterIMInstantiateCallback = platform.createBaseFunction( 
	'XUnregisterIMInstantiateCallback', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),POINTER(_XrmHashBucketRec),STRING,STRING,XIDProc,XPointer],
	doc='XUnregisterIMInstantiateCallback( POINTER(Display)(None), POINTER(_XrmHashBucketRec)(None), STRING(None), STRING(None), XIDProc(None), XPointer(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3869
XUnsetICFocus = platform.createBaseFunction( 
	'XUnsetICFocus', dll=platform.GL, resultType=None, 
	argTypes=[XIC],
	doc='XUnsetICFocus( XIC(None) ) -> None', 
	argNames=('None',),
)

XVaNestedList = c_void_p

# /usr/include/X11/Xlib.h 3929
XVaCreateNestedList = platform.createBaseFunction( 
	'XVaCreateNestedList', dll=platform.GL, resultType=XVaNestedList, 
	argTypes=[c_int],
	doc='XVaCreateNestedList( c_int(None) ) -> XVaNestedList', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 3514
XVendorRelease = platform.createBaseFunction( 
	'XVendorRelease', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display)],
	doc='XVendorRelease( POINTER(Display)(None) ) -> c_int', 
	argNames=('None',),
)

class XVisibilityEvent(Structure):
    pass
XVisibilityEvent._fields_ = [
    # /usr/include/X11/Xlib.h 735
    ('type', c_int),
    ('serial', c_ulong),
    ('send_event', c_int),
    ('display', POINTER(Display)),
    ('window', Window),
    ('state', c_int),
]

# /usr/include/X11/Xlib.h 1732
XVisualIDFromVisual = platform.createBaseFunction( 
	'XVisualIDFromVisual', dll=platform.GL, resultType=VisualID, 
	argTypes=[POINTER(Visual)],
	doc='XVisualIDFromVisual( POINTER(Visual)(None) ) -> VisualID', 
	argNames=('None',),
)

XVisualInfo._fields_ = [
    # /usr/include/X11/Xutil.h 296
    ('visual', POINTER(Visual)),
    ('visualid', VisualID),
    ('screen', c_int),
    ('depth', c_int),
    ('c_class', c_int),
    ('red_mask', c_ulong),
    ('green_mask', c_ulong),
    ('blue_mask', c_ulong),
    ('colormap_size', c_int),
    ('bits_per_rgb', c_int),
]

# /usr/include/X11/Xutil.h 818
XWMGeometry = platform.createBaseFunction( 
	'XWMGeometry', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),c_int,STRING,STRING,c_uint,POINTER(XSizeHints),POINTER(c_int),POINTER(c_int),POINTER(c_int),POINTER(c_int),POINTER(c_int)],
	doc='XWMGeometry( POINTER(Display)(None), c_int(None), STRING(None), STRING(None), c_uint(None), POINTER(XSizeHints)(None), POINTER(c_int)(None), POINTER(c_int)(None), POINTER(c_int)(None), POINTER(c_int)(None), POINTER(c_int)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None'),
)

XWMHints._fields_ = [
    # /usr/include/X11/Xutil.h 124
    ('flags', c_long),
    ('input', c_int),
    ('initial_state', c_int),
    ('icon_pixmap', Pixmap),
    ('icon_window', Window),
    ('icon_x', c_int),
    ('icon_y', c_int),
    ('icon_mask', Pixmap),
    ('window_group', XID),
]

# /usr/include/X11/Xlib.h 3526
XWarpPointer = platform.createBaseFunction( 
	'XWarpPointer', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,Window,c_int,c_int,c_uint,c_uint,c_int,c_int],
	doc='XWarpPointer( POINTER(Display)(None), Window(None), Window(None), c_int(None), c_int(None), c_uint(None), c_uint(None), c_int(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1798
XWhitePixel = platform.createBaseFunction( 
	'XWhitePixel', dll=platform.GL, resultType=c_ulong, 
	argTypes=[POINTER(Display),c_int],
	doc='XWhitePixel( POINTER(Display)(None), c_int(None) ) -> c_ulong', 
	argNames=('None', 'None'),
)


# /usr/include/X11/Xlib.h 1807
XWhitePixelOfScreen = platform.createBaseFunction( 
	'XWhitePixelOfScreen', dll=platform.GL, resultType=c_ulong, 
	argTypes=[POINTER(Screen)],
	doc='XWhitePixelOfScreen( POINTER(Screen)(None) ) -> c_ulong', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 3530
XWidthMMOfScreen = platform.createBaseFunction( 
	'XWidthMMOfScreen', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Screen)],
	doc='XWidthMMOfScreen( POINTER(Screen)(None) ) -> c_int', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 3534
XWidthOfScreen = platform.createBaseFunction( 
	'XWidthOfScreen', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Screen)],
	doc='XWidthOfScreen( POINTER(Screen)(None) ) -> c_int', 
	argNames=('None',),
)

XWindowAttributes._fields_ = [
    # /usr/include/X11/Xlib.h 366
    ('x', c_int),
    ('y', c_int),
    ('width', c_int),
    ('height', c_int),
    ('border_width', c_int),
    ('depth', c_int),
    ('visual', POINTER(Visual)),
    ('root', Window),
    ('c_class', c_int),
    ('bit_gravity', c_int),
    ('win_gravity', c_int),
    ('backing_store', c_int),
    ('backing_planes', c_ulong),
    ('backing_pixel', c_ulong),
    ('save_under', c_int),
    ('colormap', Colormap),
    ('map_installed', c_int),
    ('map_state', c_int),
    ('all_event_masks', c_long),
    ('your_event_mask', c_long),
    ('do_not_propagate_mask', c_long),
    ('override_redirect', c_int),
    ('screen', POINTER(Screen)),
]
XWindowChanges._fields_ = [
    # /usr/include/X11/Xlib.h 437
    ('x', c_int),
    ('y', c_int),
    ('width', c_int),
    ('height', c_int),
    ('border_width', c_int),
    ('sibling', Window),
    ('stack_mode', c_int),
]

# /usr/include/X11/Xlib.h 3541
XWindowEvent = platform.createBaseFunction( 
	'XWindowEvent', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,c_long,POINTER(XEvent)],
	doc='XWindowEvent( POINTER(Display)(None), Window(None), c_long(None), POINTER(XEvent)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 1905
XWithdrawWindow = platform.createBaseFunction( 
	'XWithdrawWindow', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),Window,c_int],
	doc='XWithdrawWindow( POINTER(Display)(None), Window(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3551
XWriteBitmapFile = platform.createBaseFunction( 
	'XWriteBitmapFile', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),STRING,Pixmap,c_uint,c_uint,c_int,c_int],
	doc='XWriteBitmapFile( POINTER(Display)(None), STRING(None), Pixmap(None), c_uint(None), c_uint(None), c_int(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 824
XXorRegion = platform.createBaseFunction( 
	'XXorRegion', dll=platform.GL, resultType=c_int, 
	argTypes=[Region,Region,Region],
	doc='XXorRegion( Region(None), Region(None), Region(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3804
XmbDrawImageString = platform.createBaseFunction( 
	'XmbDrawImageString', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(Display),Drawable,XFontSet,GC,c_int,c_int,STRING,c_int],
	doc='XmbDrawImageString( POINTER(Display)(None), Drawable(None), XFontSet(None), GC(None), c_int(None), c_int(None), STRING(None), c_int(None) ) -> None', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3771
XmbDrawString = platform.createBaseFunction( 
	'XmbDrawString', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(Display),Drawable,XFontSet,GC,c_int,c_int,STRING,c_int],
	doc='XmbDrawString( POINTER(Display)(None), Drawable(None), XFontSet(None), GC(None), c_int(None), c_int(None), STRING(None), c_int(None) ) -> None', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None', 'None'),
)

class XmbTextItem(Structure):
    pass
# /usr/include/X11/Xlib.h 3740
XmbDrawText = platform.createBaseFunction( 
	'XmbDrawText', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(Display),Drawable,GC,c_int,c_int,POINTER(XmbTextItem),c_int],
	doc='XmbDrawText( POINTER(Display)(None), Drawable(None), GC(None), c_int(None), c_int(None), POINTER(XmbTextItem)(None), c_int(None) ) -> None', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3907
XmbLookupString = platform.createBaseFunction( 
	'XmbLookupString', dll=platform.GL, resultType=c_int, 
	argTypes=[XIC,POINTER(XKeyPressedEvent),STRING,c_int,POINTER(KeySym),POINTER(c_int)],
	doc='XmbLookupString( XIC(None), POINTER(XKeyPressedEvent)(None), STRING(None), c_int(None), POINTER(KeySym)(None), POINTER(c_int)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3877
XmbResetIC = platform.createBaseFunction( 
	'XmbResetIC', dll=platform.GL, resultType=STRING, 
	argTypes=[XIC],
	doc='XmbResetIC( XIC(None) ) -> STRING', 
	argNames=('None',),
)


# /usr/include/X11/Xutil.h 681
XmbSetWMProperties = platform.createBaseFunction( 
	'XmbSetWMProperties', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(Display),Window,STRING,STRING,POINTER(STRING),c_int,POINTER(XSizeHints),POINTER(XWMHints),POINTER(XClassHint)],
	doc='XmbSetWMProperties( POINTER(Display)(None), Window(None), STRING(None), STRING(None), POINTER(STRING)(None), c_int(None), POINTER(XSizeHints)(None), POINTER(XWMHints)(None), POINTER(XClassHint)(None) ) -> None', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3658
XmbTextEscapement = platform.createBaseFunction( 
	'XmbTextEscapement', dll=platform.GL, resultType=c_int, 
	argTypes=[XFontSet,STRING,c_int],
	doc='XmbTextEscapement( XFontSet(None), STRING(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3678
XmbTextExtents = platform.createBaseFunction( 
	'XmbTextExtents', dll=platform.GL, resultType=c_int, 
	argTypes=[XFontSet,STRING,c_int,POINTER(XRectangle),POINTER(XRectangle)],
	doc='XmbTextExtents( XFontSet(None), STRING(None), c_int(None), POINTER(XRectangle)(None), POINTER(XRectangle)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None'),
)

XmbTextItem._fields_ = [
    # /usr/include/X11/Xlib.h 1104
    ('chars', STRING),
    ('nchars', c_int),
    ('delta', c_int),
    ('font_set', XFontSet),
]

# /usr/include/X11/Xutil.h 745
XmbTextListToTextProperty = platform.createBaseFunction( 
	'XmbTextListToTextProperty', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),POINTER(STRING),c_int,XICCEncodingStyle,POINTER(XTextProperty)],
	doc='XmbTextListToTextProperty( POINTER(Display)(display), POINTER(STRING)(list), c_int(count), XICCEncodingStyle(style), POINTER(XTextProperty)(text_prop_return) ) -> c_int', 
	argNames=('display', 'list', 'count', 'style', 'text_prop_return'),
)


# /usr/include/X11/Xlib.h 3706
XmbTextPerCharExtents = platform.createBaseFunction( 
	'XmbTextPerCharExtents', dll=platform.GL, resultType=c_int, 
	argTypes=[XFontSet,STRING,c_int,POINTER(XRectangle),POINTER(XRectangle),c_int,POINTER(c_int),POINTER(XRectangle),POINTER(XRectangle)],
	doc='XmbTextPerCharExtents( XFontSet(None), STRING(None), c_int(None), POINTER(XRectangle)(None), POINTER(XRectangle)(None), c_int(None), POINTER(c_int)(None), POINTER(XRectangle)(None), POINTER(XRectangle)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 778
XmbTextPropertyToTextList = platform.createBaseFunction( 
	'XmbTextPropertyToTextList', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),POINTER(XTextProperty),POINTER(POINTER(STRING)),POINTER(c_int)],
	doc='XmbTextPropertyToTextList( POINTER(Display)(display), POINTER(XTextProperty)(text_prop), POINTER(POINTER(STRING))(list_return), POINTER(c_int)(count_return) ) -> c_int', 
	argNames=('display', 'text_prop', 'list_return', 'count_return'),
)


# /usr/include/X11/Xlib.h 1492
XrmInitialize = platform.createBaseFunction( 
	'XrmInitialize', dll=platform.GL, resultType=None, 
	argTypes=[],
	doc='XrmInitialize(  ) -> None', 
	argNames=(),
)


# /usr/include/X11/Xlib.h 3826
Xutf8DrawImageString = platform.createBaseFunction( 
	'Xutf8DrawImageString', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(Display),Drawable,XFontSet,GC,c_int,c_int,STRING,c_int],
	doc='Xutf8DrawImageString( POINTER(Display)(None), Drawable(None), XFontSet(None), GC(None), c_int(None), c_int(None), STRING(None), c_int(None) ) -> None', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3793
Xutf8DrawString = platform.createBaseFunction( 
	'Xutf8DrawString', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(Display),Drawable,XFontSet,GC,c_int,c_int,STRING,c_int],
	doc='Xutf8DrawString( POINTER(Display)(None), Drawable(None), XFontSet(None), GC(None), c_int(None), c_int(None), STRING(None), c_int(None) ) -> None', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3760
Xutf8DrawText = platform.createBaseFunction( 
	'Xutf8DrawText', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(Display),Drawable,GC,c_int,c_int,POINTER(XmbTextItem),c_int],
	doc='Xutf8DrawText( POINTER(Display)(None), Drawable(None), GC(None), c_int(None), c_int(None), POINTER(XmbTextItem)(None), c_int(None) ) -> None', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3925
Xutf8LookupString = platform.createBaseFunction( 
	'Xutf8LookupString', dll=platform.GL, resultType=c_int, 
	argTypes=[XIC,POINTER(XKeyPressedEvent),STRING,c_int,POINTER(KeySym),POINTER(c_int)],
	doc='Xutf8LookupString( XIC(None), POINTER(XKeyPressedEvent)(None), STRING(None), c_int(None), POINTER(KeySym)(None), POINTER(c_int)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3881
Xutf8ResetIC = platform.createBaseFunction( 
	'Xutf8ResetIC', dll=platform.GL, resultType=STRING, 
	argTypes=[XIC],
	doc='Xutf8ResetIC( XIC(None) ) -> STRING', 
	argNames=('None',),
)


# /usr/include/X11/Xutil.h 693
Xutf8SetWMProperties = platform.createBaseFunction( 
	'Xutf8SetWMProperties', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(Display),Window,STRING,STRING,POINTER(STRING),c_int,POINTER(XSizeHints),POINTER(XWMHints),POINTER(XClassHint)],
	doc='Xutf8SetWMProperties( POINTER(Display)(None), Window(None), STRING(None), STRING(None), POINTER(STRING)(None), c_int(None), POINTER(XSizeHints)(None), POINTER(XWMHints)(None), POINTER(XClassHint)(None) ) -> None', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3670
Xutf8TextEscapement = platform.createBaseFunction( 
	'Xutf8TextEscapement', dll=platform.GL, resultType=c_int, 
	argTypes=[XFontSet,STRING,c_int],
	doc='Xutf8TextEscapement( XFontSet(None), STRING(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3694
Xutf8TextExtents = platform.createBaseFunction( 
	'Xutf8TextExtents', dll=platform.GL, resultType=c_int, 
	argTypes=[XFontSet,STRING,c_int,POINTER(XRectangle),POINTER(XRectangle)],
	doc='Xutf8TextExtents( XFontSet(None), STRING(None), c_int(None), POINTER(XRectangle)(None), POINTER(XRectangle)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 761
Xutf8TextListToTextProperty = platform.createBaseFunction( 
	'Xutf8TextListToTextProperty', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),POINTER(STRING),c_int,XICCEncodingStyle,POINTER(XTextProperty)],
	doc='Xutf8TextListToTextProperty( POINTER(Display)(display), POINTER(STRING)(list), c_int(count), XICCEncodingStyle(style), POINTER(XTextProperty)(text_prop_return) ) -> c_int', 
	argNames=('display', 'list', 'count', 'style', 'text_prop_return'),
)


# /usr/include/X11/Xlib.h 3730
Xutf8TextPerCharExtents = platform.createBaseFunction( 
	'Xutf8TextPerCharExtents', dll=platform.GL, resultType=c_int, 
	argTypes=[XFontSet,STRING,c_int,POINTER(XRectangle),POINTER(XRectangle),c_int,POINTER(c_int),POINTER(XRectangle),POINTER(XRectangle)],
	doc='Xutf8TextPerCharExtents( XFontSet(None), STRING(None), c_int(None), POINTER(XRectangle)(None), POINTER(XRectangle)(None), c_int(None), POINTER(c_int)(None), POINTER(XRectangle)(None), POINTER(XRectangle)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 792
Xutf8TextPropertyToTextList = platform.createBaseFunction( 
	'Xutf8TextPropertyToTextList', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),POINTER(XTextProperty),POINTER(POINTER(STRING)),POINTER(c_int)],
	doc='Xutf8TextPropertyToTextList( POINTER(Display)(display), POINTER(XTextProperty)(text_prop), POINTER(POINTER(STRING))(list_return), POINTER(c_int)(count_return) ) -> c_int', 
	argNames=('display', 'text_prop', 'list_return', 'count_return'),
)


# /usr/include/X11/Xlib.h 3815
XwcDrawImageString = platform.createBaseFunction( 
	'XwcDrawImageString', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(Display),Drawable,XFontSet,GC,c_int,c_int,WSTRING,c_int],
	doc='XwcDrawImageString( POINTER(Display)(None), Drawable(None), XFontSet(None), GC(None), c_int(None), c_int(None), WSTRING(None), c_int(None) ) -> None', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3782
XwcDrawString = platform.createBaseFunction( 
	'XwcDrawString', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(Display),Drawable,XFontSet,GC,c_int,c_int,WSTRING,c_int],
	doc='XwcDrawString( POINTER(Display)(None), Drawable(None), XFontSet(None), GC(None), c_int(None), c_int(None), WSTRING(None), c_int(None) ) -> None', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None', 'None'),
)

class XwcTextItem(Structure):
    pass
# /usr/include/X11/Xlib.h 3750
XwcDrawText = platform.createBaseFunction( 
	'XwcDrawText', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(Display),Drawable,GC,c_int,c_int,POINTER(XwcTextItem),c_int],
	doc='XwcDrawText( POINTER(Display)(None), Drawable(None), GC(None), c_int(None), c_int(None), POINTER(XwcTextItem)(None), c_int(None) ) -> None', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 765
XwcFreeStringList = platform.createBaseFunction( 
	'XwcFreeStringList', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(WSTRING)],
	doc='XwcFreeStringList( POINTER(WSTRING)(list) ) -> None', 
	argNames=('list',),
)


# /usr/include/X11/Xlib.h 3916
XwcLookupString = platform.createBaseFunction( 
	'XwcLookupString', dll=platform.GL, resultType=c_int, 
	argTypes=[XIC,POINTER(XKeyPressedEvent),WSTRING,c_int,POINTER(KeySym),POINTER(c_int)],
	doc='XwcLookupString( XIC(None), POINTER(XKeyPressedEvent)(None), WSTRING(None), c_int(None), POINTER(KeySym)(None), POINTER(c_int)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3873
XwcResetIC = platform.createBaseFunction( 
	'XwcResetIC', dll=platform.GL, resultType=WSTRING, 
	argTypes=[XIC],
	doc='XwcResetIC( XIC(None) ) -> WSTRING', 
	argNames=('None',),
)


# /usr/include/X11/Xlib.h 3664
XwcTextEscapement = platform.createBaseFunction( 
	'XwcTextEscapement', dll=platform.GL, resultType=c_int, 
	argTypes=[XFontSet,WSTRING,c_int],
	doc='XwcTextEscapement( XFontSet(None), WSTRING(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)


# /usr/include/X11/Xlib.h 3686
XwcTextExtents = platform.createBaseFunction( 
	'XwcTextExtents', dll=platform.GL, resultType=c_int, 
	argTypes=[XFontSet,WSTRING,c_int,POINTER(XRectangle),POINTER(XRectangle)],
	doc='XwcTextExtents( XFontSet(None), WSTRING(None), c_int(None), POINTER(XRectangle)(None), POINTER(XRectangle)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None'),
)

XwcTextItem._fields_ = [
    # /usr/include/X11/Xlib.h 1111
    ('chars', WSTRING),
    ('nchars', c_int),
    ('delta', c_int),
    ('font_set', XFontSet),
]

# /usr/include/X11/Xutil.h 753
XwcTextListToTextProperty = platform.createBaseFunction( 
	'XwcTextListToTextProperty', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),POINTER(WSTRING),c_int,XICCEncodingStyle,POINTER(XTextProperty)],
	doc='XwcTextListToTextProperty( POINTER(Display)(display), POINTER(WSTRING)(list), c_int(count), XICCEncodingStyle(style), POINTER(XTextProperty)(text_prop_return) ) -> c_int', 
	argNames=('display', 'list', 'count', 'style', 'text_prop_return'),
)


# /usr/include/X11/Xlib.h 3718
XwcTextPerCharExtents = platform.createBaseFunction( 
	'XwcTextPerCharExtents', dll=platform.GL, resultType=c_int, 
	argTypes=[XFontSet,WSTRING,c_int,POINTER(XRectangle),POINTER(XRectangle),c_int,POINTER(c_int),POINTER(XRectangle),POINTER(XRectangle)],
	doc='XwcTextPerCharExtents( XFontSet(None), WSTRING(None), c_int(None), POINTER(XRectangle)(None), POINTER(XRectangle)(None), c_int(None), POINTER(c_int)(None), POINTER(XRectangle)(None), POINTER(XRectangle)(None) ) -> c_int', 
	argNames=('None', 'None', 'None', 'None', 'None', 'None', 'None', 'None', 'None'),
)


# /usr/include/X11/Xutil.h 785
XwcTextPropertyToTextList = platform.createBaseFunction( 
	'XwcTextPropertyToTextList', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),POINTER(XTextProperty),POINTER(POINTER(WSTRING)),POINTER(c_int)],
	doc='XwcTextPropertyToTextList( POINTER(Display)(display), POINTER(XTextProperty)(text_prop), POINTER(POINTER(WSTRING))(list_return), POINTER(c_int)(count_return) ) -> c_int', 
	argNames=('display', 'text_prop', 'list_return', 'count_return'),
)

class _4DOT_35(Structure):
    pass
class _XPrivate(Structure):
    pass


_4DOT_35._fields_ = [
    # /usr/include/X11/Xlib.h 529
    ('ext_data', POINTER(XExtData)),
    ('private1', POINTER(_XPrivate)),
    ('fd', c_int),
    ('private2', c_int),
    ('proto_major_version', c_int),
    ('proto_minor_version', c_int),
    ('vendor', STRING),
    ('private3', XID),
    ('private4', XID),
    ('private5', XID),
    ('private6', c_int),
    ('resource_alloc', CFUNCTYPE(XID, POINTER(_XDisplay))),
    ('byte_order', c_int),
    ('bitmap_unit', c_int),
    ('bitmap_pad', c_int),
    ('bitmap_bit_order', c_int),
    ('nformats', c_int),
    ('pixmap_format', POINTER(ScreenFormat)),
    ('private8', c_int),
    ('release', c_int),
    ('private9', POINTER(_XPrivate)),
    ('private10', POINTER(_XPrivate)),
    ('qlen', c_int),
    ('last_request_read', c_ulong),
    ('request', c_ulong),
    ('private11', XPointer),
    ('private12', XPointer),
    ('private13', XPointer),
    ('private14', XPointer),
    ('max_request_size', c_uint),
    ('db', POINTER(_XrmHashBucketRec)),
    ('private15', CFUNCTYPE(c_int, POINTER(_XDisplay))),
    ('display_name', STRING),
    ('default_screen', c_int),
    ('nscreens', c_int),
    ('screens', POINTER(Screen)),
    ('motion_buffer', c_ulong),
    ('private16', c_ulong),
    ('min_keycode', c_int),
    ('max_keycode', c_int),
    ('private17', XPointer),
    ('private18', XPointer),
    ('private19', c_int),
    ('xdefaults', STRING),
]
_XComposeStatus._fields_ = [
    # /usr/include/X11/Xutil.h 225
    ('compose_ptr', XPointer),
    ('chars_matched', c_int),
]
_XDisplay._fields_ = [
    # /usr/include/X11/Xlib.h 287
]

_XEvent._fields_ = [
    # /usr/include/X11/Xlib.h 978
    ('type', c_int),
    ('xany', XAnyEvent),
    ('xkey', XKeyEvent),
    ('xbutton', XButtonEvent),
    ('xmotion', XMotionEvent),
    ('xcrossing', XCrossingEvent),
    ('xfocus', XFocusChangeEvent),
    ('xexpose', XExposeEvent),
    ('xgraphicsexpose', XGraphicsExposeEvent),
    ('xnoexpose', XNoExposeEvent),
    ('xvisibility', XVisibilityEvent),
    ('xcreatewindow', XCreateWindowEvent),
    ('xdestroywindow', XDestroyWindowEvent),
    ('xunmap', XUnmapEvent),
    ('xmap', XMapEvent),
    ('xmaprequest', XMapRequestEvent),
    ('xreparent', XReparentEvent),
    ('xconfigure', XConfigureEvent),
    ('xgravity', XGravityEvent),
    ('xresizerequest', XResizeRequestEvent),
    ('xconfigurerequest', XConfigureRequestEvent),
    ('xcirculate', XCirculateEvent),
    ('xcirculaterequest', XCirculateRequestEvent),
    ('xproperty', XPropertyEvent),
    ('xselectionclear', XSelectionClearEvent),
    ('xselectionrequest', XSelectionRequestEvent),
    ('xselection', XSelectionEvent),
    ('xcolormap', XColormapEvent),
    ('xclient', XClientMessageEvent),
    ('xmapping', XMappingEvent),
    ('xerror', XErrorEvent),
    ('xkeymap', XKeymapEvent),
    ('pad', c_long * 24),
]

_XExtData._fields_ = [
    # /usr/include/X11/Xlib.h 180
    ('number', c_int),
    ('next', POINTER(_XExtData)),
    ('free_private', CFUNCTYPE(c_int, POINTER(_XExtData))),
    ('private_data', XPointer),
]
_XGC._fields_ = [
    # /usr/include/X11/Xlib.h 254
]
_XIC._fields_ = [
    # /usr/include/X11/Xlib.h 1149
]
_XIM._fields_ = [
    # /usr/include/X11/Xlib.h 1148
]
_XIMHotKeyTrigger._fields_ = [
    # /usr/include/X11/Xlib.h 1368
    ('keysym', KeySym),
    ('modifier', c_int),
    ('modifier_mask', c_int),
]

_XIMHotKeyTriggers._fields_ = [
    # /usr/include/X11/Xlib.h 1374
    ('num_hot_key', c_int),
    ('key', POINTER(XIMHotKeyTrigger)),
]
_XIMPreeditCaretCallbackStruct._fields_ = [
    # /usr/include/X11/Xlib.h 1349
    ('position', c_int),
    ('direction', XIMCaretDirection),
    ('style', XIMCaretStyle),
]
_XIMPreeditDrawCallbackStruct._fields_ = [
    # /usr/include/X11/Xlib.h 1336
    ('caret', c_int),
    ('chg_first', c_int),
    ('chg_length', c_int),
    ('text', POINTER(XIMText)),
]
_XIMPreeditStateNotifyCallbackStruct._fields_ = [
    # /usr/include/X11/Xlib.h 1276
    ('state', XIMPreeditState),
]
_XIMStatusDrawCallbackStruct._fields_ = [
    # /usr/include/X11/Xlib.h 1360
    ('type', XIMStatusDataType),
    ('data', N28_XIMStatusDrawCallbackStruct4DOT_90E),
]

_XIMStringConversionCallbackStruct._fields_ = [
    # /usr/include/X11/Xlib.h 1328
    ('position', XIMStringConversionPosition),
    ('direction', XIMCaretDirection),
    ('operation', XIMStringConversionOperation),
    ('factor', c_ushort),
    ('text', POINTER(XIMStringConversionText)),
]

_XIMStringConversionText._fields_ = [
    # /usr/include/X11/Xlib.h 1294
    ('length', c_ushort),
    ('feedback', POINTER(XIMStringConversionFeedback)),
    ('encoding_is_wchar', c_int),
    ('string', N24_XIMStringConversionText4DOT_86E),
]

_XIMText._fields_ = [
    # /usr/include/X11/Xlib.h 1260
    ('length', c_ushort),
    ('feedback', POINTER(XIMFeedback)),
    ('encoding_is_wchar', c_int),
    ('string', N8_XIMText4DOT_85E),
]
class funcs(Structure):
    pass







funcs._fields_ = [
    # /usr/include/X11/Xlib.h 408
    ('create_image', CFUNCTYPE(POINTER(_XImage), POINTER(_XDisplay), POINTER(Visual), c_uint, c_int, c_int, STRING, c_uint, c_uint, c_int, c_int)),
    ('destroy_image', CFUNCTYPE(c_int, POINTER(_XImage))),
    ('get_pixel', CFUNCTYPE(c_ulong, POINTER(_XImage), c_int, c_int)),
    ('put_pixel', CFUNCTYPE(c_int, POINTER(_XImage), c_int, c_int, c_ulong)),
    ('sub_image', CFUNCTYPE(POINTER(_XImage), POINTER(_XImage), c_int, c_int, c_uint, c_uint)),
    ('add_pixel', CFUNCTYPE(c_int, POINTER(_XImage), c_long)),
]
_XImage._fields_ = [
    # /usr/include/X11/Xlib.h 392
    ('width', c_int),
    ('height', c_int),
    ('xoffset', c_int),
    ('format', c_int),
    ('data', STRING),
    ('byte_order', c_int),
    ('bitmap_unit', c_int),
    ('bitmap_bit_order', c_int),
    ('bitmap_pad', c_int),
    ('depth', c_int),
    ('bytes_per_line', c_int),
    ('bits_per_pixel', c_int),
    ('red_mask', c_ulong),
    ('green_mask', c_ulong),
    ('blue_mask', c_ulong),
    ('obdata', XPointer),
    ('f', funcs),
]
_XOC._fields_ = [
    # /usr/include/X11/Xlib.h 1097
]
_XOM._fields_ = [
    # /usr/include/X11/Xlib.h 1096
]

_XPrivDisplay = POINTER(_4DOT_35)
_XPrivate._fields_ = [
    # /usr/include/X11/Xlib.h 522
]
_XRegion._fields_ = [
    # /usr/include/X11/Xutil.h 267
]
def _X_ATTRIBUTE_PRINTF(x,y): return __attribute__((__format__(__printf__,x,y))) # macro
def _X_SENTINEL(x): return __attribute__ ((__sentinel__(x))) # macro
#_Xconst = const # alias

# /usr/include/X11/Xlib.h 102
_Xmblen = platform.createBaseFunction( 
	'_Xmblen', dll=platform.GL, resultType=c_int, 
	argTypes=[STRING,c_int],
	doc='_Xmblen( STRING(str), c_int(len) ) -> c_int', 
	argNames=('str', 'len'),
)


# /usr/include/X11/Xlib.h 3999
_Xmbtowc = platform.createBaseFunction( 
	'_Xmbtowc', dll=platform.GL, resultType=c_int, 
	argTypes=[WSTRING,STRING,c_int],
	doc='_Xmbtowc( WSTRING(None), STRING(None), c_int(None) ) -> c_int', 
	argNames=('None', 'None', 'None'),
)

_XrmHashBucketRec._fields_ = [
    # /usr/include/X11/Xlib.h 523
]

# /usr/include/X11/Xlib.h 4004
_Xwctomb = platform.createBaseFunction( 
	'_Xwctomb', dll=platform.GL, resultType=c_int, 
	argTypes=[STRING,c_wchar],
	doc='_Xwctomb( STRING(None), c_wchar(None) ) -> c_int', 
	argNames=('None', 'None'),
)

def __ASMNAME(cname): return __ASMNAME2 (__USER_LABEL_PREFIX__, cname) # macro
#def __ASMNAME2(prefix,cname): return __STRING (prefix) cname # macro
#__BLKCNT64_T_TYPE = __SQUAD_TYPE # alias
#__BLKCNT_T_TYPE = __SLONGWORD_TYPE # alias
#__BLKSIZE_T_TYPE = __SLONGWORD_TYPE # alias
#__CLOCKID_T_TYPE = __S32_TYPE # alias
#__CLOCK_T_TYPE = __SLONGWORD_TYPE # alias
def __CONCAT(x,y): return x ## y # macro
#__DADDR_T_TYPE = __S32_TYPE # alias
#__DEV_T_TYPE = __UQUAD_TYPE # alias
def __FDELT(d): return ((d) / __NFDBITS) # macro
#def __FDMASK(d): return ((__fd_mask) 1 << ((d) % __NFDBITS)) # macro
#def __FDS_BITS(set): return ((set)->fds_bits) # macro
#def __FD_CLR(d,s): return (__FDS_BITS (s)[__FDELT(d)] &= ~__FDMASK(d)) # macro
def __FD_ISSET(d,s): return ((__FDS_BITS (s)[__FDELT(d)] & __FDMASK(d)) != 0) # macro
#def __FD_SET(d,s): return (__FDS_BITS (s)[__FDELT(d)] |= __FDMASK(d)) # macro
#def __FD_ZERO(s): return do { unsigned int __i; fd_set *__arr = (s); for (__i = 0; __i < sizeof (fd_set) / sizeof (__fd_mask); ++__i) __FDS_BITS (__arr)[__i] = 0; } while (0) # macro
__FLOAT_WORD_ORDER = __BYTE_ORDER # alias
#__FSBLKCNT64_T_TYPE = __UQUAD_TYPE # alias
#__FSBLKCNT_T_TYPE = __ULONGWORD_TYPE # alias
#__FSFILCNT64_T_TYPE = __UQUAD_TYPE # alias
#__FSFILCNT_T_TYPE = __ULONGWORD_TYPE # alias
#__GID_T_TYPE = __U32_TYPE # alias
def __GLIBC_PREREQ(maj,min): return ((__GLIBC__ << 16) + __GLIBC_MINOR__ >= ((maj) << 16) + (min)) # macro
__GLXEvent._fields_ = [
    # /usr/include/GL/glx.h 491
    ('glxpbufferclobber', GLXPbufferClobberEvent),
    ('pad', c_long * 24),
]
__GLXFBConfigRec._fields_ = [
    # /usr/include/GL/glx.h 182
]
__GLXcontextRec._fields_ = [
    # /usr/include/GL/glx.h 178
]

__GLXextFuncPtr = CFUNCTYPE(None)
def __GNUC_PREREQ(maj,min): return ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min)) # macro
#__ID_T_TYPE = __U32_TYPE # alias
#__INO64_T_TYPE = __UQUAD_TYPE # alias
#__INO_T_TYPE = __ULONGWORD_TYPE # alias
#__KEY_T_TYPE = __S32_TYPE # alias
#def __LDBL_REDIR(name,proto): return name proto # macro
#def __LDBL_REDIR1(name,proto,alias): return name proto # macro
#def __LDBL_REDIR1_NTH(name,proto,alias): return name proto __THROW # macro
#def __LDBL_REDIR_NTH(name,proto): return name proto __THROW # macro
def __LONG_LONG_PAIR(HI,LO): return LO, HI # macro
#__MODE_T_TYPE = __U32_TYPE # alias
#__NLINK_T_TYPE = __UWORD_TYPE # alias
#def __NTH(fct): return fct throw () # macro
#__OFF64_T_TYPE = __SQUAD_TYPE # alias
#__OFF_T_TYPE = __SLONGWORD_TYPE # alias
def __P(args): return args # macro
#__PID_T_TYPE = __S32_TYPE # alias
def __PMT(args): return args # macro
#def __REDIRECT(name,proto,alias): return name proto __asm__ (__ASMNAME (#alias)) # macro
#def __REDIRECT_NTH(name,proto,alias): return name proto __THROW __asm__ (__ASMNAME (#alias)) # macro
#__RLIM64_T_TYPE = __UQUAD_TYPE # alias
#__RLIM_T_TYPE = __ULONGWORD_TYPE # alias
#__SLONG32_TYPE = int # alias
#__SSIZE_T_TYPE = __SWORD_TYPE # alias
def __STRING(x): return #x # macro
#__SUSECONDS_T_TYPE = __SLONGWORD_TYPE # alias
#__SWBLK_T_TYPE = __SLONGWORD_TYPE # alias
#__TIME_T_TYPE = __SLONGWORD_TYPE # alias
#__UID_T_TYPE = __U32_TYPE # alias
#__USECONDS_T_TYPE = __U32_TYPE # alias
def __attribute_format_arg__(x): return __attribute__ ((__format_arg__ (x))) # macro
def __attribute_format_strfmon__(a,b): return __attribute__ ((__format__ (__strfmon__, a, b))) # macro
__blkcnt64_t = c_long
__blkcnt_t = c_long
__blksize_t = c_long
def __bos(ptr): return __builtin_object_size (ptr, __USE_FORTIFY_LEVEL > 1) # macro
def __bos0(ptr): return __builtin_object_size (ptr, 0) # macro
__caddr_t = STRING
__clock_t = c_long
__clockid_t = c_int
__daddr_t = c_int
__dev_t = c_ulong
__fd_mask = c_long
__fsblkcnt64_t = c_ulong
__fsblkcnt_t = c_ulong
__fsfilcnt64_t = c_ulong
__fsfilcnt_t = c_ulong
class __fsid_t(Structure):
    pass

__fsid_t._fields_ = [
    # /usr/include/gentoo-multilib/amd64/bits/types.h 147
    ('__val', c_int * 2),
]
__gid_t = c_uint
#__gwchar_t = wchar_t # alias
__id_t = c_uint
__ino64_t = c_ulong
__ino_t = c_ulong
__int16_t = c_short
__int32_t = c_int
__int64_t = c_long

__int8_t = c_byte
#def __intN_t(N,MODE): return typedef int int ##N ##_t __attribute__ ((__mode__ (MODE))) # macro
__intptr_t = c_long
__key_t = c_int
__off64_t = c_long
__loff_t = __off64_t
__mode_t = c_uint
__nlink_t = c_ulong
#def __nonnull(params): return __attribute__ ((__nonnull__ params)) # macro
__off_t = c_long
__pid_t = c_int
class __pthread_internal_list(Structure):
    pass

__pthread_internal_list._fields_ = [
    # /usr/include/gentoo-multilib/amd64/bits/pthreadtypes.h 62
    ('__prev', POINTER(__pthread_internal_list)),
    ('__next', POINTER(__pthread_internal_list)),
]
__pthread_list_t = __pthread_internal_list
class __pthread_mutex_s(Structure):
    pass
__pthread_mutex_s._fields_ = [
    # /usr/include/gentoo-multilib/amd64/bits/pthreadtypes.h 79
    ('__lock', c_int),
    ('__count', c_uint),
    ('__owner', c_int),
    ('__nusers', c_uint),
    ('__kind', c_int),
    ('__spins', c_int),
    ('__list', __pthread_list_t),
]
__quad_t = c_long
__qaddr_t = POINTER(__quad_t)
__rlim64_t = c_ulong
__rlim_t = c_ulong
__sig_atomic_t = c_int
class __sigset_t(Structure):
    pass

__sigset_t._fields_ = [
    # /usr/include/gentoo-multilib/amd64/bits/sigset.h 31
    ('__val', c_ulong * 16),
]
__socklen_t = c_uint
__ssize_t = c_long
__suseconds_t = c_long
__swblk_t = c_long
__time_t = c_long
__timer_t = c_void_p
__u_char = c_ubyte
__u_int = c_uint
#def __u_intN_t(N,MODE): return typedef unsigned int u_int ##N ##_t __attribute__ ((__mode__ (MODE))) # macro
__u_long = c_ulong
__u_quad_t = c_ulong
__u_short = c_ushort
__uid_t = c_uint
__uint16_t = c_ushort
__uint32_t = c_uint
__uint64_t = c_ulong
__uint8_t = c_ubyte
__useconds_t = c_uint
#def __warndecl(name,msg): return extern void name (void) # macro
blkcnt64_t = __blkcnt64_t
blkcnt_t = __blkcnt_t
blksize_t = __blksize_t
caddr_t = __caddr_t
clock_t = __clock_t
clockid_t = __clockid_t
daddr_t = __daddr_t
dev_t = __dev_t
fd_mask = __fd_mask
class fd_set(Structure):
    pass

fd_set._fields_ = [
    # /usr/include/gentoo-multilib/amd64/sys/select.h 78
    ('fds_bits', __fd_mask * 16),
]
fsblkcnt64_t = __fsblkcnt64_t
fsblkcnt_t = __fsblkcnt_t
fsfilcnt64_t = __fsfilcnt64_t
fsfilcnt_t = __fsfilcnt_t
fsid_t = __fsid_t
gid_t = __gid_t

# /usr/include/GL/gl.h 2065
glActiveTextureARB = platform.createBaseFunction( 
	'glActiveTextureARB', dll=platform.GL, resultType=None, 
	argTypes=[GLenum],
	doc='glActiveTextureARB( GLenum(texture) ) -> None', 
	argNames=('texture',),
)


# /usr/include/GL/gl.h 2066
glClientActiveTextureARB = platform.createBaseFunction( 
	'glClientActiveTextureARB', dll=platform.GL, resultType=None, 
	argTypes=[GLenum],
	doc='glClientActiveTextureARB( GLenum(texture) ) -> None', 
	argNames=('texture',),
)


# /usr/include/GL/gl.h 2067
glMultiTexCoord1dARB = platform.createBaseFunction( 
	'glMultiTexCoord1dARB', dll=platform.GL, resultType=None, 
	argTypes=[GLenum,GLdouble],
	doc='glMultiTexCoord1dARB( GLenum(target), GLdouble(s) ) -> None', 
	argNames=('target', 's'),
)


# /usr/include/GL/gl.h 2068
glMultiTexCoord1dvARB = platform.createBaseFunction( 
	'glMultiTexCoord1dvARB', dll=platform.GL, resultType=None, 
	argTypes=[GLenum,arrays.GLdoubleArray],
	doc='glMultiTexCoord1dvARB( GLenum(target), arrays.GLdoubleArray(v) ) -> None', 
	argNames=('target', 'v'),
)


# /usr/include/GL/gl.h 2069
glMultiTexCoord1fARB = platform.createBaseFunction( 
	'glMultiTexCoord1fARB', dll=platform.GL, resultType=None, 
	argTypes=[GLenum,GLfloat],
	doc='glMultiTexCoord1fARB( GLenum(target), GLfloat(s) ) -> None', 
	argNames=('target', 's'),
)


# /usr/include/GL/gl.h 2070
glMultiTexCoord1fvARB = platform.createBaseFunction( 
	'glMultiTexCoord1fvARB', dll=platform.GL, resultType=None, 
	argTypes=[GLenum,arrays.GLfloatArray],
	doc='glMultiTexCoord1fvARB( GLenum(target), arrays.GLfloatArray(v) ) -> None', 
	argNames=('target', 'v'),
)


# /usr/include/GL/gl.h 2071
glMultiTexCoord1iARB = platform.createBaseFunction( 
	'glMultiTexCoord1iARB', dll=platform.GL, resultType=None, 
	argTypes=[GLenum,GLint],
	doc='glMultiTexCoord1iARB( GLenum(target), GLint(s) ) -> None', 
	argNames=('target', 's'),
)


# /usr/include/GL/gl.h 2072
glMultiTexCoord1ivARB = platform.createBaseFunction( 
	'glMultiTexCoord1ivARB', dll=platform.GL, resultType=None, 
	argTypes=[GLenum,arrays.GLintArray],
	doc='glMultiTexCoord1ivARB( GLenum(target), arrays.GLintArray(v) ) -> None', 
	argNames=('target', 'v'),
)


# /usr/include/GL/gl.h 2073
glMultiTexCoord1sARB = platform.createBaseFunction( 
	'glMultiTexCoord1sARB', dll=platform.GL, resultType=None, 
	argTypes=[GLenum,GLshort],
	doc='glMultiTexCoord1sARB( GLenum(target), GLshort(s) ) -> None', 
	argNames=('target', 's'),
)


# /usr/include/GL/gl.h 2074
glMultiTexCoord1svARB = platform.createBaseFunction( 
	'glMultiTexCoord1svARB', dll=platform.GL, resultType=None, 
	argTypes=[GLenum,arrays.GLshortArray],
	doc='glMultiTexCoord1svARB( GLenum(target), arrays.GLshortArray(v) ) -> None', 
	argNames=('target', 'v'),
)


# /usr/include/GL/gl.h 2075
glMultiTexCoord2dARB = platform.createBaseFunction( 
	'glMultiTexCoord2dARB', dll=platform.GL, resultType=None, 
	argTypes=[GLenum,GLdouble,GLdouble],
	doc='glMultiTexCoord2dARB( GLenum(target), GLdouble(s), GLdouble(t) ) -> None', 
	argNames=('target', 's', 't'),
)


# /usr/include/GL/gl.h 2076
glMultiTexCoord2dvARB = platform.createBaseFunction( 
	'glMultiTexCoord2dvARB', dll=platform.GL, resultType=None, 
	argTypes=[GLenum,arrays.GLdoubleArray],
	doc='glMultiTexCoord2dvARB( GLenum(target), arrays.GLdoubleArray(v) ) -> None', 
	argNames=('target', 'v'),
)


# /usr/include/GL/gl.h 2077
glMultiTexCoord2fARB = platform.createBaseFunction( 
	'glMultiTexCoord2fARB', dll=platform.GL, resultType=None, 
	argTypes=[GLenum,GLfloat,GLfloat],
	doc='glMultiTexCoord2fARB( GLenum(target), GLfloat(s), GLfloat(t) ) -> None', 
	argNames=('target', 's', 't'),
)


# /usr/include/GL/gl.h 2078
glMultiTexCoord2fvARB = platform.createBaseFunction( 
	'glMultiTexCoord2fvARB', dll=platform.GL, resultType=None, 
	argTypes=[GLenum,arrays.GLfloatArray],
	doc='glMultiTexCoord2fvARB( GLenum(target), arrays.GLfloatArray(v) ) -> None', 
	argNames=('target', 'v'),
)


# /usr/include/GL/gl.h 2079
glMultiTexCoord2iARB = platform.createBaseFunction( 
	'glMultiTexCoord2iARB', dll=platform.GL, resultType=None, 
	argTypes=[GLenum,GLint,GLint],
	doc='glMultiTexCoord2iARB( GLenum(target), GLint(s), GLint(t) ) -> None', 
	argNames=('target', 's', 't'),
)


# /usr/include/GL/gl.h 2080
glMultiTexCoord2ivARB = platform.createBaseFunction( 
	'glMultiTexCoord2ivARB', dll=platform.GL, resultType=None, 
	argTypes=[GLenum,arrays.GLintArray],
	doc='glMultiTexCoord2ivARB( GLenum(target), arrays.GLintArray(v) ) -> None', 
	argNames=('target', 'v'),
)


# /usr/include/GL/gl.h 2081
glMultiTexCoord2sARB = platform.createBaseFunction( 
	'glMultiTexCoord2sARB', dll=platform.GL, resultType=None, 
	argTypes=[GLenum,GLshort,GLshort],
	doc='glMultiTexCoord2sARB( GLenum(target), GLshort(s), GLshort(t) ) -> None', 
	argNames=('target', 's', 't'),
)


# /usr/include/GL/gl.h 2082
glMultiTexCoord2svARB = platform.createBaseFunction( 
	'glMultiTexCoord2svARB', dll=platform.GL, resultType=None, 
	argTypes=[GLenum,arrays.GLshortArray],
	doc='glMultiTexCoord2svARB( GLenum(target), arrays.GLshortArray(v) ) -> None', 
	argNames=('target', 'v'),
)


# /usr/include/GL/gl.h 2083
glMultiTexCoord3dARB = platform.createBaseFunction( 
	'glMultiTexCoord3dARB', dll=platform.GL, resultType=None, 
	argTypes=[GLenum,GLdouble,GLdouble,GLdouble],
	doc='glMultiTexCoord3dARB( GLenum(target), GLdouble(s), GLdouble(t), GLdouble(r) ) -> None', 
	argNames=('target', 's', 't', 'r'),
)


# /usr/include/GL/gl.h 2084
glMultiTexCoord3dvARB = platform.createBaseFunction( 
	'glMultiTexCoord3dvARB', dll=platform.GL, resultType=None, 
	argTypes=[GLenum,arrays.GLdoubleArray],
	doc='glMultiTexCoord3dvARB( GLenum(target), arrays.GLdoubleArray(v) ) -> None', 
	argNames=('target', 'v'),
)


# /usr/include/GL/gl.h 2085
glMultiTexCoord3fARB = platform.createBaseFunction( 
	'glMultiTexCoord3fARB', dll=platform.GL, resultType=None, 
	argTypes=[GLenum,GLfloat,GLfloat,GLfloat],
	doc='glMultiTexCoord3fARB( GLenum(target), GLfloat(s), GLfloat(t), GLfloat(r) ) -> None', 
	argNames=('target', 's', 't', 'r'),
)


# /usr/include/GL/gl.h 2086
glMultiTexCoord3fvARB = platform.createBaseFunction( 
	'glMultiTexCoord3fvARB', dll=platform.GL, resultType=None, 
	argTypes=[GLenum,arrays.GLfloatArray],
	doc='glMultiTexCoord3fvARB( GLenum(target), arrays.GLfloatArray(v) ) -> None', 
	argNames=('target', 'v'),
)


# /usr/include/GL/gl.h 2087
glMultiTexCoord3iARB = platform.createBaseFunction( 
	'glMultiTexCoord3iARB', dll=platform.GL, resultType=None, 
	argTypes=[GLenum,GLint,GLint,GLint],
	doc='glMultiTexCoord3iARB( GLenum(target), GLint(s), GLint(t), GLint(r) ) -> None', 
	argNames=('target', 's', 't', 'r'),
)


# /usr/include/GL/gl.h 2088
glMultiTexCoord3ivARB = platform.createBaseFunction( 
	'glMultiTexCoord3ivARB', dll=platform.GL, resultType=None, 
	argTypes=[GLenum,arrays.GLintArray],
	doc='glMultiTexCoord3ivARB( GLenum(target), arrays.GLintArray(v) ) -> None', 
	argNames=('target', 'v'),
)


# /usr/include/GL/gl.h 2089
glMultiTexCoord3sARB = platform.createBaseFunction( 
	'glMultiTexCoord3sARB', dll=platform.GL, resultType=None, 
	argTypes=[GLenum,GLshort,GLshort,GLshort],
	doc='glMultiTexCoord3sARB( GLenum(target), GLshort(s), GLshort(t), GLshort(r) ) -> None', 
	argNames=('target', 's', 't', 'r'),
)


# /usr/include/GL/gl.h 2090
glMultiTexCoord3svARB = platform.createBaseFunction( 
	'glMultiTexCoord3svARB', dll=platform.GL, resultType=None, 
	argTypes=[GLenum,arrays.GLshortArray],
	doc='glMultiTexCoord3svARB( GLenum(target), arrays.GLshortArray(v) ) -> None', 
	argNames=('target', 'v'),
)


# /usr/include/GL/gl.h 2091
glMultiTexCoord4dARB = platform.createBaseFunction( 
	'glMultiTexCoord4dARB', dll=platform.GL, resultType=None, 
	argTypes=[GLenum,GLdouble,GLdouble,GLdouble,GLdouble],
	doc='glMultiTexCoord4dARB( GLenum(target), GLdouble(s), GLdouble(t), GLdouble(r), GLdouble(q) ) -> None', 
	argNames=('target', 's', 't', 'r', 'q'),
)


# /usr/include/GL/gl.h 2092
glMultiTexCoord4dvARB = platform.createBaseFunction( 
	'glMultiTexCoord4dvARB', dll=platform.GL, resultType=None, 
	argTypes=[GLenum,arrays.GLdoubleArray],
	doc='glMultiTexCoord4dvARB( GLenum(target), arrays.GLdoubleArray(v) ) -> None', 
	argNames=('target', 'v'),
)


# /usr/include/GL/gl.h 2093
glMultiTexCoord4fARB = platform.createBaseFunction( 
	'glMultiTexCoord4fARB', dll=platform.GL, resultType=None, 
	argTypes=[GLenum,GLfloat,GLfloat,GLfloat,GLfloat],
	doc='glMultiTexCoord4fARB( GLenum(target), GLfloat(s), GLfloat(t), GLfloat(r), GLfloat(q) ) -> None', 
	argNames=('target', 's', 't', 'r', 'q'),
)


# /usr/include/GL/gl.h 2094
glMultiTexCoord4fvARB = platform.createBaseFunction( 
	'glMultiTexCoord4fvARB', dll=platform.GL, resultType=None, 
	argTypes=[GLenum,arrays.GLfloatArray],
	doc='glMultiTexCoord4fvARB( GLenum(target), arrays.GLfloatArray(v) ) -> None', 
	argNames=('target', 'v'),
)


# /usr/include/GL/gl.h 2095
glMultiTexCoord4iARB = platform.createBaseFunction( 
	'glMultiTexCoord4iARB', dll=platform.GL, resultType=None, 
	argTypes=[GLenum,GLint,GLint,GLint,GLint],
	doc='glMultiTexCoord4iARB( GLenum(target), GLint(s), GLint(t), GLint(r), GLint(q) ) -> None', 
	argNames=('target', 's', 't', 'r', 'q'),
)


# /usr/include/GL/gl.h 2096
glMultiTexCoord4ivARB = platform.createBaseFunction( 
	'glMultiTexCoord4ivARB', dll=platform.GL, resultType=None, 
	argTypes=[GLenum,arrays.GLintArray],
	doc='glMultiTexCoord4ivARB( GLenum(target), arrays.GLintArray(v) ) -> None', 
	argNames=('target', 'v'),
)


# /usr/include/GL/gl.h 2097
glMultiTexCoord4sARB = platform.createBaseFunction( 
	'glMultiTexCoord4sARB', dll=platform.GL, resultType=None, 
	argTypes=[GLenum,GLshort,GLshort,GLshort,GLshort],
	doc='glMultiTexCoord4sARB( GLenum(target), GLshort(s), GLshort(t), GLshort(r), GLshort(q) ) -> None', 
	argNames=('target', 's', 't', 'r', 'q'),
)


# /usr/include/GL/gl.h 2098
glMultiTexCoord4svARB = platform.createBaseFunction( 
	'glMultiTexCoord4svARB', dll=platform.GL, resultType=None, 
	argTypes=[GLenum,arrays.GLshortArray],
	doc='glMultiTexCoord4svARB( GLenum(target), arrays.GLshortArray(v) ) -> None', 
	argNames=('target', 'v'),
)


# /usr/include/GL/glx.h 333
glXAllocateMemoryNV = platform.createBaseFunction( 
	'glXAllocateMemoryNV', dll=platform.GL, resultType=c_void_p, 
	argTypes=[GLsizei,GLfloat,GLfloat,GLfloat],
	doc='glXAllocateMemoryNV( GLsizei(size), GLfloat(readfreq), GLfloat(writefreq), GLfloat(priority) ) -> c_void_p', 
	argNames=('size', 'readfreq', 'writefreq', 'priority'),
)


# /usr/include/GL/glx.h 465
glXBindTexImageEXT = platform.createBaseFunction( 
	'glXBindTexImageEXT', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(Display),GLXDrawable,c_int,POINTER(c_int)],
	doc='glXBindTexImageEXT( POINTER(Display)(dpy), GLXDrawable(drawable), c_int(buffer), POINTER(c_int)(attrib_list) ) -> None', 
	argNames=('dpy', 'drawable', 'buffer', 'attrib_list'),
)



# /usr/include/GL/glx.h 246
glXChooseFBConfig = platform.createBaseFunction( 
	'glXChooseFBConfig', dll=platform.GL, resultType=POINTER(GLXFBConfig), 
	argTypes=[POINTER(Display),c_int,POINTER(c_int),POINTER(c_int)],
	doc='glXChooseFBConfig( POINTER(Display)(dpy), c_int(screen), POINTER(c_int)(attribList), POINTER(c_int)(nitems) ) -> POINTER(GLXFBConfig)', 
	argNames=('dpy', 'screen', 'attribList', 'nitems'),
)


# /usr/include/GL/glx.h 191
glXChooseVisual = platform.createBaseFunction( 
	'glXChooseVisual', dll=platform.GL, resultType=POINTER(XVisualInfo), 
	argTypes=[POINTER(Display),c_int,POINTER(c_int)],
	doc='glXChooseVisual( POINTER(Display)(dpy), c_int(screen), POINTER(c_int)(attribList) ) -> POINTER(XVisualInfo)', 
	argNames=('dpy', 'screen', 'attribList'),
)


# /usr/include/GL/glx.h 202
glXCopyContext = platform.createBaseFunction( 
	'glXCopyContext', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(Display),GLXContext,GLXContext,c_ulong],
	doc='glXCopyContext( POINTER(Display)(dpy), GLXContext(src), GLXContext(dst), c_ulong(mask) ) -> None', 
	argNames=('dpy', 'src', 'dst', 'mask'),
)


# /usr/include/GL/glx.h 194
glXCreateContext = platform.createBaseFunction( 
	'glXCreateContext', dll=platform.GL, resultType=GLXContext, 
	argTypes=[POINTER(Display),POINTER(XVisualInfo),GLXContext,c_int],
	doc='glXCreateContext( POINTER(Display)(dpy), POINTER(XVisualInfo)(vis), GLXContext(shareList), c_int(direct) ) -> GLXContext', 
	argNames=('dpy', 'vis', 'shareList', 'direct'),
)


# /usr/include/GL/glx.h 207
glXCreateGLXPixmap = platform.createBaseFunction( 
	'glXCreateGLXPixmap', dll=platform.GL, resultType=GLXPixmap, 
	argTypes=[POINTER(Display),POINTER(XVisualInfo),Pixmap],
	doc='glXCreateGLXPixmap( POINTER(Display)(dpy), POINTER(XVisualInfo)(visual), Pixmap(pixmap) ) -> GLXPixmap', 
	argNames=('dpy', 'visual', 'pixmap'),
)


# /usr/include/GL/glx.h 277
glXCreateNewContext = platform.createBaseFunction( 
	'glXCreateNewContext', dll=platform.GL, resultType=GLXContext, 
	argTypes=[POINTER(Display),GLXFBConfig,c_int,GLXContext,c_int],
	doc='glXCreateNewContext( POINTER(Display)(dpy), GLXFBConfig(config), c_int(renderType), GLXContext(shareList), c_int(direct) ) -> GLXContext', 
	argNames=('dpy', 'config', 'renderType', 'shareList', 'direct'),
)


# /usr/include/GL/glx.h 268
glXCreatePbuffer = platform.createBaseFunction( 
	'glXCreatePbuffer', dll=platform.GL, resultType=GLXPbuffer, 
	argTypes=[POINTER(Display),GLXFBConfig,POINTER(c_int)],
	doc='glXCreatePbuffer( POINTER(Display)(dpy), GLXFBConfig(config), POINTER(c_int)(attribList) ) -> GLXPbuffer', 
	argNames=('dpy', 'config', 'attribList'),
)


# /usr/include/GL/glx.h 263
glXCreatePixmap = platform.createBaseFunction( 
	'glXCreatePixmap', dll=platform.GL, resultType=GLXPixmap, 
	argTypes=[POINTER(Display),GLXFBConfig,Pixmap,POINTER(c_int)],
	doc='glXCreatePixmap( POINTER(Display)(dpy), GLXFBConfig(config), Pixmap(pixmap), POINTER(c_int)(attribList) ) -> GLXPixmap', 
	argNames=('dpy', 'config', 'pixmap', 'attribList'),
)


# /usr/include/GL/glx.h 258
glXCreateWindow = platform.createBaseFunction( 
	'glXCreateWindow', dll=platform.GL, resultType=GLXWindow, 
	argTypes=[POINTER(Display),GLXFBConfig,Window,POINTER(c_int)],
	doc='glXCreateWindow( POINTER(Display)(dpy), GLXFBConfig(config), Window(win), POINTER(c_int)(attribList) ) -> GLXWindow', 
	argNames=('dpy', 'config', 'win', 'attribList'),
)


# /usr/include/GL/glx.h 196
glXDestroyContext = platform.createBaseFunction( 
	'glXDestroyContext', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(Display),GLXContext],
	doc='glXDestroyContext( POINTER(Display)(dpy), GLXContext(ctx) ) -> None', 
	argNames=('dpy', 'ctx'),
)


# /usr/include/GL/glx.h 209
glXDestroyGLXPixmap = platform.createBaseFunction( 
	'glXDestroyGLXPixmap', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(Display),GLXPixmap],
	doc='glXDestroyGLXPixmap( POINTER(Display)(dpy), GLXPixmap(pixmap) ) -> None', 
	argNames=('dpy', 'pixmap'),
)


# /usr/include/GL/glx.h 270
glXDestroyPbuffer = platform.createBaseFunction( 
	'glXDestroyPbuffer', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(Display),GLXPbuffer],
	doc='glXDestroyPbuffer( POINTER(Display)(dpy), GLXPbuffer(pbuf) ) -> None', 
	argNames=('dpy', 'pbuf'),
)


# /usr/include/GL/glx.h 265
glXDestroyPixmap = platform.createBaseFunction( 
	'glXDestroyPixmap', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(Display),GLXPixmap],
	doc='glXDestroyPixmap( POINTER(Display)(dpy), GLXPixmap(pixmap) ) -> None', 
	argNames=('dpy', 'pixmap'),
)


# /usr/include/GL/glx.h 260
glXDestroyWindow = platform.createBaseFunction( 
	'glXDestroyWindow', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(Display),GLXWindow],
	doc='glXDestroyWindow( POINTER(Display)(dpy), GLXWindow(window) ) -> None', 
	argNames=('dpy', 'window'),
)


# /usr/include/GL/glx.h 334
glXFreeMemoryNV = platform.createBaseFunction( 
	'glXFreeMemoryNV', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(GLvoid)],
	doc='glXFreeMemoryNV( POINTER(GLvoid)(pointer) ) -> None', 
	argNames=('pointer',),
)


# /usr/include/GL/glx.h 237
glXGetClientString = platform.createBaseFunction( 
	'glXGetClientString', dll=platform.GL, resultType=STRING, 
	argTypes=[POINTER(Display),c_int],
	doc='glXGetClientString( POINTER(Display)(dpy), c_int(name) ) -> STRING', 
	argNames=('dpy', 'name'),
)


# /usr/include/GL/glx.h 218
glXGetConfig = platform.createBaseFunction( 
	'glXGetConfig', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),POINTER(XVisualInfo),c_int,POINTER(c_int)],
	doc='glXGetConfig( POINTER(Display)(dpy), POINTER(XVisualInfo)(visual), c_int(attrib), POINTER(c_int)(value) ) -> c_int', 
	argNames=('dpy', 'visual', 'attrib', 'value'),
)


# /usr/include/GL/glx.h 220
glXGetCurrentContext = platform.createBaseFunction( 
	'glXGetCurrentContext', dll=platform.GL, resultType=GLXContext, 
	argTypes=[],
	doc='glXGetCurrentContext(  ) -> GLXContext', 
	argNames=(),
)


# /usr/include/GL/glx.h 241
glXGetCurrentDisplay = platform.createBaseFunction( 
	'glXGetCurrentDisplay', dll=platform.GL, resultType=POINTER(Display), 
	argTypes=[],
	doc='glXGetCurrentDisplay(  ) -> POINTER(Display)', 
	argNames=(),
)


# /usr/include/GL/glx.h 222
glXGetCurrentDrawable = platform.createBaseFunction( 
	'glXGetCurrentDrawable', dll=platform.GL, resultType=GLXDrawable, 
	argTypes=[],
	doc='glXGetCurrentDrawable(  ) -> GLXDrawable', 
	argNames=(),
)


# /usr/include/GL/glx.h 282
glXGetCurrentReadDrawable = platform.createBaseFunction( 
	'glXGetCurrentReadDrawable', dll=platform.GL, resultType=GLXDrawable, 
	argTypes=[],
	doc='glXGetCurrentReadDrawable(  ) -> GLXDrawable', 
	argNames=(),
)


# /usr/include/GL/glx.h 249
glXGetFBConfigAttrib = platform.createBaseFunction( 
	'glXGetFBConfigAttrib', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),GLXFBConfig,c_int,POINTER(c_int)],
	doc='glXGetFBConfigAttrib( POINTER(Display)(dpy), GLXFBConfig(config), c_int(attribute), POINTER(c_int)(value) ) -> c_int', 
	argNames=('dpy', 'config', 'attribute', 'value'),
)


# /usr/include/GL/glx.h 252
glXGetFBConfigs = platform.createBaseFunction( 
	'glXGetFBConfigs', dll=platform.GL, resultType=POINTER(GLXFBConfig), 
	argTypes=[POINTER(Display),c_int,POINTER(c_int)],
	doc='glXGetFBConfigs( POINTER(Display)(dpy), c_int(screen), POINTER(c_int)(nelements) ) -> POINTER(GLXFBConfig)', 
	argNames=('dpy', 'screen', 'nelements'),
)


# /usr/include/GL/glx.h 295
glXGetProcAddress = platform.createBaseFunction( 
	'glXGetProcAddress', dll=platform.GL, resultType=CFUNCTYPE(None), 
	argTypes=[arrays.GLubyteArray],
	doc='glXGetProcAddress( arrays.GLubyteArray(procname) ) -> CFUNCTYPE(None)', 
	argNames=('procname',),
)


# /usr/include/GL/glx.h 291
glXGetSelectedEvent = platform.createBaseFunction( 
	'glXGetSelectedEvent', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(Display),GLXDrawable,POINTER(c_ulong)],
	doc='glXGetSelectedEvent( POINTER(Display)(dpy), GLXDrawable(drawable), POINTER(c_ulong)(mask) ) -> None', 
	argNames=('dpy', 'drawable', 'mask'),
)


# /usr/include/GL/glx.h 255
glXGetVisualFromFBConfig = platform.createBaseFunction( 
	'glXGetVisualFromFBConfig', dll=platform.GL, resultType=POINTER(XVisualInfo), 
	argTypes=[POINTER(Display),GLXFBConfig],
	doc='glXGetVisualFromFBConfig( POINTER(Display)(dpy), GLXFBConfig(config) ) -> POINTER(XVisualInfo)', 
	argNames=('dpy', 'config'),
)


# /usr/include/GL/glx.h 215
glXIsDirect = platform.createBaseFunction( 
	'glXIsDirect', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),GLXContext],
	doc='glXIsDirect( POINTER(Display)(dpy), GLXContext(ctx) ) -> c_int', 
	argNames=('dpy', 'ctx'),
)


# /usr/include/GL/glx.h 280
glXMakeContextCurrent = platform.createBaseFunction( 
	'glXMakeContextCurrent', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),GLXDrawable,GLXDrawable,GLXContext],
	doc='glXMakeContextCurrent( POINTER(Display)(dpy), GLXDrawable(draw), GLXDrawable(read), GLXContext(ctx) ) -> c_int', 
	argNames=('dpy', 'draw', 'read', 'ctx'),
)


# /usr/include/GL/glx.h 199
glXMakeCurrent = platform.createBaseFunction( 
	'glXMakeCurrent', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),GLXDrawable,GLXContext],
	doc='glXMakeCurrent( POINTER(Display)(dpy), GLXDrawable(drawable), GLXContext(ctx) ) -> c_int', 
	argNames=('dpy', 'drawable', 'ctx'),
)


# /usr/include/GL/glx.h 285
glXQueryContext = platform.createBaseFunction( 
	'glXQueryContext', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),GLXContext,c_int,POINTER(c_int)],
	doc='glXQueryContext( POINTER(Display)(dpy), GLXContext(ctx), c_int(attribute), POINTER(c_int)(value) ) -> c_int', 
	argNames=('dpy', 'ctx', 'attribute', 'value'),
)


# /usr/include/GL/glx.h 273
glXQueryDrawable = platform.createBaseFunction( 
	'glXQueryDrawable', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(Display),GLXDrawable,c_int,POINTER(c_uint)],
	doc='glXQueryDrawable( POINTER(Display)(dpy), GLXDrawable(draw), c_int(attribute), POINTER(c_uint)(value) ) -> None', 
	argNames=('dpy', 'draw', 'attribute', 'value'),
)


# /usr/include/GL/glx.h 211
glXQueryExtension = platform.createBaseFunction( 
	'glXQueryExtension', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),POINTER(c_int),POINTER(c_int)],
	doc='glXQueryExtension( POINTER(Display)(dpy), POINTER(c_int)(errorb), POINTER(c_int)(event) ) -> c_int', 
	argNames=('dpy', 'errorb', 'event'),
)


# /usr/include/GL/glx.h 233
glXQueryExtensionsString = platform.createBaseFunction( 
	'glXQueryExtensionsString', dll=platform.GL, resultType=STRING, 
	argTypes=[POINTER(Display),c_int],
	doc='glXQueryExtensionsString( POINTER(Display)(dpy), c_int(screen) ) -> STRING', 
	argNames=('dpy', 'screen'),
)


# /usr/include/GL/glx.h 235
glXQueryServerString = platform.createBaseFunction( 
	'glXQueryServerString', dll=platform.GL, resultType=STRING, 
	argTypes=[POINTER(Display),c_int,c_int],
	doc='glXQueryServerString( POINTER(Display)(dpy), c_int(screen), c_int(name) ) -> STRING', 
	argNames=('dpy', 'screen', 'name'),
)


# /usr/include/GL/glx.h 213
glXQueryVersion = platform.createBaseFunction( 
	'glXQueryVersion', dll=platform.GL, resultType=c_int, 
	argTypes=[POINTER(Display),POINTER(c_int),POINTER(c_int)],
	doc='glXQueryVersion( POINTER(Display)(dpy), POINTER(c_int)(maj), POINTER(c_int)(min) ) -> c_int', 
	argNames=('dpy', 'maj', 'min'),
)


# /usr/include/GL/glx.h 466
glXReleaseTexImageEXT = platform.createBaseFunction( 
	'glXReleaseTexImageEXT', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(Display),GLXDrawable,c_int],
	doc='glXReleaseTexImageEXT( POINTER(Display)(dpy), GLXDrawable(drawable), c_int(buffer) ) -> None', 
	argNames=('dpy', 'drawable', 'buffer'),
)


# /usr/include/GL/glx.h 288
glXSelectEvent = platform.createBaseFunction( 
	'glXSelectEvent', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(Display),GLXDrawable,c_ulong],
	doc='glXSelectEvent( POINTER(Display)(dpy), GLXDrawable(drawable), c_ulong(mask) ) -> None', 
	argNames=('dpy', 'drawable', 'mask'),
)


# /usr/include/GL/glx.h 204
glXSwapBuffers = platform.createBaseFunction( 
	'glXSwapBuffers', dll=platform.GL, resultType=None, 
	argTypes=[POINTER(Display),GLXDrawable],
	doc='glXSwapBuffers( POINTER(Display)(dpy), GLXDrawable(drawable) ) -> None', 
	argNames=('dpy', 'drawable'),
)


# /usr/include/GL/glx.h 228
glXUseXFont = platform.createBaseFunction( 
	'glXUseXFont', dll=platform.GL, resultType=None, 
	argTypes=[Font,c_int,c_int,c_int],
	doc='glXUseXFont( Font(font), c_int(first), c_int(count), c_int(list) ) -> None', 
	argNames=('font', 'first', 'count', 'list'),
)


# /usr/include/GL/glx.h 224
glXWaitGL = platform.createBaseFunction( 
	'glXWaitGL', dll=platform.GL, resultType=None, 
	argTypes=[],
	doc='glXWaitGL(  ) -> None', 
	argNames=(),
)


# /usr/include/GL/glx.h 226
glXWaitX = platform.createBaseFunction( 
	'glXWaitX', dll=platform.GL, resultType=None, 
	argTypes=[],
	doc='glXWaitX(  ) -> None', 
	argNames=(),
)


# /usr/include/gentoo-multilib/amd64/sys/sysmacros.h 43
gnu_dev_major = platform.createBaseFunction( 
	'gnu_dev_major', dll=platform.GL, resultType=c_uint, 
	argTypes=[c_ulonglong],
	doc='gnu_dev_major( c_ulonglong(__dev) ) -> c_uint', 
	argNames=('__dev',),
)


# /usr/include/gentoo-multilib/amd64/sys/sysmacros.h 55
gnu_dev_makedev = platform.createBaseFunction( 
	'gnu_dev_makedev', dll=platform.GL, resultType=c_ulonglong, 
	argTypes=[c_uint,c_uint],
	doc='gnu_dev_makedev( c_uint(__major), c_uint(__minor) ) -> c_ulonglong', 
	argNames=('__major', '__minor'),
)


# /usr/include/gentoo-multilib/amd64/sys/sysmacros.h 49
gnu_dev_minor = platform.createBaseFunction( 
	'gnu_dev_minor', dll=platform.GL, resultType=c_uint, 
	argTypes=[c_ulonglong],
	doc='gnu_dev_minor( c_ulonglong(__dev) ) -> c_uint', 
	argNames=('__dev',),
)

id_t = __id_t
intmax_t = c_long

# /usr/include/gentoo-multilib/amd64/inttypes.h 298
imaxabs = platform.createBaseFunction( 
	'imaxabs', dll=platform.GL, resultType=intmax_t, 
	argTypes=[intmax_t],
	doc='imaxabs( intmax_t(__n) ) -> intmax_t', 
	argNames=('__n',),
)

class imaxdiv_t(Structure):
    pass
imaxdiv_t._fields_ = [
    # /usr/include/gentoo-multilib/amd64/inttypes.h 283
    ('quot', c_long),
    ('rem', c_long),
]

# /usr/include/gentoo-multilib/amd64/inttypes.h 302
imaxdiv = platform.createBaseFunction( 
	'imaxdiv', dll=platform.GL, resultType=imaxdiv_t, 
	argTypes=[intmax_t,intmax_t],
	doc='imaxdiv( intmax_t(__numer), intmax_t(__denom) ) -> imaxdiv_t', 
	argNames=('__numer', '__denom'),
)

ino64_t = __ino64_t
ino_t = __ino_t
int16_t = c_short
int32_t = c_int
int64_t = c_long
int8_t = c_byte
int_fast16_t = c_long
int_fast32_t = c_long
int_fast64_t = c_long
int_fast8_t = c_byte
int_least16_t = c_short
int_least32_t = c_int
int_least64_t = c_long
int_least8_t = c_byte
intptr_t = c_long
key_t = __key_t
loff_t = __loff_t
def major(dev): return gnu_dev_major (dev) # macro
def makedev(maj,min): return gnu_dev_makedev (maj, min) # macro
def minor(dev): return gnu_dev_minor (dev) # macro
mode_t = __mode_t
nlink_t = __nlink_t
off64_t = __off64_t
off_t = __off_t
def offsetof(TYPE,MEMBER): return __builtin_offsetof (TYPE, MEMBER) # macro
pid_t = __pid_t
class timespec(Structure):
    pass
timespec._fields_ = [
    # /usr/include/gentoo-multilib/amd64/time.h 122
    ('tv_sec', __time_t),
    ('tv_nsec', c_long),
]
# /usr/include/gentoo-multilib/amd64/sys/select.h 125
pselect = platform.createBaseFunction( 
	'pselect', dll=platform.GL, resultType=c_int, 
	argTypes=[c_int,POINTER(fd_set),POINTER(fd_set),POINTER(fd_set),POINTER(timespec),POINTER(__sigset_t)],
	doc='pselect( c_int(__nfds), POINTER(fd_set)(__readfds), POINTER(fd_set)(__writefds), POINTER(fd_set)(__exceptfds), POINTER(timespec)(__timeout), POINTER(__sigset_t)(__sigmask) ) -> c_int', 
	argNames=('__nfds', '__readfds', '__writefds', '__exceptfds', '__timeout', '__sigmask'),
)

class pthread_attr_t(Union):
    pass

pthread_attr_t._fields_ = [
    # /usr/include/gentoo-multilib/amd64/bits/pthreadtypes.h 57
    ('__size', c_char * 56),
    ('__align', c_long),
]
class pthread_barrier_t(Union):
    pass
pthread_barrier_t._fields_ = [
    # /usr/include/gentoo-multilib/amd64/bits/pthreadtypes.h 207
    ('__size', c_char * 32),
    ('__align', c_long),
]
class pthread_barrierattr_t(Union):
    pass

pthread_barrierattr_t._fields_ = [
    # /usr/include/gentoo-multilib/amd64/bits/pthreadtypes.h 213
    ('__size', c_char * 4),
    ('__align', c_int),
]
class pthread_cond_t(Union):
    pass


pthread_cond_t._fields_ = [
    # /usr/include/gentoo-multilib/amd64/bits/pthreadtypes.h 130
    ('__data', N14pthread_cond_t3DOT_7E),
    ('__size', c_char * 48),
    ('__align', c_longlong),
]
class pthread_condattr_t(Union):
    pass
pthread_condattr_t._fields_ = [
    # /usr/include/gentoo-multilib/amd64/bits/pthreadtypes.h 136
    ('__size', c_char * 4),
    ('__align', c_int),
]
pthread_key_t = c_uint
class pthread_mutex_t(Union):
    pass

pthread_mutex_t._fields_ = [
    # /usr/include/gentoo-multilib/amd64/bits/pthreadtypes.h 104
    ('__data', __pthread_mutex_s),
    ('__size', c_char * 40),
    ('__align', c_long),
]
class pthread_mutexattr_t(Union):
    pass
pthread_mutexattr_t._fields_ = [
    # /usr/include/gentoo-multilib/amd64/bits/pthreadtypes.h 110
    ('__size', c_char * 4),
    ('__align', c_int),
]
pthread_once_t = c_int
class pthread_rwlock_t(Union):
    pass
pthread_rwlock_t._fields_ = [
    # /usr/include/gentoo-multilib/amd64/bits/pthreadtypes.h 186
    ('__data', N16pthread_rwlock_t4DOT_10E),
    ('__size', c_char * 56),
    ('__align', c_long),
]
class pthread_rwlockattr_t(Union):
    pass

pthread_rwlockattr_t._fields_ = [
    # /usr/include/gentoo-multilib/amd64/bits/pthreadtypes.h 192
    ('__size', c_char * 8),
    ('__align', c_long),
]

pthread_spinlock_t = c_int
pthread_t = c_ulong
ptrdiff_t = c_long
quad_t = __quad_t
register_t = c_long
class timeval(Structure):
    pass
# /usr/include/gentoo-multilib/amd64/sys/select.h 112
select = platform.createBaseFunction( 
	'select', dll=platform.GL, resultType=c_int, 
	argTypes=[c_int,POINTER(fd_set),POINTER(fd_set),POINTER(fd_set),POINTER(timeval)],
	doc='select( c_int(__nfds), POINTER(fd_set)(__readfds), POINTER(fd_set)(__writefds), POINTER(fd_set)(__exceptfds), POINTER(timeval)(__timeout) ) -> c_int', 
	argNames=('__nfds', '__readfds', '__writefds', '__exceptfds', '__timeout'),
)

sigset_t = __sigset_t
ssize_t = __ssize_t

# /usr/include/gentoo-multilib/amd64/inttypes.h 306
strtoimax = platform.createBaseFunction( 
	'strtoimax', dll=platform.GL, resultType=intmax_t, 
	argTypes=[STRING,POINTER(STRING),c_int],
	doc='strtoimax( STRING(__nptr), POINTER(STRING)(__endptr), c_int(__base) ) -> intmax_t', 
	argNames=('__nptr', '__endptr', '__base'),
)

uintmax_t = c_ulong

# /usr/include/gentoo-multilib/amd64/inttypes.h 310
strtoumax = platform.createBaseFunction( 
	'strtoumax', dll=platform.GL, resultType=uintmax_t, 
	argTypes=[STRING,POINTER(STRING),c_int],
	doc='strtoumax( STRING(__nptr), POINTER(STRING)(__endptr), c_int(__base) ) -> uintmax_t', 
	argNames=('__nptr', '__endptr', '__base'),
)

suseconds_t = __suseconds_t
time_t = __time_t
timer_t = __timer_t
timeval._fields_ = [
    # /usr/include/gentoo-multilib/amd64/bits/time.h 70
    ('tv_sec', __time_t),
    ('tv_usec', __suseconds_t),
]
u_char = __u_char
u_int = __u_int
u_int16_t = c_ushort
u_int32_t = c_uint
u_int64_t = c_ulong
u_int8_t = c_ubyte
u_long = __u_long
u_quad_t = __u_quad_t
u_short = __u_short
uid_t = __uid_t
uint = c_uint
uint16_t = c_ushort
uint32_t = c_uint
uint64_t = c_ulong
uint8_t = c_ubyte
uint_fast16_t = c_ulong
uint_fast32_t = c_ulong
uint_fast64_t = c_ulong
uint_fast8_t = c_ubyte
uint_least16_t = c_ushort
uint_least32_t = c_uint
uint_least64_t = c_ulong
uint_least8_t = c_ubyte
uintptr_t = c_ulong
ulong = c_ulong
useconds_t = __useconds_t
ushort = c_ushort

# /usr/include/gentoo-multilib/amd64/inttypes.h 315
wcstoimax = platform.createBaseFunction( 
	'wcstoimax', dll=platform.GL, resultType=intmax_t, 
	argTypes=[WSTRING,POINTER(WSTRING),c_int],
	doc='wcstoimax( WSTRING(__nptr), POINTER(WSTRING)(__endptr), c_int(__base) ) -> intmax_t', 
	argNames=('__nptr', '__endptr', '__base'),
)


# /usr/include/gentoo-multilib/amd64/inttypes.h 320
wcstoumax = platform.createBaseFunction( 
	'wcstoumax', dll=platform.GL, resultType=uintmax_t, 
	argTypes=[WSTRING,POINTER(WSTRING),c_int],
	doc='wcstoumax( WSTRING(__nptr), POINTER(WSTRING)(__endptr), c_int(__base) ) -> uintmax_t', 
	argNames=('__nptr', '__endptr', '__base'),
)

__all__ = [
	'Atom',
	'BIG_ENDIAN',
	'BYTE_ORDER',
	'CWX',
	'CWY',
	'Colormap',
	'Cursor',
	'DefaultScreenOfDisplay',
	'Depth',
	'Display',
	'Drawable',
	'FD_CLR',
	'FD_ISSET',
	'FD_SET',
	'FD_SETSIZE',
	'FD_ZERO',
	'FUNCPROTO',
	'Font',
	'GC',
	'GContext',
	'GLXBufferClobberEventSGIX',
	'GLXContext',
	'GLXContextID',
	'GLXDrawable',
	'GLXEvent',
	'GLXFBConfig',
	'GLXFBConfigID',
	'GLXFBConfigIDSGIX',
	'GLXFBConfigSGIX',
	'GLXHyperpipeConfigSGIX',
	'GLXHyperpipeNetworkSGIX',
	'GLXPbuffer',
	'GLXPbufferClobberEvent',
	'GLXPbufferSGIX',
	'GLXPipeRect',
	'GLXPipeRectLimits',
	'GLXPixmap',
	'GLXVideoSourceSGIX',
	'GLXWindow',
	'GLX_3DFX_FULLSCREEN_MODE_MESA',
	'GLX_3DFX_WINDOW_MODE_MESA',
	'GLX_ACCUM_ALPHA_SIZE',
	'GLX_ACCUM_BLUE_SIZE',
	'GLX_ACCUM_BUFFER_BIT',
	'GLX_ACCUM_BUFFER_BIT_SGIX',
	'GLX_ACCUM_GREEN_SIZE',
	'GLX_ACCUM_RED_SIZE',
	'GLX_ALPHA_SIZE',
	'GLX_AUX0_EXT',
	'GLX_AUX1_EXT',
	'GLX_AUX2_EXT',
	'GLX_AUX3_EXT',
	'GLX_AUX4_EXT',
	'GLX_AUX5_EXT',
	'GLX_AUX6_EXT',
	'GLX_AUX7_EXT',
	'GLX_AUX8_EXT',
	'GLX_AUX9_EXT',
	'GLX_AUX_BUFFERS',
	'GLX_AUX_BUFFERS_BIT',
	'GLX_AUX_BUFFERS_BIT_SGIX',
	'GLX_BACK_EXT',
	'GLX_BACK_LEFT_BUFFER_BIT',
	'GLX_BACK_LEFT_BUFFER_BIT_SGIX',
	'GLX_BACK_LEFT_EXT',
	'GLX_BACK_RIGHT_BUFFER_BIT',
	'GLX_BACK_RIGHT_BUFFER_BIT_SGIX',
	'GLX_BACK_RIGHT_EXT',
	'GLX_BAD_ATTRIBUTE',
	'GLX_BAD_CONTEXT',
	'GLX_BAD_ENUM',
	'GLX_BAD_HYPERPIPE_CONFIG_SGIX',
	'GLX_BAD_HYPERPIPE_SGIX',
	'GLX_BAD_SCREEN',
	'GLX_BAD_VALUE',
	'GLX_BAD_VISUAL',
	'GLX_BIND_TO_MIPMAP_TEXTURE_EXT',
	'GLX_BIND_TO_TEXTURE_RGBA_EXT',
	'GLX_BIND_TO_TEXTURE_RGB_EXT',
	'GLX_BIND_TO_TEXTURE_TARGETS_EXT',
	'GLX_BLENDED_RGBA_SGIS',
	'GLX_BLUE_SIZE',
	'GLX_BUFFER_CLOBBER_MASK_SGIX',
	'GLX_BUFFER_SIZE',
	'GLX_COLOR_INDEX_BIT',
	'GLX_COLOR_INDEX_BIT_SGIX',
	'GLX_COLOR_INDEX_TYPE',
	'GLX_COLOR_INDEX_TYPE_SGIX',
	'GLX_CONFIG_CAVEAT',
	'GLX_DAMAGED',
	'GLX_DAMAGED_SGIX',
	'GLX_DEPTH_BUFFER_BIT',
	'GLX_DEPTH_BUFFER_BIT_SGIX',
	'GLX_DEPTH_SIZE',
	'GLX_DIGITAL_MEDIA_PBUFFER_SGIX',
	'GLX_DIRECT_COLOR',
	'GLX_DIRECT_COLOR_EXT',
	'GLX_DONT_CARE',
	'GLX_DOUBLEBUFFER',
	'GLX_DRAWABLE_TYPE',
	'GLX_DRAWABLE_TYPE_SGIX',
	'GLX_EVENT_MASK',
	'GLX_EVENT_MASK_SGIX',
	'GLX_EXTENSIONS',
	'GLX_EXTENSION_NAME',
	'GLX_FBCONFIG_ID',
	'GLX_FBCONFIG_ID_SGIX',
	'GLX_FLOAT_COMPONENTS_NV',
	'GLX_FRONT_EXT',
	'GLX_FRONT_LEFT_BUFFER_BIT',
	'GLX_FRONT_LEFT_BUFFER_BIT_SGIX',
	'GLX_FRONT_LEFT_EXT',
	'GLX_FRONT_RIGHT_BUFFER_BIT',
	'GLX_FRONT_RIGHT_BUFFER_BIT_SGIX',
	'GLX_FRONT_RIGHT_EXT',
	'GLX_GLXEXT_VERSION',
	'GLX_GRAY_SCALE',
	'GLX_GRAY_SCALE_EXT',
	'GLX_GREEN_SIZE',
	'GLX_HEIGHT',
	'GLX_HEIGHT_SGIX',
	'GLX_HYPERPIPE_DISPLAY_PIPE_SGIX',
	'GLX_HYPERPIPE_ID_SGIX',
	'GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX',
	'GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX',
	'GLX_HYPERPIPE_RENDER_PIPE_SGIX',
	'GLX_HYPERPIPE_STEREO_SGIX',
	'GLX_LARGEST_PBUFFER',
	'GLX_LARGEST_PBUFFER_SGIX',
	'GLX_LEVEL',
	'GLX_MAX_PBUFFER_HEIGHT',
	'GLX_MAX_PBUFFER_HEIGHT_SGIX',
	'GLX_MAX_PBUFFER_PIXELS',
	'GLX_MAX_PBUFFER_PIXELS_SGIX',
	'GLX_MAX_PBUFFER_WIDTH',
	'GLX_MAX_PBUFFER_WIDTH_SGIX',
	'GLX_MIPMAP_TEXTURE_EXT',
	'GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS',
	'GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS',
	'GLX_NONE',
	'GLX_NONE_EXT',
	'GLX_NON_CONFORMANT_CONFIG',
	'GLX_NON_CONFORMANT_VISUAL_EXT',
	'GLX_NO_EXTENSION',
	'GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX',
	'GLX_OPTIMAL_PBUFFER_WIDTH_SGIX',
	'GLX_PBUFFER',
	'GLX_PBUFFER_BIT',
	'GLX_PBUFFER_BIT_SGIX',
	'GLX_PBUFFER_CLOBBER_MASK',
	'GLX_PBUFFER_HEIGHT',
	'GLX_PBUFFER_SGIX',
	'GLX_PBUFFER_WIDTH',
	'GLX_PIPE_RECT_LIMITS_SGIX',
	'GLX_PIPE_RECT_SGIX',
	'GLX_PIXMAP_BIT',
	'GLX_PIXMAP_BIT_SGIX',
	'GLX_PRESERVED_CONTENTS',
	'GLX_PRESERVED_CONTENTS_SGIX',
	'GLX_PSEUDO_COLOR',
	'GLX_PSEUDO_COLOR_EXT',
	'GLX_RED_SIZE',
	'GLX_RENDER_TYPE',
	'GLX_RENDER_TYPE_SGIX',
	'GLX_RGBA',
	'GLX_RGBA_BIT',
	'GLX_RGBA_BIT_SGIX',
	'GLX_RGBA_FLOAT_BIT_ARB',
	'GLX_RGBA_FLOAT_TYPE_ARB',
	'GLX_RGBA_TYPE',
	'GLX_RGBA_TYPE_SGIX',
	'GLX_SAMPLES',
	'GLX_SAMPLES_3DFX',
	'GLX_SAMPLES_ARB',
	'GLX_SAMPLES_SGIS',
	'GLX_SAMPLE_BUFFERS',
	'GLX_SAMPLE_BUFFERS_3DFX',
	'GLX_SAMPLE_BUFFERS_ARB',
	'GLX_SAMPLE_BUFFERS_BIT_SGIX',
	'GLX_SAMPLE_BUFFERS_SGIS',
	'GLX_SAVED',
	'GLX_SAVED_SGIX',
	'GLX_SCREEN',
	'GLX_SCREEN_EXT',
	'GLX_SHARE_CONTEXT_EXT',
	'GLX_SLOW_CONFIG',
	'GLX_SLOW_VISUAL_EXT',
	'GLX_STATIC_COLOR',
	'GLX_STATIC_COLOR_EXT',
	'GLX_STATIC_GRAY',
	'GLX_STATIC_GRAY_EXT',
	'GLX_STENCIL_BUFFER_BIT',
	'GLX_STENCIL_BUFFER_BIT_SGIX',
	'GLX_STENCIL_SIZE',
	'GLX_STEREO',
	'GLX_SWAP_COPY_OML',
	'GLX_SWAP_EXCHANGE_OML',
	'GLX_SWAP_METHOD_OML',
	'GLX_SWAP_UNDEFINED_OML',
	'GLX_SYNC_FRAME_SGIX',
	'GLX_SYNC_SWAP_SGIX',
	'GLX_TEXTURE_1D_BIT_EXT',
	'GLX_TEXTURE_1D_EXT',
	'GLX_TEXTURE_2D_BIT_EXT',
	'GLX_TEXTURE_2D_EXT',
	'GLX_TEXTURE_FORMAT_EXT',
	'GLX_TEXTURE_FORMAT_NONE_EXT',
	'GLX_TEXTURE_FORMAT_RGBA_EXT',
	'GLX_TEXTURE_FORMAT_RGB_EXT',
	'GLX_TEXTURE_RECTANGLE_BIT_EXT',
	'GLX_TEXTURE_RECTANGLE_EXT',
	'GLX_TEXTURE_TARGET_EXT',
	'GLX_TRANSPARENT_ALPHA_VALUE',
	'GLX_TRANSPARENT_ALPHA_VALUE_EXT',
	'GLX_TRANSPARENT_BLUE_VALUE',
	'GLX_TRANSPARENT_BLUE_VALUE_EXT',
	'GLX_TRANSPARENT_GREEN_VALUE',
	'GLX_TRANSPARENT_GREEN_VALUE_EXT',
	'GLX_TRANSPARENT_INDEX',
	'GLX_TRANSPARENT_INDEX_EXT',
	'GLX_TRANSPARENT_INDEX_VALUE',
	'GLX_TRANSPARENT_INDEX_VALUE_EXT',
	'GLX_TRANSPARENT_RED_VALUE',
	'GLX_TRANSPARENT_RED_VALUE_EXT',
	'GLX_TRANSPARENT_RGB',
	'GLX_TRANSPARENT_RGB_EXT',
	'GLX_TRANSPARENT_TYPE',
	'GLX_TRANSPARENT_TYPE_EXT',
	'GLX_TRUE_COLOR',
	'GLX_TRUE_COLOR_EXT',
	'GLX_USE_GL',
	'GLX_VENDOR',
	'GLX_VERSION',
	'GLX_VERSION_1_1',
	'GLX_VERSION_1_2',
	'GLX_VERSION_1_3',
	'GLX_VERSION_1_4',
	'GLX_VISUAL_CAVEAT_EXT',
	'GLX_VISUAL_ID',
	'GLX_VISUAL_ID_EXT',
	'GLX_VISUAL_SELECT_GROUP_SGIX',
	'GLX_WIDTH',
	'GLX_WIDTH_SGIX',
	'GLX_WINDOW',
	'GLX_WINDOW_BIT',
	'GLX_WINDOW_BIT_SGIX',
	'GLX_WINDOW_SGIX',
	'GLX_X_RENDERABLE',
	'GLX_X_RENDERABLE_SGIX',
	'GLX_X_VISUAL_TYPE',
	'GLX_X_VISUAL_TYPE_EXT',
	'GLX_Y_INVERTED_EXT',
	'GL_ALL_CLIENT_ATTRIB_BITS',
	'GL_ALPHA_BLEND_EQUATION_ATI',
	'GL_BYTE',
	'GL_DEBUG_ASSERT_MESA',
	'GL_DEBUG_OBJECT_MESA',
	'GL_DEBUG_PRINT_MESA',
	'GL_DEPTH_STENCIL_MESA',
	'GL_DOUBLE',
	'GL_FALSE',
	'GL_FLOAT',
	'GL_FRAGMENT_PROGRAM_CALLBACK_DATA_MESA',
	'GL_FRAGMENT_PROGRAM_CALLBACK_FUNC_MESA',
	'GL_FRAGMENT_PROGRAM_CALLBACK_MESA',
	'GL_FRAGMENT_PROGRAM_POSITION_MESA',
	'GL_INT',
	'GL_SHORT',
	'GL_TRACE_ALL_BITS_MESA',
	'GL_TRACE_ARRAYS_BIT_MESA',
	'GL_TRACE_ERRORS_BIT_MESA',
	'GL_TRACE_MASK_MESA',
	'GL_TRACE_NAME_MESA',
	'GL_TRACE_OPERATIONS_BIT_MESA',
	'GL_TRACE_PIXELS_BIT_MESA',
	'GL_TRACE_PRIMITIVES_BIT_MESA',
	'GL_TRACE_TEXTURES_BIT_MESA',
	'GL_TRUE',
	'GL_UNSIGNED_BYTE',
	'GL_UNSIGNED_INT',
	'GL_UNSIGNED_INT_24_8_MESA',
	'GL_UNSIGNED_INT_8_24_REV_MESA',
	'GL_UNSIGNED_SHORT',
	'GL_UNSIGNED_SHORT_15_1_MESA',
	'GL_UNSIGNED_SHORT_1_15_REV_MESA',
	'GL_VERTEX_PROGRAM_CALLBACK_DATA_MESA',
	'GL_VERTEX_PROGRAM_CALLBACK_FUNC_MESA',
	'GL_VERTEX_PROGRAM_CALLBACK_MESA',
	'GL_VERTEX_PROGRAM_POSITION_MESA',
	'GLbitfield',
	'GLboolean',
	'GLbyte',
	'GLchar',
	'GLcharARB',
	'GLclampd',
	'GLclampf',
	'GLdouble',
	'GLenum',
	'GLfloat',
	'GLhalfARB',
	'GLhalfNV',
	'GLhandleARB',
	'GLint',
	'GLintptr',
	'GLintptrARB',
	'GLprogramcallbackMESA',
	'GLshort',
	'GLsizei',
	'GLsizeiptr',
	'GLsizeiptrARB',
	'GLubyte',
	'GLuint',
	'GLushort',
	'GLvoid',
	'KeyCode',
	'KeySym',
	'LITTLE_ENDIAN',
	'Mask',
	'N10XSizeHints4DOT_93E',
	'N14pthread_cond_t3DOT_7E',
	'N16pthread_rwlock_t4DOT_10E',
	'N19XClientMessageEvent4DOT_64E',
	'N24_XIMStringConversionText4DOT_86E',
	'N28_XIMStatusDrawCallbackStruct4DOT_90E',
	'N8_XIMText4DOT_85E',
	'NFDBITS',
	'PDP_ENDIAN',
	'Pixmap',
	'Region',
	'Screen',
	'ScreenFormat',
	'Time',
	'Visual',
	'VisualID',
	'Window',
	'XActivateScreenSaver',
	'XAddConnectionWatch',
	'XAddExtension',
	'XAddHost',
	'XAddHosts',
	'XAddToExtensionList',
	'XAddToSaveSet',
	'XAllPlanes',
	'XAllocClassHint',
	'XAllocColor',
	'XAllocColorCells',
	'XAllocColorPlanes',
	'XAllocIconSize',
	'XAllocNamedColor',
	'XAllocSizeHints',
	'XAllocStandardColormap',
	'XAllocWMHints',
	'XAllowEvents',
	'XAnyEvent',
	'XArc',
	'XAutoRepeatOff',
	'XAutoRepeatOn',
	'XBaseFontNameListOfFontSet',
	'XBell',
	'XBitmapBitOrder',
	'XBitmapPad',
	'XBitmapUnit',
	'XBlackPixel',
	'XBlackPixelOfScreen',
	'XButtonEvent',
	'XButtonPressedEvent',
	'XButtonReleasedEvent',
	'XCNOENT',
	'XCNOMEM',
	'XCSUCCESS',
	'XCellsOfScreen',
	'XChangeActivePointerGrab',
	'XChangeGC',
	'XChangeKeyboardControl',
	'XChangeKeyboardMapping',
	'XChangePointerControl',
	'XChangeProperty',
	'XChangeSaveSet',
	'XChangeWindowAttributes',
	'XChar2b',
	'XCharStruct',
	'XCheckIfEvent',
	'XCheckMaskEvent',
	'XCheckTypedEvent',
	'XCheckTypedWindowEvent',
	'XCheckWindowEvent',
	'XCirculateEvent',
	'XCirculateRequestEvent',
	'XCirculateSubwindows',
	'XCirculateSubwindowsDown',
	'XCirculateSubwindowsUp',
	'XClassHint',
	'XClearArea',
	'XClearWindow',
	'XClientMessageEvent',
	'XClipBox',
	'XCloseDisplay',
	'XCloseIM',
	'XCloseOM',
	'XColor',
	'XColormapEvent',
	'XComposeStatus',
	'XCompoundTextStyle',
	'XConfigureEvent',
	'XConfigureRequestEvent',
	'XConfigureWindow',
	'XConnectionNumber',
	'XConnectionWatchProc',
	'XContext',
	'XContextDependentDrawing',
	'XContextualDrawing',
	'XConvertCase',
	'XConvertSelection',
	'XCopyArea',
	'XCopyColormapAndFree',
	'XCopyGC',
	'XCopyPlane',
	'XCreateBitmapFromData',
	'XCreateColormap',
	'XCreateFontCursor',
	'XCreateFontSet',
	'XCreateGC',
	'XCreateGlyphCursor',
	'XCreateIC',
	'XCreateImage',
	'XCreateOC',
	'XCreatePixmap',
	'XCreatePixmapCursor',
	'XCreatePixmapFromBitmapData',
	'XCreateRegion',
	'XCreateSimpleWindow',
	'XCreateWindow',
	'XCreateWindowEvent',
	'XCrossingEvent',
	'XDefaultColormap',
	'XDefaultColormapOfScreen',
	'XDefaultDepth',
	'XDefaultDepthOfScreen',
	'XDefaultGC',
	'XDefaultGCOfScreen',
	'XDefaultRootWindow',
	'XDefaultScreen',
	'XDefaultScreenOfDisplay',
	'XDefaultString',
	'XDefaultVisual',
	'XDefaultVisualOfScreen',
	'XDefineCursor',
	'XDeleteContext',
	'XDeleteModifiermapEntry',
	'XDeleteProperty',
	'XDestroyIC',
	'XDestroyOC',
	'XDestroyRegion',
	'XDestroySubwindows',
	'XDestroyWindow',
	'XDestroyWindowEvent',
	'XDirectionalDependentDrawing',
	'XDisableAccessControl',
	'XDisplayCells',
	'XDisplayHeight',
	'XDisplayHeightMM',
	'XDisplayKeycodes',
	'XDisplayMotionBufferSize',
	'XDisplayName',
	'XDisplayOfIM',
	'XDisplayOfOM',
	'XDisplayOfScreen',
	'XDisplayPlanes',
	'XDisplayString',
	'XDisplayWidth',
	'XDisplayWidthMM',
	'XDoesBackingStore',
	'XDoesSaveUnders',
	'XDrawArc',
	'XDrawArcs',
	'XDrawImageString',
	'XDrawImageString16',
	'XDrawLine',
	'XDrawLines',
	'XDrawPoint',
	'XDrawPoints',
	'XDrawRectangle',
	'XDrawRectangles',
	'XDrawSegments',
	'XDrawString',
	'XDrawString16',
	'XDrawText',
	'XDrawText16',
	'XEDataObject',
	'XEHeadOfExtensionList',
	'XEmptyRegion',
	'XEnableAccessControl',
	'XEnterWindowEvent',
	'XEqualRegion',
	'XErrorEvent',
	'XErrorHandler',
	'XEvent',
	'XEventMaskOfScreen',
	'XEventsQueued',
	'XExposeEvent',
	'XExtCodes',
	'XExtData',
	'XExtendedMaxRequestSize',
	'XExtentsOfFontSet',
	'XFetchBuffer',
	'XFetchBytes',
	'XFetchName',
	'XFillArc',
	'XFillArcs',
	'XFillPolygon',
	'XFillRectangle',
	'XFillRectangles',
	'XFilterEvent',
	'XFindContext',
	'XFindOnExtensionList',
	'XFlush',
	'XFlushGC',
	'XFocusChangeEvent',
	'XFocusInEvent',
	'XFocusOutEvent',
	'XFontProp',
	'XFontSet',
	'XFontSetExtents',
	'XFontStruct',
	'XFontsOfFontSet',
	'XForceScreenSaver',
	'XFree',
	'XFreeColormap',
	'XFreeColors',
	'XFreeCursor',
	'XFreeExtensionList',
	'XFreeFont',
	'XFreeFontInfo',
	'XFreeFontNames',
	'XFreeFontPath',
	'XFreeFontSet',
	'XFreeGC',
	'XFreeModifiermap',
	'XFreePixmap',
	'XFreeStringList',
	'XGCValues',
	'XGContextFromGC',
	'XGeometry',
	'XGetAtomName',
	'XGetAtomNames',
	'XGetClassHint',
	'XGetCommand',
	'XGetDefault',
	'XGetErrorDatabaseText',
	'XGetErrorText',
	'XGetFontPath',
	'XGetFontProperty',
	'XGetGCValues',
	'XGetGeometry',
	'XGetICValues',
	'XGetIMValues',
	'XGetIconName',
	'XGetIconSizes',
	'XGetImage',
	'XGetInputFocus',
	'XGetKeyboardControl',
	'XGetKeyboardMapping',
	'XGetModifierMapping',
	'XGetMotionEvents',
	'XGetNormalHints',
	'XGetOCValues',
	'XGetOMValues',
	'XGetPointerControl',
	'XGetPointerMapping',
	'XGetRGBColormaps',
	'XGetScreenSaver',
	'XGetSelectionOwner',
	'XGetSizeHints',
	'XGetStandardColormap',
	'XGetSubImage',
	'XGetTextProperty',
	'XGetTransientForHint',
	'XGetVisualInfo',
	'XGetWMClientMachine',
	'XGetWMColormapWindows',
	'XGetWMHints',
	'XGetWMIconName',
	'XGetWMName',
	'XGetWMNormalHints',
	'XGetWMProtocols',
	'XGetWMSizeHints',
	'XGetWindowAttributes',
	'XGetWindowProperty',
	'XGetZoomHints',
	'XGrabButton',
	'XGrabKey',
	'XGrabKeyboard',
	'XGrabPointer',
	'XGrabServer',
	'XGraphicsExposeEvent',
	'XGravityEvent',
	'XHeightMMOfScreen',
	'XHeightOfScreen',
	'XHostAddress',
	'XIC',
	'XICCEncodingStyle',
	'XICCallback',
	'XICProc',
	'XID',
	'XIDProc',
	'XIM',
	'XIMAbsolutePosition',
	'XIMBackwardChar',
	'XIMBackwardWord',
	'XIMBitmapType',
	'XIMCallback',
	'XIMCaretDirection',
	'XIMCaretDown',
	'XIMCaretStyle',
	'XIMCaretUp',
	'XIMDontChange',
	'XIMFeedback',
	'XIMForwardChar',
	'XIMForwardWord',
	'XIMHotKeyState',
	'XIMHotKeyTrigger',
	'XIMHotKeyTriggers',
	'XIMIsInvisible',
	'XIMIsPrimary',
	'XIMIsSecondary',
	'XIMLineEnd',
	'XIMLineStart',
	'XIMNextLine',
	'XIMOfIC',
	'XIMPreeditCaretCallbackStruct',
	'XIMPreeditDrawCallbackStruct',
	'XIMPreeditState',
	'XIMPreeditStateNotifyCallbackStruct',
	'XIMPreviousLine',
	'XIMProc',
	'XIMResetState',
	'XIMStatusDataType',
	'XIMStatusDrawCallbackStruct',
	'XIMStringConversionCallbackStruct',
	'XIMStringConversionFeedback',
	'XIMStringConversionOperation',
	'XIMStringConversionPosition',
	'XIMStringConversionText',
	'XIMStringConversionType',
	'XIMStyle',
	'XIMStyles',
	'XIMText',
	'XIMTextType',
	'XIMValuesList',
	'XIOErrorHandler',
	'XIconSize',
	'XIconifyWindow',
	'XIfEvent',
	'XImage',
	'XImageByteOrder',
	'XInitExtension',
	'XInitImage',
	'XInitThreads',
	'XInsertModifiermapEntry',
	'XInstallColormap',
	'XInternAtom',
	'XInternAtoms',
	'XInternalConnectionNumbers',
	'XIntersectRegion',
	'XK_0',
	'XK_1',
	'XK_2',
	'XK_3',
	'XK_4',
	'XK_5',
	'XK_6',
	'XK_7',
	'XK_8',
	'XK_9',
	'XK_A',
	'XK_AE',
	'XK_B',
	'XK_C',
	'XK_D',
	'XK_E',
	'XK_ENG',
	'XK_ETH',
	'XK_F',
	'XK_F1',
	'XK_F10',
	'XK_F11',
	'XK_F12',
	'XK_F13',
	'XK_F14',
	'XK_F15',
	'XK_F16',
	'XK_F17',
	'XK_F18',
	'XK_F19',
	'XK_F2',
	'XK_F20',
	'XK_F21',
	'XK_F22',
	'XK_F23',
	'XK_F24',
	'XK_F25',
	'XK_F26',
	'XK_F27',
	'XK_F28',
	'XK_F29',
	'XK_F3',
	'XK_F30',
	'XK_F31',
	'XK_F32',
	'XK_F33',
	'XK_F34',
	'XK_F35',
	'XK_F4',
	'XK_F5',
	'XK_F6',
	'XK_F7',
	'XK_F8',
	'XK_F9',
	'XK_G',
	'XK_H',
	'XK_I',
	'XK_J',
	'XK_K',
	'XK_KP_0',
	'XK_KP_1',
	'XK_KP_2',
	'XK_KP_3',
	'XK_KP_4',
	'XK_KP_5',
	'XK_KP_6',
	'XK_KP_7',
	'XK_KP_8',
	'XK_KP_9',
	'XK_KP_F1',
	'XK_KP_F2',
	'XK_KP_F3',
	'XK_KP_F4',
	'XK_L',
	'XK_L1',
	'XK_L10',
	'XK_L2',
	'XK_L3',
	'XK_L4',
	'XK_L5',
	'XK_L6',
	'XK_L7',
	'XK_L8',
	'XK_L9',
	'XK_M',
	'XK_N',
	'XK_O',
	'XK_OE',
	'XK_P',
	'XK_Q',
	'XK_R',
	'XK_R1',
	'XK_R10',
	'XK_R11',
	'XK_R12',
	'XK_R13',
	'XK_R14',
	'XK_R15',
	'XK_R2',
	'XK_R3',
	'XK_R4',
	'XK_R5',
	'XK_R6',
	'XK_R7',
	'XK_R8',
	'XK_R9',
	'XK_S',
	'XK_SCHWA',
	'XK_T',
	'XK_THORN',
	'XK_U',
	'XK_V',
	'XK_W',
	'XK_X',
	'XK_Y',
	'XK_Z',
	'XKeyEvent',
	'XKeyPressedEvent',
	'XKeyReleasedEvent',
	'XKeyboardControl',
	'XKeyboardState',
	'XKeycodeToKeysym',
	'XKeymapEvent',
	'XKeysymToKeycode',
	'XKeysymToString',
	'XKillClient',
	'XLastKnownRequestProcessed',
	'XLeaveWindowEvent',
	'XListDepths',
	'XListExtensions',
	'XListFonts',
	'XListFontsWithInfo',
	'XListHosts',
	'XListInstalledColormaps',
	'XListPixmapFormats',
	'XListProperties',
	'XLoadFont',
	'XLoadQueryFont',
	'XLocaleOfFontSet',
	'XLocaleOfIM',
	'XLocaleOfOM',
	'XLockDisplay',
	'XLookupColor',
	'XLookupKeysym',
	'XLookupString',
	'XLowerWindow',
	'XMapEvent',
	'XMapRaised',
	'XMapRequestEvent',
	'XMapSubwindows',
	'XMapWindow',
	'XMappingEvent',
	'XMaskEvent',
	'XMatchVisualInfo',
	'XMaxCmapsOfScreen',
	'XMaxRequestSize',
	'XMinCmapsOfScreen',
	'XModifierKeymap',
	'XMotionEvent',
	'XMoveResizeWindow',
	'XMoveWindow',
	'XNewModifiermap',
	'XNextEvent',
	'XNextRequest',
	'XNoExposeEvent',
	'XNoOp',
	'XOC',
	'XOM',
	'XOMCharSetList',
	'XOMFontInfo',
	'XOMOfOC',
	'XOMOrientation',
	'XOMOrientation_Context',
	'XOMOrientation_LTR_TTB',
	'XOMOrientation_RTL_TTB',
	'XOMOrientation_TTB_LTR',
	'XOMOrientation_TTB_RTL',
	'XOffsetRegion',
	'XOpenDisplay',
	'XOpenIM',
	'XOpenOM',
	'XOrientation',
	'XParseColor',
	'XParseGeometry',
	'XPeekEvent',
	'XPeekIfEvent',
	'XPending',
	'XPixmapFormatValues',
	'XPlanesOfScreen',
	'XPoint',
	'XPointInRegion',
	'XPointer',
	'XPointerMovedEvent',
	'XPolygonRegion',
	'XProcessInternalConnection',
	'XPropertyEvent',
	'XProtocolRevision',
	'XProtocolVersion',
	'XPutBackEvent',
	'XPutImage',
	'XQLength',
	'XQueryBestCursor',
	'XQueryBestSize',
	'XQueryBestStipple',
	'XQueryBestTile',
	'XQueryColor',
	'XQueryColors',
	'XQueryExtension',
	'XQueryFont',
	'XQueryKeymap',
	'XQueryPointer',
	'XQueryTextExtents',
	'XQueryTextExtents16',
	'XQueryTree',
	'XRaiseWindow',
	'XReadBitmapFile',
	'XReadBitmapFileData',
	'XRebindKeysym',
	'XRecolorCursor',
	'XReconfigureWMWindow',
	'XRectInRegion',
	'XRectangle',
	'XRefreshKeyboardMapping',
	'XRegisterIMInstantiateCallback',
	'XRemoveConnectionWatch',
	'XRemoveFromSaveSet',
	'XRemoveHost',
	'XRemoveHosts',
	'XReparentEvent',
	'XReparentWindow',
	'XResetScreenSaver',
	'XResizeRequestEvent',
	'XResizeWindow',
	'XResourceManagerString',
	'XRestackWindows',
	'XRootWindow',
	'XRootWindowOfScreen',
	'XRotateBuffers',
	'XRotateWindowProperties',
	'XSaveContext',
	'XScreenCount',
	'XScreenNumberOfScreen',
	'XScreenOfDisplay',
	'XScreenResourceString',
	'XSegment',
	'XSelectInput',
	'XSelectionClearEvent',
	'XSelectionEvent',
	'XSelectionRequestEvent',
	'XSendEvent',
	'XServerInterpretedAddress',
	'XServerVendor',
	'XSetAccessControl',
	'XSetAfterFunction',
	'XSetArcMode',
	'XSetAuthorization',
	'XSetBackground',
	'XSetClassHint',
	'XSetClipMask',
	'XSetClipOrigin',
	'XSetClipRectangles',
	'XSetCloseDownMode',
	'XSetCommand',
	'XSetDashes',
	'XSetErrorHandler',
	'XSetFillRule',
	'XSetFillStyle',
	'XSetFont',
	'XSetFontPath',
	'XSetForeground',
	'XSetFunction',
	'XSetGraphicsExposures',
	'XSetICFocus',
	'XSetICValues',
	'XSetIMValues',
	'XSetIOErrorHandler',
	'XSetIconName',
	'XSetIconSizes',
	'XSetInputFocus',
	'XSetLineAttributes',
	'XSetLocaleModifiers',
	'XSetModifierMapping',
	'XSetNormalHints',
	'XSetOCValues',
	'XSetOMValues',
	'XSetPlaneMask',
	'XSetPointerMapping',
	'XSetRGBColormaps',
	'XSetRegion',
	'XSetScreenSaver',
	'XSetSelectionOwner',
	'XSetSizeHints',
	'XSetStandardColormap',
	'XSetStandardProperties',
	'XSetState',
	'XSetStipple',
	'XSetSubwindowMode',
	'XSetTSOrigin',
	'XSetTextProperty',
	'XSetTile',
	'XSetTransientForHint',
	'XSetWMClientMachine',
	'XSetWMColormapWindows',
	'XSetWMHints',
	'XSetWMIconName',
	'XSetWMName',
	'XSetWMNormalHints',
	'XSetWMProperties',
	'XSetWMProtocols',
	'XSetWMSizeHints',
	'XSetWindowAttributes',
	'XSetWindowBackground',
	'XSetWindowBackgroundPixmap',
	'XSetWindowBorder',
	'XSetWindowBorderPixmap',
	'XSetWindowBorderWidth',
	'XSetWindowColormap',
	'XSetZoomHints',
	'XShrinkRegion',
	'XSizeHints',
	'XStandardColormap',
	'XStdICCTextStyle',
	'XStoreBuffer',
	'XStoreBytes',
	'XStoreColor',
	'XStoreColors',
	'XStoreName',
	'XStoreNamedColor',
	'XStringListToTextProperty',
	'XStringStyle',
	'XStringToKeysym',
	'XSubtractRegion',
	'XSupportsLocale',
	'XSync',
	'XSynchronize',
	'XTextExtents',
	'XTextExtents16',
	'XTextItem',
	'XTextItem16',
	'XTextProperty',
	'XTextPropertyToStringList',
	'XTextStyle',
	'XTextWidth',
	'XTextWidth16',
	'XTimeCoord',
	'XTranslateCoordinates',
	'XUTF8StringStyle',
	'XUndefineCursor',
	'XUngrabButton',
	'XUngrabKey',
	'XUngrabKeyboard',
	'XUngrabPointer',
	'XUngrabServer',
	'XUninstallColormap',
	'XUnionRectWithRegion',
	'XUnionRegion',
	'XUnloadFont',
	'XUnlockDisplay',
	'XUnmapEvent',
	'XUnmapSubwindows',
	'XUnmapWindow',
	'XUnregisterIMInstantiateCallback',
	'XUnsetICFocus',
	'XVaCreateNestedList',
	'XVaNestedList',
	'XVendorRelease',
	'XVisibilityEvent',
	'XVisualIDFromVisual',
	'XVisualInfo',
	'XWMGeometry',
	'XWMHints',
	'XWarpPointer',
	'XWhitePixel',
	'XWhitePixelOfScreen',
	'XWidthMMOfScreen',
	'XWidthOfScreen',
	'XWindowAttributes',
	'XWindowChanges',
	'XWindowEvent',
	'XWithdrawWindow',
	'XWriteBitmapFile',
	'XXorRegion',
	'X_HAVE_UTF8_STRING',
	'X_PROTOCOL',
	'X_PROTOCOL_REVISION',
	'XmbDrawImageString',
	'XmbDrawString',
	'XmbDrawText',
	'XmbLookupString',
	'XmbResetIC',
	'XmbSetWMProperties',
	'XmbTextEscapement',
	'XmbTextExtents',
	'XmbTextItem',
	'XmbTextListToTextProperty',
	'XmbTextPerCharExtents',
	'XmbTextPropertyToTextList',
	'XrmInitialize',
	'Xutf8DrawImageString',
	'Xutf8DrawString',
	'Xutf8DrawText',
	'Xutf8LookupString',
	'Xutf8ResetIC',
	'Xutf8SetWMProperties',
	'Xutf8TextEscapement',
	'Xutf8TextExtents',
	'Xutf8TextListToTextProperty',
	'Xutf8TextPerCharExtents',
	'Xutf8TextPropertyToTextList',
	'XwcDrawImageString',
	'XwcDrawString',
	'XwcDrawText',
	'XwcFreeStringList',
	'XwcLookupString',
	'XwcResetIC',
	'XwcTextEscapement',
	'XwcTextExtents',
	'XwcTextItem',
	'XwcTextListToTextProperty',
	'XwcTextPerCharExtents',
	'XwcTextPropertyToTextList',
	'_4DOT_35',
	'_ATFILE_SOURCE',
	'_BITS_PTHREADTYPES_H',
	'_BITS_TYPESIZES_H',
	'_BITS_TYPES_H',
	'_BITS_WCHAR_H',
	'_BSD_SOURCE',
	'_ENDIAN_H',
	'_FEATURES_H',
	'_INTTYPES_H',
	'_ISOC99_SOURCE',
	'_LARGEFILE64_SOURCE',
	'_LARGEFILE_SOURCE',
	'_POSIX_C_SOURCE',
	'_POSIX_SOURCE',
	'_SIGSET_NWORDS',
	'_STDINT_H',
	'_STRUCT_TIMEVAL',
	'_SVID_SOURCE',
	'_SYS_CDEFS_H',
	'_SYS_SELECT_H',
	'_SYS_SYSMACROS_H',
	'_SYS_TYPES_H',
	'_XComposeStatus',
	'_XDisplay',
	'_XEvent',
	'_XExtData',
	'_XGC',
	'_XIC',
	'_XIM',
	'_XIMHotKeyTrigger',
	'_XIMHotKeyTriggers',
	'_XIMPreeditCaretCallbackStruct',
	'_XIMPreeditDrawCallbackStruct',
	'_XIMPreeditStateNotifyCallbackStruct',
	'_XIMStatusDrawCallbackStruct',
	'_XIMStringConversionCallbackStruct',
	'_XIMStringConversionText',
	'_XIMText',
	'_XImage',
	'_XOC',
	'_XOM',
	'_XOPEN_SOURCE',
	'_XOPEN_SOURCE_EXTENDED',
	'_XPrivDisplay',
	'_XPrivate',
	'_XRegion',
	'_X_ATTRIBUTE_PRINTF',
	'_X_SENTINEL',
	'_Xmblen',
	'_Xmbtowc',
	'_XrmHashBucketRec',
	'_Xwctomb',
	'__ASMNAME',
	'__BIG_ENDIAN',
	'__BIT_TYPES_DEFINED__',
	'__BYTE_ORDER',
	'__CONCAT',
	'__FDELT',
	'__FD_ISSET',
	'__FD_SETSIZE',
	'__FLOAT_WORD_ORDER',
	'__GLIBC_HAVE_LONG_LONG',
	'__GLIBC_MINOR__',
	'__GLIBC_PREREQ',
	'__GLIBC__',
	'__GLXEvent',
	'__GLXFBConfigRec',
	'__GLXcontextRec',
	'__GLXextFuncPtr',
	'__GNUC_PREREQ',
	'__GNU_LIBRARY__',
	'__LITTLE_ENDIAN',
	'__LONG_LONG_PAIR',
	'__NFDBITS',
	'__P',
	'__PDP_ENDIAN',
	'__PMT',
	'__PTHREAD_MUTEX_HAVE_PREV',
	'__SIZEOF_PTHREAD_ATTR_T',
	'__SIZEOF_PTHREAD_BARRIERATTR_T',
	'__SIZEOF_PTHREAD_BARRIER_T',
	'__SIZEOF_PTHREAD_CONDATTR_T',
	'__SIZEOF_PTHREAD_COND_T',
	'__SIZEOF_PTHREAD_MUTEXATTR_T',
	'__SIZEOF_PTHREAD_MUTEX_T',
	'__SIZEOF_PTHREAD_RWLOCKATTR_T',
	'__SIZEOF_PTHREAD_RWLOCK_T',
	'__STDC_IEC_559_COMPLEX__',
	'__STDC_IEC_559__',
	'__STDC_ISO_10646__',
	'__STRING',
	'__USE_ANSI',
	'__USE_ATFILE',
	'__USE_BSD',
	'__USE_FORTIFY_LEVEL',
	'__USE_GNU',
	'__USE_ISOC99',
	'__USE_LARGEFILE',
	'__USE_LARGEFILE64',
	'__USE_MISC',
	'__USE_POSIX',
	'__USE_POSIX199309',
	'__USE_POSIX199506',
	'__USE_POSIX2',
	'__USE_SVID',
	'__USE_UNIX98',
	'__USE_XOPEN',
	'__USE_XOPEN2K',
	'__USE_XOPEN_EXTENDED',
	'__WCHAR_MAX',
	'__WCHAR_MIN',
	'__WORDSIZE',
	'__WORDSIZE_COMPAT32',
	'__attribute_format_arg__',
	'__attribute_format_strfmon__',
	'__blkcnt64_t',
	'__blkcnt_t',
	'__blksize_t',
	'__bos',
	'__bos0',
	'__caddr_t',
	'__clock_t',
	'__clockid_t',
	'__daddr_t',
	'__dev_t',
	'__fd_mask',
	'__fsblkcnt64_t',
	'__fsblkcnt_t',
	'__fsfilcnt64_t',
	'__fsfilcnt_t',
	'__fsid_t',
	'__gid_t',
	'__id_t',
	'__ino64_t',
	'__ino_t',
	'__int16_t',
	'__int32_t',
	'__int64_t',
	'__int8_t',
	'__intptr_t',
	'__key_t',
	'__loff_t',
	'__mode_t',
	'__nlink_t',
	'__off64_t',
	'__off_t',
	'__pid_t',
	'__pthread_internal_list',
	'__pthread_list_t',
	'__pthread_mutex_s',
	'__qaddr_t',
	'__quad_t',
	'__rlim64_t',
	'__rlim_t',
	'__sig_atomic_t',
	'__sigset_t',
	'__socklen_t',
	'__ssize_t',
	'__suseconds_t',
	'__swblk_t',
	'__time_t',
	'__timer_t',
	'__u_char',
	'__u_int',
	'__u_long',
	'__u_quad_t',
	'__u_short',
	'__uid_t',
	'__uint16_t',
	'__uint32_t',
	'__uint64_t',
	'__uint8_t',
	'__useconds_t',
	'blkcnt64_t',
	'blkcnt_t',
	'blksize_t',
	'caddr_t',
	'clock_t',
	'clockid_t',
	'daddr_t',
	'dev_t',
	'fd_mask',
	'fd_set',
	'fsblkcnt64_t',
	'fsblkcnt_t',
	'fsfilcnt64_t',
	'fsfilcnt_t',
	'fsid_t',
	'funcs',
	'gid_t',
	'glActiveTextureARB',
	'glClientActiveTextureARB',
	'glMultiTexCoord1dARB',
	'glMultiTexCoord1dvARB',
	'glMultiTexCoord1fARB',
	'glMultiTexCoord1fvARB',
	'glMultiTexCoord1iARB',
	'glMultiTexCoord1ivARB',
	'glMultiTexCoord1sARB',
	'glMultiTexCoord1svARB',
	'glMultiTexCoord2dARB',
	'glMultiTexCoord2dvARB',
	'glMultiTexCoord2fARB',
	'glMultiTexCoord2fvARB',
	'glMultiTexCoord2iARB',
	'glMultiTexCoord2ivARB',
	'glMultiTexCoord2sARB',
	'glMultiTexCoord2svARB',
	'glMultiTexCoord3dARB',
	'glMultiTexCoord3dvARB',
	'glMultiTexCoord3fARB',
	'glMultiTexCoord3fvARB',
	'glMultiTexCoord3iARB',
	'glMultiTexCoord3ivARB',
	'glMultiTexCoord3sARB',
	'glMultiTexCoord3svARB',
	'glMultiTexCoord4dARB',
	'glMultiTexCoord4dvARB',
	'glMultiTexCoord4fARB',
	'glMultiTexCoord4fvARB',
	'glMultiTexCoord4iARB',
	'glMultiTexCoord4ivARB',
	'glMultiTexCoord4sARB',
	'glMultiTexCoord4svARB',
	'glXAllocateMemoryNV',
	'glXBindTexImageEXT',
	'glXChooseFBConfig',
	'glXChooseVisual',
	'glXCopyContext',
	'glXCreateContext',
	'glXCreateGLXPixmap',
	'glXCreateNewContext',
	'glXCreatePbuffer',
	'glXCreatePixmap',
	'glXCreateWindow',
	'glXDestroyContext',
	'glXDestroyGLXPixmap',
	'glXDestroyPbuffer',
	'glXDestroyPixmap',
	'glXDestroyWindow',
	'glXFreeMemoryNV',
	'glXGetClientString',
	'glXGetConfig',
	'glXGetCurrentContext',
	'glXGetCurrentDisplay',
	'glXGetCurrentDrawable',
	'glXGetCurrentReadDrawable',
	'glXGetFBConfigAttrib',
	'glXGetFBConfigs',
	'glXGetProcAddress',
	'glXGetSelectedEvent',
	'glXGetVisualFromFBConfig',
	'glXIsDirect',
	'glXMakeContextCurrent',
	'glXMakeCurrent',
	'glXQueryContext',
	'glXQueryDrawable',
	'glXQueryExtension',
	'glXQueryExtensionsString',
	'glXQueryServerString',
	'glXQueryVersion',
	'glXReleaseTexImageEXT',
	'glXSelectEvent',
	'glXSwapBuffers',
	'glXUseXFont',
	'glXWaitGL',
	'glXWaitX',
	'gnu_dev_major',
	'gnu_dev_makedev',
	'gnu_dev_minor',
	'id_t',
	'imaxabs',
	'imaxdiv',
	'imaxdiv_t',
	'ino64_t',
	'ino_t',
	'int16_t',
	'int32_t',
	'int64_t',
	'int8_t',
	'int_fast16_t',
	'int_fast32_t',
	'int_fast64_t',
	'int_fast8_t',
	'int_least16_t',
	'int_least32_t',
	'int_least64_t',
	'int_least8_t',
	'intmax_t',
	'intptr_t',
	'key_t',
	'loff_t',
	'major',
	'makedev',
	'minor',
	'mode_t',
	'nlink_t',
	'off64_t',
	'off_t',
	'offsetof',
	'pid_t',
	'pselect',
	'pthread_attr_t',
	'pthread_barrier_t',
	'pthread_barrierattr_t',
	'pthread_cond_t',
	'pthread_condattr_t',
	'pthread_key_t',
	'pthread_mutex_t',
	'pthread_mutexattr_t',
	'pthread_once_t',
	'pthread_rwlock_t',
	'pthread_rwlockattr_t',
	'pthread_spinlock_t',
	'pthread_t',
	'ptrdiff_t',
	'quad_t',
	'register_t',
	'select',
	'sigset_t',
	'size_t',
	'ssize_t',
	'strtoimax',
	'strtoumax',
	'suseconds_t',
	'time_t',
	'timer_t',
	'timespec',
	'timeval',
	'u_char',
	'u_int',
	'u_int16_t',
	'u_int32_t',
	'u_int64_t',
	'u_int8_t',
	'u_long',
	'u_quad_t',
	'u_short',
	'uid_t',
	'uint',
	'uint16_t',
	'uint32_t',
	'uint64_t',
	'uint8_t',
	'uint_fast16_t',
	'uint_fast32_t',
	'uint_fast64_t',
	'uint_fast8_t',
	'uint_least16_t',
	'uint_least32_t',
	'uint_least64_t',
	'uint_least8_t',
	'uintmax_t',
	'uintptr_t',
	'ulong',
	'useconds_t',
	'ushort',
	'wcstoimax',
	'wcstoumax'
]

