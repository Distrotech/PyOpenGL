Index: codegenerator.py
===================================================================
RCS file: /cvsroot/ctypes/ctypes/ctypes/wrap/codegenerator.py,v
retrieving revision 1.6.2.3
diff -C3 -r1.6.2.3 codegenerator.py
*** codegenerator.py	5 Aug 2005 17:55:07 -0000	1.6.2.3
--- codegenerator.py	21 Aug 2005 03:16:47 -0000
***************
*** 620,625 ****
--- 620,630 ----
                  print >> self.stream, "@ %s(%s, '%s', [%s])" % \
                        (cc, self.type_name(func.returns), libname, ", ".join(args))
              argnames = ["p%d" % i for i in range(1, 1+len(args))]
+             if hasattr( func, 'argnames'):
+                 argnames = [
+                     (name or number)
+                     for (name,number) in zip(func.argnames,argnames)
+                 ]
              # function definition
              print >> self.stream, "def %s(%s):" % (func.name, ", ".join(argnames))
              if func.location:
Index: gccxmlparser.py
===================================================================
RCS file: /cvsroot/ctypes/ctypes/ctypes/wrap/gccxmlparser.py,v
retrieving revision 1.2
diff -C3 -r1.2 gccxmlparser.py
*** gccxmlparser.py	11 Mar 2005 10:23:44 -0000	1.2
--- gccxmlparser.py	21 Aug 2005 03:16:47 -0000
***************
*** 225,231 ****
          typ = attrs["type"]
          parent = self.context[-1]
          if parent is not None:
!             parent.add_argument(typ) # name?
  
      # enumerations
  
--- 225,231 ----
          typ = attrs["type"]
          parent = self.context[-1]
          if parent is not None:
!             parent.add_argument(typ, attrs.get('name'))
  
      # enumerations
  
Index: typedesc.py
===================================================================
RCS file: /cvsroot/ctypes/ctypes/ctypes/wrap/typedesc.py,v
retrieving revision 1.1
diff -C3 -r1.1 typedesc.py
*** typedesc.py	4 Feb 2005 17:01:24 -0000	1.1
--- typedesc.py	21 Aug 2005 03:16:47 -0000
***************
*** 5,12 ****
      from sets import Set as set
  
  class _HasArgs(object):
!     def add_argument(self, arg):
          self.arguments.append(arg)
  
  ################
  
--- 5,15 ----
      from sets import Set as set
  
  class _HasArgs(object):
!     def add_argument(self, arg, name=None):
          self.arguments.append(arg)
+         if not hasattr( self, 'argnames' ):
+             self.argnames = []
+         self.argnames.append( name ) 
  
  ################
  
